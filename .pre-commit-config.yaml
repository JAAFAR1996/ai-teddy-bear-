# 🛡️ Pre-commit Configuration - AI Teddy Bear Project 2025
# Enforces code quality and security standards

repos:
  # ================== CODE FORMATTING ==================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ["--pytest-test-first"]
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # ================== PYTHON CODE FORMATTING ==================
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: "Black - Code Formatter"
        description: "Format Python code with Black"
        language_version: python3.11

  # ================== IMPORT SORTING ==================
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: "isort - Import Sorter"
        description: "Sort Python imports"
        args: ["--profile", "black", "--check-only", "--diff"]

  # ================== LINTING & QUALITY ==================
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: "Flake8 - Code Linter"
        description: "Lint Python code for style and errors"
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bandit
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        args: ["--config=config/.flake8"]

  # ================== TYPE CHECKING ==================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: "MyPy - Type Checker"
        description: "Static type checking for Python"
        additional_dependencies: [types-all]
        args: ["--config-file=config/mypy.ini"]
        exclude: ^(tests/|migrations/|scripts/)

  # ================== SECURITY SCANNING ==================
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "Bandit - Security Linter"
        description: "Security vulnerability scanner"
        args: ["-c", "config/.bandit", "-r", "."]
        exclude: ^tests/

  # ================== DEPENDENCY SECURITY ==================
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: "Safety - Dependency Vulnerability Check"
        description: "Check for known security vulnerabilities in dependencies"

  # ================== WILDCARD IMPORT PREVENTION ==================
  - repo: local
    hooks:
      - id: no-wildcard-imports
        name: "No Wildcard Imports"
        description: "Prevent wildcard imports (import *)"
        entry: python -c "
import sys
import re
import os

def check_wildcard_imports(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Pattern to match wildcard imports
    pattern = r'from\s+[\w.]+\s+import\s+\*'
    matches = re.finditer(pattern, content, re.MULTILINE)
    
    violations = []
    for match in matches:
        line_number = content[:match.start()].count('\n') + 1
        violations.append(f'{filename}:{line_number}: F403 wildcard import detected: {match.group()}')
    
    return violations

all_violations = []
for filename in sys.argv[1:]:
    if filename.endswith('.py'):
        violations = check_wildcard_imports(filename)
        all_violations.extend(violations)

if all_violations:
    print('❌ WILDCARD IMPORTS DETECTED:')
    for violation in all_violations:
        print(f'  {violation}')
    print('')
    print('🛠️  FIX: Replace wildcard imports with specific imports:')
    print('   ❌ from module import *')
    print('   ✅ from module import ClassA, function_b, CONSTANT_C')
    sys.exit(1)
print('✅ No wildcard imports found')
"
        language: python3
        files: \.py$
        exclude: ^(tests/.*test.*\.py|__init__\.py)$

  # ================== TODO/FIXME MONITORING ==================
  - repo: local
    hooks:
      - id: todo-checker
        name: "TODO/FIXME Checker"
        description: "Monitor TODO and FIXME comments"
        entry: python -c "
import sys
import re

def check_todos(filename):
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    todos = []
    for i, line in enumerate(lines, 1):
        if re.search(r'#\s*(TODO|FIXME|XXX|HACK)', line, re.IGNORECASE):
            todos.append(f'{filename}:{i}: {line.strip()}')
    
    return todos

all_todos = []
for filename in sys.argv[1:]:
    if filename.endswith('.py'):
        todos = check_todos(filename)
        all_todos.extend(todos)

if all_todos:
    print('📝 TODO/FIXME ITEMS FOUND:')
    for todo in all_todos[:10]:  # Limit to first 10
        print(f'  {todo}')
    if len(all_todos) > 10:
        print(f'  ... and {len(all_todos) - 10} more')
    print('')
    print('💡 Consider creating GitHub issues for these items')
"
        language: python3
        files: \.py$
        pass_filenames: true
        verbose: true

  # ================== DOCSTRING REQUIREMENTS ==================
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: "Pydocstyle - Docstring Checker"
        description: "Check docstring style"
        args: ["--convention=google"]
        exclude: ^(tests/|migrations/)

  # ================== JSON/YAML VALIDATION ==================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-json
        name: "JSON Validator"
      - id: check-yaml
        name: "YAML Validator"
        args: ["--multi"]

  # ================== DOCKERFILE LINTING ==================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "Hadolint - Dockerfile Linter"
        description: "Lint Dockerfiles"

  # ================== SECRETS DETECTION ==================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "Detect Secrets"
        description: "Detect secrets in code"
        args: ["--baseline", ".secrets.baseline"]
        exclude: ^(tests/.*|\.secrets\.baseline)$

# ================== CONFIGURATION ==================
default_language_version:
  python: python3.11

default_stages: [commit, push]

# ================== CI INTEGRATION ==================
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [todo-checker, no-wildcard-imports]  # Skip local hooks in CI
  submodules: false

# ================== PERFORMANCE OPTIMIZATION ==================
repos:
  - repo: meta
    hooks:
      - id: check-hooks-apply
      - id: check-useless-excludes

# ================== CUSTOM ERROR MESSAGES ==================
fail_fast: false
minimum_pre_commit_version: "3.0.0" 