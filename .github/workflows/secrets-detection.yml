name: Secrets Detection

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch entire history for better detection

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload TruffleHog results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${TOKEN}

      - name: Upload Gitleaks results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-results
          path: gitleaks-report.json

  detect-secrets:
    name: Detect Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install detect-secrets
        run: |
          pip install detect-secrets
          
      - name: Run detect-secrets
        run: |
          detect-secrets scan --all-files --force-use-all-plugins > .secrets.baseline
          
      - name: Check for secrets
        run: |
          if [ -s .secrets.baseline ]; then
            echo "::error::Potential secrets detected!"
            cat .secrets.baseline
            exit 1
          fi

  custom-patterns:
    name: Custom Pattern Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for hardcoded secrets patterns
        run: |
          # API Keys patterns
          echo "Checking for API keys..."
          if grep -rE "(api[_-]?key|apikey)\s*[:=]\s*['\"][^'\"]{20,}['\"]" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --include="*.env*" .; then
            echo "::error::Hardcoded API keys detected!"
            exit 1
          fi
          
          # AWS patterns
          echo "Checking for AWS credentials..."
          if grep -rE "AKIA[0-9A-Z]{16}" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" .; then
            echo "::error::AWS access keys detected!"
            exit 1
          fi
          
          # Private keys
          echo "Checking for private keys..."
          if grep -rE "-----BEGIN (RSA |EC |DSA |OPENSSH )?PRIVATE KEY-----" .; then
            echo "::error::Private keys detected!"
            exit 1
          fi
          
          # Generic secrets
          echo "Checking for generic secrets..."
          if grep -rE "(password|secret|token)\s*[:=]\s*['\"][^'\"]{8,}['\"]" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude="*test*" --exclude="*spec*" .; then
            echo "::warning::Potential secrets detected - please review!"
          fi
          
          # Connection strings
          echo "Checking for connection strings..."
          if grep -rE "(mongodb|postgres|mysql|redis|amqp):\/\/[^:]+:[^@]+@" --include="*.py" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" .; then
            echo "::error::Database connection strings with credentials detected!"
            exit 1
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install bandit safety semgrep
          
      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Run Safety check
        run: |
          safety check --json > safety-report.json || true
          
      - name: Run Semgrep
        env:
          SEMGREP_APP_TOKEN: ${TOKEN}
        run: |
          semgrep --config=auto --json -o semgrep-report.json || true
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔒 Security Scan Results\n\n';
            let hasIssues = false;
            
            // Check bandit results
            try {
              const banditResults = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              if (banditResults.results.length > 0) {
                hasIssues = true;
                comment += '### ⚠️ Bandit Issues Found\n';
                banditResults.results.forEach(issue => {
                  comment += `- **${issue.issue_severity}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
                comment += '\n';
              }
            } catch (e) {
              console.log('No Bandit results');
            }
            
            // Check safety results
            try {
              const safetyResults = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyResults.vulnerabilities.length > 0) {
                hasIssues = true;
                comment += '### ⚠️ Vulnerable Dependencies Found\n';
                safetyResults.vulnerabilities.forEach(vuln => {
                  comment += `- **${vuln.package}**: ${vuln.vulnerability}\n`;
                });
                comment += '\n';
              }
            } catch (e) {
              console.log('No Safety results');
            }
            
            if (!hasIssues) {
              comment += '✅ All security checks passed!';
            }
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  block-merge:
    name: Block Merge on Security Issues
    runs-on: ubuntu-latest
    needs: [trufflehog, gitleaks, detect-secrets, custom-patterns]
    if: always()
    steps:
      - name: Check security scan results
        run: |
          if [ "${{ needs.trufflehog.result }}" == "failure" ] || \
             [ "${{ needs.gitleaks.result }}" == "failure" ] || \
             [ "${{ needs.detect-secrets.result }}" == "failure" ] || \
             [ "${{ needs.custom-patterns.result }}" == "failure" ]; then
            echo "::error::Security issues detected - merge blocked!"
            exit 1
          fi
          echo "✅ All security checks passed" 