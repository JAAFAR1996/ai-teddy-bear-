name: AI Teddy Bear Comprehensive CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.4.0'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
      
    - name: Run Black formatter check
      run: poetry run black --check src tests
      
    - name: Run isort import checker
      run: poetry run isort --check-only src tests
      
    - name: Run Flake8 linter
      run: poetry run flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run mypy type checker
      run: poetry run mypy src --strict
      
    - name: Run Bandit security linter
      run: poetry run bandit -r src -ll -f json -o bandit-report.json
      
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
      
    - name: Check for print statements
      run: |
        if grep -r "print(" src --include="*.py" | grep -v "# noqa"; then
          echo "❌ Found print statements in production code!"
          exit 1
        fi
        
    - name: Check for bare excepts
      run: |
        if grep -r "except:" src --include="*.py" | grep -v "# noqa"; then
          echo "❌ Found bare except statements!"
          exit 1
        fi
        
    - name: Validate God Classes (< 300 lines)
      run: |
        for file in $(find src -name "*.py"); do
          lines=$(wc -l < "$file")
          if [ $lines -gt 300 ]; then
            echo "❌ $file has $lines lines (max: 300)"
            exit 1
          fi
        done
        
    - name: Check cyclomatic complexity
      run: |
        poetry run radon cc src -a -nb
        poetry run radon mi src -nb

  # Job 2: Security Testing
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${TOKEN}
      with:
        args: --severity-threshold=high
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AI-Teddy-Bear'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
        
    - name: Child Safety Compliance Check
      run: |
        poetry run python scripts/check_coppa_compliance.py
        poetry run python scripts/check_gdpr_compliance.py
        poetry run python scripts/check_child_safety_patterns.py
        
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        
    - name: License compliance check
      run: |
        poetry run pip-licenses --format=csv --output-file=licenses.csv
        poetry run python scripts/check_license_compliance.py

  # Job 3: Comprehensive Testing
  test:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-suite: [unit, integration, security, performance]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: ${PASSWORD}
          POSTGRES_DB: teddy_bear_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3,sqs,dynamodb
          EDGE_PORT: 4566
        ports:
          - 4566:4566
          
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry and dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry install --no-interaction --with dev,test
        
    - name: Set up test environment
      run: |
        cp .env.test.example .env.test
        poetry run python scripts/setup_test_db.py
        
    - name: Run ${{ matrix.test-suite }} tests
      run: |
        if [ "${{ matrix.test-suite }}" = "unit" ]; then
          poetry run pytest tests/unit \
            --cov=src \
            --cov-report=xml:coverage-${{ matrix.test-suite }}.xml \
            --cov-report=html:htmlcov-${{ matrix.test-suite }} \
            --cov-fail-under=85 \
            --junit-xml=test-results-${{ matrix.test-suite }}.xml \
            -v
        elif [ "${{ matrix.test-suite }}" = "integration" ]; then
          poetry run pytest tests/integration \
            --cov=src \
            --cov-report=xml:coverage-${{ matrix.test-suite }}.xml \
            --maxfail=3 \
            --junit-xml=test-results-${{ matrix.test-suite }}.xml \
            -v
        elif [ "${{ matrix.test-suite }}" = "security" ]; then
          poetry run pytest tests/security \
            --cov=src.domain.exceptions \
            --cov=src.application.services.safety_service \
            --cov-report=xml:coverage-${{ matrix.test-suite }}.xml \
            --junit-xml=test-results-${{ matrix.test-suite }}.xml \
            -v
        elif [ "${{ matrix.test-suite }}" = "performance" ]; then
          poetry run pytest tests/performance \
            --benchmark-only \
            --benchmark-autosave \
            --benchmark-compare \
            --junit-xml=test-results-${{ matrix.test-suite }}.xml \
            -v
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test-results-${{ matrix.test-suite }}.xml
          coverage-${{ matrix.test-suite }}.xml
          htmlcov-${{ matrix.test-suite }}/
          .benchmarks/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-${{ matrix.test-suite }}.xml
        flags: ${{ matrix.test-suite }}
        name: codecov-${{ matrix.test-suite }}

  # Job 4: Merge test results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts
        
    - name: Merge coverage reports
      run: |
        pip install coverage
        coverage combine test-artifacts/*/coverage-*.xml
        coverage report
        coverage html
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'test-artifacts/*/test-results-*.xml'
        reporter: java-junit
        
    - name: Check overall coverage
      run: |
        total_coverage=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        echo "Total coverage: $total_coverage%"
        if (( $(echo "$total_coverage < 85" | bc -l) )); then
          echo "❌ Overall coverage is below 85%"
          exit 1
        fi

  # Job 5: Build and Package
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security, test-summary]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${PASSWORD}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}-api
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_VERSION=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
          
    - name: Build and push Worker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.worker
        push: true
        tags: ${{ steps.meta.outputs.tags }}-worker
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}:${{ github.sha }}-api
        format: 'sarif'
        output: 'container-scan-results.sarif'
        
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'container-scan-results.sarif'

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ai-teddy-bear.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name teddy-bear-staging --region us-east-1
        
    - name: Deploy with Helm
      run: |
        helm upgrade --install teddy-bear ./helm/charts/teddy-bear \
          --namespace staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --values ./helm/values/staging.yaml \
          --wait \
          --timeout 10m
          
    - name: Run smoke tests
      run: |
        poetry run pytest tests/smoke \
          --base-url=https://staging.ai-teddy-bear.com \
          --timeout=300 \
          -v
          
    - name: Run child safety verification
      run: |
        poetry run python scripts/verify_child_safety_staging.py \
          --url https://staging.ai-teddy-bear.com
          
    - name: Load test staging
      run: |
        poetry run locust \
          -f tests/load/locustfile.py \
          --headless \
          --users 100 \
          --spawn-rate 10 \
          --run-time 5m \
          --host https://staging.ai-teddy-bear.com

  # Job 7: Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.ai-teddy-bear.com
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        kubectl set image deployment/api-deployment-green \
          api=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}:${{ github.sha }}-api \
          -n production
          
        # Wait for green to be ready
        kubectl rollout status deployment/api-deployment-green -n production
        
        # Run health checks on green
        ./scripts/production_health_check.py --target green
        
        # Switch traffic to green
        kubectl patch service api-service -n production \
          -p '{"spec":{"selector":{"version":"green"}}}'
          
        # Monitor for 5 minutes
        sleep 300
        
        # If successful, update blue for next deployment
        kubectl set image deployment/api-deployment-blue \
          api=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}:${{ github.sha }}-api \
          -n production
          
    - name: Run production verification
      run: |
        poetry run python scripts/production_health_check.py \
          --url https://api.ai-teddy-bear.com \
          --comprehensive \
          --timeout 600
          
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Production deployment ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 8: Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Monitor error rates
      run: |
        poetry run python scripts/monitor_deployment.py \
          --duration 1800 \
          --error-threshold 0.01 \
          --latency-threshold 200
          
    - name: Create deployment report
      run: |
        poetry run python scripts/generate_deployment_report.py \
          --version ${{ github.sha }} \
          --output deployment-report.html
          
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.html 