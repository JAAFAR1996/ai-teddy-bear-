version: '3.8'

networks:
  teddy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  uploads:
  outputs:
  logs:
  prometheus_data:
  grafana_data:

x-common-env: &common-env
  ENVIRONMENT: production
  POSTGRES_DB: ${POSTGRES_DB:-teddy_bear_prod}
  POSTGRES_USER: ${POSTGRES_USER:-teddy_user}  
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  REDIS_URL: redis://redis:6379/0
  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  ENCRYPTION_KEY: ${ENCRYPTION_KEY}

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: teddy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teddy_bear_prod}
      POSTGRES_USER: ${POSTGRES_USER:-teddy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database_migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - teddy-network
    # SECURITY: Container hardening
    user: postgres
    read_only: true
    tmpfs:
      - /tmp
      - /run
      - /var/run/postgresql
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-teddy_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: teddy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - teddy-network
    # SECURITY: Container hardening
    user: redis
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application (FastAPI Backend)
  teddy-app:
    build: 
      context: ..
      dockerfile: src/Dockerfile_from_core
      target: production
    container_name: teddy-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - uploads:/app/uploads
      - outputs:/app/outputs
      - logs:/app/logs
    environment:
      <<: *common-env
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-teddy_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-teddy_bear_prod}
      CORS_ORIGINS: ${FRONTEND_URL:-http://localhost:8000}
      LOG_LEVEL: INFO
      WORKERS: 4
    networks:
      - teddy-network
    # SECURITY: Container hardening  
    user: teddy
    read_only: true
    tmpfs:
      - /tmp
      - /app/cache
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: teddy-nginx
    restart: unless-stopped
    volumes:
      - ../monitoring/emergency/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../frontend/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - teddy-network
    # SECURITY: Container hardening
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    depends_on:
      - teddy-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: teddy-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - teddy-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: teddy-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../observability/grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.json:ro
    ports:
      - "3000:3000"
    networks:
      - teddy-network
