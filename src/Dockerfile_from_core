# AI Teddy Bear - Enterprise Production Dockerfile 2025
# Multi-stage build with security hardening and performance optimization

# Build stage - Python dependencies and compilation
FROM python:3.11-slim as builder

# Security: Create non-root user early
RUN groupadd -r teddy && useradd -r -g teddy teddy

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    pkg-config \
    portaudio19-dev \
    libffi-dev \
    libssl-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel for faster builds
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Copy requirements first for better layer caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir \
    --disable-pip-version-check \
    --no-compile \
    -r /tmp/requirements.txt

# Compile Python bytecode for faster startup
RUN python -m compileall /opt/venv/lib/python3.11/site-packages/

# Production stage - Minimal runtime image
FROM python:3.11-slim as production

# Metadata
LABEL maintainer="AI Teddy Team <support@aiteddy.com>"
LABEL version="2.0.0"
LABEL description="AI Teddy Bear Enterprise Application"
LABEL org.opencontainers.image.source="https://github.com/aiteddy/teddy-bear"

# Security: Create non-root user
RUN groupadd -r teddy && useradd -r -g teddy teddy

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    portaudio19-dev \
    libffi7 \
    libssl3 \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=teddy:teddy . /app/

# Security: Remove unnecessary files and set permissions
RUN find /app -name "*.pyc" -delete \
    && find /app -name "__pycache__" -type d -exec rm -rf {} + \
    && find /app -name "*.git*" -delete \
    && chmod -R 755 /app \
    && chmod +x /app/scripts/*.py 2>/dev/null || true

# Create required directories with proper permissions
RUN mkdir -p /app/logs /app/uploads /app/cache /app/data \
    && chown -R teddy:teddy /app/logs /app/uploads /app/cache /app/data

# Security hardening
RUN chmod 600 /app/config/*.json 2>/dev/null || true \
    && chmod 700 /app/scripts 2>/dev/null || true

# Environment variables for production
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONIOENCODING=UTF-8
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# FastAPI/Uvicorn configuration
ENV HOST=0.0.0.0
ENV PORT=8000
ENV WORKERS=1
ENV ENVIRONMENT=production
ENV LOG_LEVEL=INFO

# Security environment variables
ENV SECURE_SSL_REDIRECT=true
ENV SECURE_HSTS_SECONDS=31536000
ENV SECURE_CONTENT_TYPE_NOSNIFF=true
ENV SECURE_BROWSER_XSS_FILTER=true
ENV SECURE_REFERRER_POLICY=strict-origin-when-cross-origin

# Health check configuration
ENV HEALTH_CHECK_INTERVAL=30
ENV HEALTH_CHECK_TIMEOUT=10
ENV HEALTH_CHECK_RETRIES=3

# Performance tuning
ENV UVLOOP_ENABLED=true
ENV ORJSON_ENABLED=true

# Switch to non-root user
USER teddy

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command with graceful shutdown
CMD ["python", "-m", "uvicorn", "src.main:create_application", \
     "--factory", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "1", \
     "--loop", "uvloop", \
     "--http", "httptools", \
     "--no-access-log", \
     "--no-server-header"]

# Alternative entrypoint for development
# ENTRYPOINT ["python", "src/main.py"]

# Security scanning stage (optional, for CI/CD)
FROM production as security-scan
USER root
RUN pip install --no-cache-dir safety bandit
COPY --chown=root:root . /security-scan/
WORKDIR /security-scan
RUN safety check --json > /tmp/safety-report.json || true
RUN bandit -r src/ -f json -o /tmp/bandit-report.json || true
USER teddy

# Development stage with additional tools
FROM production as development

USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    tmux \
    htop \
    strace \
    tcpdump \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    pytest-mock \
    black \
    isort \
    flake8 \
    mypy \
    pre-commit \
    ipython \
    jupyter

# Copy development configuration
COPY docker/dev-config/ /app/config/dev/

USER teddy

# Override command for development
CMD ["python", "-m", "uvicorn", "src.main:create_application", \
     "--factory", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--reload-dir", "src"]

# Testing stage
FROM development as testing

USER root

# Install additional testing tools
RUN pip install --no-cache-dir \
    locust \
    playwright \
    coverage[toml] \
    pytest-xdist \
    pytest-benchmark

# Install Playwright browsers
RUN playwright install --with-deps chromium

USER teddy

# Run tests by default
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html"]

# Production build for different architectures
FROM production as production-amd64
# AMD64 specific optimizations

FROM production as production-arm64
# ARM64 specific optimizations

# Multi-architecture support
FROM production-${TARGETARCH} as final
