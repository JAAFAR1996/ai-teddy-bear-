"""
Parent_Dashboard_Service Facade - Backward Compatibility
واجهة للحفاظ على التوافق مع النسخة السابقة

This file maintains backward compatibility while the actual implementation
has been split into smaller, more manageable components.

Generated by God Class Splitter
"""

# Import all components
from .parent_componentsdashboard import *

# Legacy class facade

class AlertTypeFacade:
    """Legacy facade for AlertType"""
    
    def __init__(self):
        self.alerttype = AlertType()
    
    def __getattr__(self, name):
        return getattr(self.alerttype, name)

# Alias for backward compatibility
AlertType = AlertTypeFacade

class InMemoryCacheFacade:
    """Legacy facade for InMemoryCache"""
    
    def __init__(self):
        self.inmemorycache = InMemoryCache()
    
    def __getattr__(self, name):
        return getattr(self.inmemorycache, name)

# Alias for backward compatibility
InMemoryCache = InMemoryCacheFacade

class RedisCacheFacade:
    """Legacy facade for RedisCache"""
    
    def __init__(self):
        self.rediscache = RedisCache()
    
    def __getattr__(self, name):
        return getattr(self.rediscache, name)

# Alias for backward compatibility
RedisCache = RedisCacheFacade

class AccessScheduleTypeFacade:
    """Legacy facade for AccessScheduleType"""
    
    def __init__(self):
        self.accessscheduletype = AccessScheduleType()
    
    def __getattr__(self, name):
        return getattr(self.accessscheduletype, name)

# Alias for backward compatibility
AccessScheduleType = AccessScheduleTypeFacade

class ParentalControlFacade:
    """Legacy facade for ParentalControl"""
    
    def __init__(self):
        self.parentalcontrol = ParentalControl()
    
    def __getattr__(self, name):
        return getattr(self.parentalcontrol, name)

# Alias for backward compatibility
ParentalControl = ParentalControlFacade

class ConversationLogFacade:
    """Legacy facade for ConversationLog"""
    
    def __init__(self):
        self.conversationlog = ConversationLog()
    
    def __getattr__(self, name):
        return getattr(self.conversationlog, name)

# Alias for backward compatibility
ConversationLog = ConversationLogFacade

class AnalyticsDataFacade:
    """Legacy facade for AnalyticsData"""
    
    def __init__(self):
        self.analyticsdata = AnalyticsData()
    
    def __getattr__(self, name):
        return getattr(self.analyticsdata, name)

# Alias for backward compatibility
AnalyticsData = AnalyticsDataFacade

class ParentUserFacade:
    """Legacy facade for ParentUser"""
    
    def __init__(self):
        self.parentuser = ParentUser()
    
    def __getattr__(self, name):
        return getattr(self.parentuser, name)

# Alias for backward compatibility
ParentUser = ParentUserFacade

class ChildProfileFacade:
    """Legacy facade for ChildProfile"""
    
    def __init__(self):
        self.childprofile = ChildProfile()
    
    def __getattr__(self, name):
        return getattr(self.childprofile, name)

# Alias for backward compatibility
ChildProfile = ChildProfileFacade

class ConversationLogEntryFacade:
    """Legacy facade for ConversationLogEntry"""
    
    def __init__(self):
        self.conversationlogentry = ConversationLogEntry()
    
    def __getattr__(self, name):
        return getattr(self.conversationlogentry, name)

# Alias for backward compatibility
ConversationLogEntry = ConversationLogEntryFacade

class AccessScheduleFacade:
    """Legacy facade for AccessSchedule"""
    
    def __init__(self):
        self.accessschedule = AccessSchedule()
    
    def __getattr__(self, name):
        return getattr(self.accessschedule, name)

# Alias for backward compatibility
AccessSchedule = AccessScheduleFacade

class AlertFacade:
    """Legacy facade for Alert"""
    
    def __init__(self):
        self.alert = Alert()
    
    def __getattr__(self, name):
        return getattr(self.alert, name)

# Alias for backward compatibility
Alert = AlertFacade

class ParentDashboardCoreFacade:
    """Legacy facade for ParentDashboardCore"""
    
    def __init__(self):
        self.parentdashboardcore = ParentDashboardCore()
    
    def __getattr__(self, name):
        return getattr(self.parentdashboardcore, name)

# Alias for backward compatibility
ParentDashboardCore = ParentDashboardCoreFacade

class ParentDashboardUtilityFacade:
    """Legacy facade for ParentDashboardUtility"""
    
    def __init__(self):
        self.parentdashboardutility = ParentDashboardUtility()
    
    def __getattr__(self, name):
        return getattr(self.parentdashboardutility, name)

# Alias for backward compatibility
ParentDashboardUtility = ParentDashboardUtilityFacade

class ParentDashboardAPIFacade:
    """Legacy facade for ParentDashboardAPI"""
    
    def __init__(self):
        self.parentdashboardapi = ParentDashboardAPI()
    
    def __getattr__(self, name):
        return getattr(self.parentdashboardapi, name)

# Alias for backward compatibility
ParentDashboardAPI = ParentDashboardAPIFacade