# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
import logging
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Dict, Optional

import requests


class EmailService:
    """خدمة البريد الإلكتروني"""
    
    def __init__(self, smtp_server: str, smtp_port: int, username: str, password: str):
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.username = username
        self.password = password
    
    async def send_email(self, to: str, subject: str, body: str, is_html: bool = True) -> bool:
        """إرسال بريد إلكتروني"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.username
            msg['To'] = to
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html' if is_html else 'plain', 'utf-8'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.username, self.password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
    logger.error(f"Error: {e}")f"Email sending failed: {e}")
            return False

class SMSService:
    """خدمة الرسائل النصية"""
    
    def __init__(self, api_key: str, api_url: str):
        self.api_key = api_key
        self.api_url = api_url
    
    async def send_sms(self, to: str, message: str) -> bool:
        """إرسال رسالة نصية"""
        try:
            payload = {
                'to': to,
                'message': message,
                'api_key': self.api_key
            }
            
            response = requests.post(self.api_url, json=payload)
            return response.status_code == 200
        except Exception as e:
    logger.error(f"Error: {e}")f"SMS sending failed: {e}")
            return False

class PushNotificationService:
    """خدمة الإشعارات الفورية"""
    
    def __init__(self, firebase_key: Optional[str] = None):
        self.firebase_key = firebase_key
    
    async def send_notification(self, token: str, title: str, body: str, data: Dict = None) -> bool:
        """إرسال إشعار فوري"""
        try:
            if not self.firebase_key:
                return False
            
            payload = {
                'to': token,
                'notification': {
                    'title': title,
                    'body': body
                },
                'data': data or {}
            }
            
            headers = {
                'Authorization': f'key={self.firebase_key}',
                'Content-Type': 'application/json'
            }
            
            response = requests.post(
                'https://fcm.googleapis.com/fcm/send',
                json=payload,
                headers=headers
            )
            
            return response.status_code == 200
        except Exception as e:
    logger.error(f"Error: {e}")f"Push notification failed: {e}")
            return False

class ExternalAPIManager:
    """مدير الخدمات الخارجية"""
    
    def __init__(self, config: Dict):
        self.config = config
        
        # تهيئة الخدمات
        self.email_service = EmailService(
            smtp_server=config.get('SMTP_SERVER', ''),
            smtp_port=config.get('SMTP_PORT', 587),
            username=config.get('EMAIL_USERNAME', ''),
            password=config.get('EMAIL_PASSWORD', '')
        )
        
        self.sms_service = SMSService(
            api_key=config.get('SMS_API_KEY', ''),
            api_url=config.get('SMS_API_URL', '')
        )
        
        self.push_service = PushNotificationService(
            firebase_key=config.get('FIREBASE_KEY')
        )
    
    async def send_alert_via_all_channels(self, recipient_info: Dict, message: str, title: str = "تنبيه"):
        """إرسال تنبيه عبر جميع القنوات المتاحة"""
        tasks = []
        
        # بريد إلكتروني
        if recipient_info.get('email'):
            tasks.append(
                self.email_service.send_email(
                    to=recipient_info['email'],
                    subject=title,
                    body=message
                )
            )
        
        # رسالة نصية
        if recipient_info.get('phone'):
            tasks.append(
                self.sms_service.send_sms(
                    to=recipient_info['phone'],
                    message=f"{title}: {message[:100]}..."
                )
            )
        
        # إشعار فوري
        if recipient_info.get('device_token'):
            tasks.append(
                self.push_service.send_notification(
                    token=recipient_info['device_token'],
                    title=title,
                    body=message[:100]
                )
            )
        
        # تنفيذ جميع المهام
        import asyncio
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        return {
            'email_sent': len(tasks) > 0 and not isinstance(results[0], Exception),
            'sms_sent': len(tasks) > 1 and not isinstance(results[1], Exception),
            'push_sent': len(tasks) > 2 and not isinstance(results[2], Exception)
        }

class SecureExternalConfig:
    """Reads all external service credentials from environment variables only"""
    def __init__(self):
        self.logger = logging.getLogger("SecureExternalConfig")
        self.smtp_server = os.environ.get("SMTP_SERVER")
        self.smtp_port = int(os.environ.get("SMTP_PORT", 587))
        self.email_username = os.environ.get("EMAIL_USERNAME")
        self.email_password = os.environ.get("EMAIL_PASSWORD")
        self.sms_api_key = os.environ.get("SMS_API_KEY")
        self.sms_api_url = os.environ.get("SMS_API_URL")
        self.firebase_key = os.environ.get("FIREBASE_KEY")
        # Input validation
        if not self.smtp_server or not self.email_username or not self.email_password:
            self.logger.error("Missing SMTP credentials in environment")
        if not self.sms_api_key or not self.sms_api_url:
            self.logger.warning("Missing SMS API credentials in environment")
        if not self.firebase_key:
            self.logger.warning("Missing Firebase key in environment")