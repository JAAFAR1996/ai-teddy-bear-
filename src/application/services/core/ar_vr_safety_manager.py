#!/usr/bin/env python3
"""
๐ก๏ธ ูุฏูุฑ ุงูุฃูุงู ูุงูุฑุงุญุฉ ูู AR/VR
ูุณุคูู ุนู ุฌููุน ุฌูุงูุจ ุงูุฃูุงู ููุท
"""

from typing import Dict, List
from .ar_experience_manager import ARExperience
from .vr_environment_manager import VREnvironment


class ARVRSafetyManager:
    """ูุฏูุฑ ุงูุฃูุงู ูุงูุฑุงุญุฉ - ูุณุคูููุฉ ูุงุญุฏุฉ ููุท"""

    def check_ar_safety_requirements(self, experience: ARExperience) -> Dict:
        """ูุญุต ูุชุทูุจุงุช ุงูุฃูุงู ูููุงูุน ุงููุนุฒุฒ"""
        safety_check = {"safe": True, "issues": []}

        # ูุญุต ุงููุณุงุญุฉ ุงููุทููุจุฉ
        for requirement in experience.safety_requirements:
            if "ูุณุงุญุฉ" in requirement:
                safety_check["issues"].append(f"ุชุฃูุฏ ูู ุชููุฑ {requirement}")

        # ูุญุต ุงูุฃุฌุณุงู ุงููุทููุจุฉ
        if experience.required_objects:
            safety_check["issues"].append(
                f"ุชุฃูุฏ ูู ูุฌูุฏ: {', '.join(experience.required_objects)}"
            )

        return safety_check

    def validate_vr_age_appropriateness(self, child_age: int) -> Dict:
        """ุงูุชุญูู ูู ููุงุกูุฉ VR ููุนูุฑ"""
        if child_age < 6:
            return {
                "appropriate": False,
                "reason": "ุงููุงูุน ุงูุงูุชุฑุงุถู ุบูุฑ ููุงุณุจ ููุฃุทูุงู ุชุญุช 6 ุณููุงุช"
            }
        
        return {"appropriate": True, "reason": "ุงูุนูุฑ ููุงุณุจ"}

    def get_vr_safety_guidelines(self, child_age: int) -> List[str]:
        """ุฅุฑุดุงุฏุงุช ุงูุฃูุงู ูููุงูุน ุงูุงูุชุฑุงุถู"""
        guidelines = [
            "ุชุฃูุฏ ูู ูุฌูุฏ ุฅุดุฑุงู ุจุงูุบ ุฏุงุฆู",
            "ุฎุฐ ุฑุงุญุฉ ูู 5 ุฏูุงุฆู",
            "ุชููู ููุฑุงู ุฅุฐุง ุดุนุฑุช ุจุฏูุงุฑ ุฃู ุบุซูุงู",
            "ุชุฃูุฏ ูู ุฃู ุงููุณุงุญุฉ ุฎุงููุฉ ูู ุงูุนูุงุฆู",
            "ูุง ุชุณุชุฎุฏู VR ุฃูุซุฑ ูู 15 ุฏูููุฉ ูุชูุงุตูุฉ",
        ]

        if child_age < 8:
            guidelines.extend([
                "ุงุณุชุฎุฏู ุฃูู ุฅุนุฏุงุฏุงุช ุงูุญุฑูุฉ",
                "ุฑุงุญุฉ ูู 3 ุฏูุงุฆู",
                "ูุฏุฉ ูุตูู 10 ุฏูุงุฆู"
            ])

        return guidelines

    def get_vr_comfort_reminders(self) -> List[str]:
        """ุชุฐููุฑุงุช ุงูุฑุงุญุฉ ูููุงูุน ุงูุงูุชุฑุงุถู"""
        return [
            "ุงุฑูุด ุนูููู ุจุดูู ุทุจูุนู",
            "ุงุฌูุณ ุฅุฐุง ุดุนุฑุช ุจุงูุชุนุจ",
            "ุงุดุฑุจ ุงููุงุก ุจุงูุชุธุงู",
            "ุชุญุฑู ุจุจุทุก ูุชุฌูุจ ุงูุญุฑูุงุช ุงูููุงุฌุฆุฉ",
            "ุฃุฎุจุฑ ุงููุจุงุฑ ุฅุฐุง ุดุนุฑุช ุจุฃู ุฅุฒุนุงุฌ",
        ]

    def assess_safety_compliance(self, sessions: List[Dict]) -> Dict:
        """ุชูููู ุงูุงูุชุฒุงู ุจูุนุงููุฑ ุงูุฃูุงู"""
        safety_assessment = {
            "average_session_duration": 0,
            "comfort_issues_count": 0,
            "technical_issues_count": 0,
            "safety_score": "excellent",
        }

        if not sessions:
            return safety_assessment

        total_duration = sum(s.get("actual_duration_minutes", 0) for s in sessions)
        safety_assessment["average_session_duration"] = total_duration / len(sessions)

        comfort_issues = sum(
            1 for s in sessions
            if s.get("performance_summary", {}).get("comfort_level") == "low"
        )
        technical_issues = sum(
            s.get("performance_summary", {}).get("technical_issues", 0)
            for s in sessions
        )

        safety_assessment["comfort_issues_count"] = comfort_issues
        safety_assessment["technical_issues_count"] = technical_issues

        # ุชูููู ุงููุชูุฌุฉ
        if comfort_issues > len(sessions) * 0.3 or technical_issues > len(sessions) * 2:
            safety_assessment["safety_score"] = "needs_improvement"
        elif comfort_issues > 0 or technical_issues > 0:
            safety_assessment["safety_score"] = "good"

        return safety_assessment

    def validate_session_duration(self, session_type: str, duration: int, child_age: int) -> Dict:
        """ุงูุชุญูู ูู ูุฏุฉ ุงูุฌูุณุฉ ุงูููุงุณุจุฉ"""
        max_duration = 15  # ุงูุชุฑุงุถู

        if session_type == "vr":
            if child_age < 8:
                max_duration = 10
            elif child_age < 12:
                max_duration = 15
        elif session_type == "ar":
            max_duration = 20  # AR ุฃูุซุฑ ุฃูุงูุงู

        return {
            "valid": duration <= max_duration,
            "max_recommended": max_duration,
            "warning": f"ุงููุฏุฉ ุงูููุตู ุจูุง ูุง ุชุชุฌุงูุฒ {max_duration} ุฏูููุฉ" if duration > max_duration else None
        }

    def generate_safety_alerts(self, session: Dict) -> List[str]:
        """ุชูููุฏ ุชูุจููุงุช ุงูุฃูุงู"""
        alerts = []
        
        performance = session.get("performance_summary", {})
        
        if performance.get("comfort_level") == "low":
            alerts.append("ูุณุชูู ุฑุงุญุฉ ููุฎูุถ - ููู ูุฏุฉ ุงูุฌูุณุงุช ุงููุงุฏูุฉ")
        
        if performance.get("technical_issues", 0) > 2:
            alerts.append("ูุดุงูู ุชูููุฉ ูุชูุฑุฑุฉ - ุชุญูู ูู ุงูุจูุฆุฉ ูุงููุนุฏุงุช")
            
        if session.get("actual_duration_minutes", 0) > 20:
            alerts.append("ุฌูุณุฉ ุทูููุฉ - ุงุญุฑุต ุนูู ุงูุฑุงุญุฉ ุงูููุชุธูุฉ")
            
        return alerts 