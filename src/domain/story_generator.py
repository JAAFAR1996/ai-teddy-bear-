# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
import json
from datetime import datetime
from typing import Dict, List, Optional

import openai


class StoryTheme:
    """مواضيع القصص"""

    ADVENTURE = "مغامرة"
    FRIENDSHIP = "صداقة"
    LEARNING = "تعليمية"
    FANTASY = "خيالية"
    ANIMAL = "حيوانات"
    SPACE = "فضاء"
    HEROIC = "بطولية"


class PersonalizedStoryGenerator:
    """مولد القصص المخصصة بالذكاء الاصطناعي"""

    def __init__(self, openai_key: str):
        openai.api_key = openai_key
        self.story_history = []

    def generate_personalized_story(
        self,
        child_name: str,
        age: int,
        mood: str,
        interests: List[str],
        theme: str = StoryTheme.ADVENTURE,
        story_length: str = "medium",
    ) -> Dict:
        """توليد قصة مخصصة للطفل"""

        # تحديد طول القصة
        length_tokens = {"short": 500, "medium": 800, "long": 1200}

        # بناء الـ prompt
        prompt = f"""
        اكتب قصة {theme} للطفل {child_name} عمره {age} سنوات.
        
        معلومات عن الطفل:
        - المزاج الحالي: {mood}
        - الاهتمامات: {', '.join(interests)}
        
        متطلبات القصة:
        1. {child_name} هو البطل الرئيسي
        2. تناسب مزاجه الحالي ({mood})
        3. تتضمن عناصر من اهتماماته
        4. مناسبة لعمره ({age} سنوات)
        5. لها نهاية سعيدة ودرس مفيد
        
        ابدأ القصة مباشرة.
        """

        # توليد القصة
        messages = [{"role": "system", "content": "أنت راوي قصص محترف للأطفال"}, {"role": "user", "content": prompt}]

        response = openai.ChatCompletion.create(
            model="gpt-4-turbo-preview",
            messages=messages,
            temperature=0.9,
            max_tokens=length_tokens.get(story_length, 800),
        )

        story_text = response.choices[0].message.content

        # تحليل القصة لتحديد الشخصيات
        characters = self._extract_characters(story_text, child_name)

        # حفظ في السجل
        story_record = {
            "id": f"story_{datetime.now().timestamp()}",
            "timestamp": datetime.now().isoformat(),
            "child_name": child_name,
            "age": age,
            "mood": mood,
            "theme": theme,
            "story": story_text,
            "characters": characters,
            "interests_used": interests,
        }

        self.story_history.append(story_record)

        return {"story": story_text, "characters": characters, "id": story_record["id"]}

    def _extract_characters(self, story: str, child_name: str) -> Dict[str, List[str]]:
        """استخراج الشخصيات من القصة لتعدد الأصوات"""
        characters = {"narrator": [], "hero": [], "others": {}}  # الراوي  # البطل (الطفل)  # شخصيات أخرى

        # تقسيم القصة إلى فقرات
        paragraphs = story.split("\n\n")

        for paragraph in paragraphs:
            # البحث عن الحوارات (بين علامات التنصيص)
            if '"' in paragraph:
                # استخراج الحوار
                import re

                dialogues = re.findall(r'"([^"]*)"', paragraph)

                for dialogue in dialogues:
                    # تحديد المتحدث
                    if child_name in paragraph:
                        characters["hero"].append(dialogue)
                    else:
                        # محاولة تحديد الشخصية الأخرى
                        speaker = self._identify_speaker(paragraph, dialogue)
                        if speaker not in characters["others"]:
                            characters["others"][speaker] = []
                        characters["others"][speaker].append(dialogue)
            else:
                # نص الراوي
                characters["narrator"].append(paragraph)

        return characters

    def _identify_speaker(self, paragraph: str, dialogue: str) -> str:
        """تحديد المتحدث من السياق"""
        # قائمة بالكلمات الدالة على الشخصيات
        character_indicators = {
            "الأم": ["أمي", "الأم", "ماما"],
            "الأب": ["أبي", "الأب", "بابا"],
            "الجد": ["جدي", "الجد"],
            "الجدة": ["جدتي", "الجدة"],
            "الصديق": ["صديقي", "الصديق"],
            "المعلم": ["المعلم", "الأستاذ"],
            "الحيوان": ["القط", "الكلب", "العصفور", "الأرنب"],
        }

        for character, indicators in character_indicators.items():
            for indicator in indicators:
                if indicator in paragraph:
                    return character

        return "شخصية_أخرى"

    def get_story_by_mood(self, mood: str) -> str:
        """اقتراح نوع القصة حسب المزاج"""
        mood_themes = {
            "happy": StoryTheme.ADVENTURE,
            "sad": StoryTheme.FRIENDSHIP,
            "angry": StoryTheme.LEARNING,
            "scared": StoryTheme.HEROIC,
            "neutral": StoryTheme.FANTASY,
        }
        return mood_themes.get(mood, StoryTheme.ADVENTURE)

    def create_bedtime_story(self, child_name: str, age: int) -> Dict:
        """قصة خاصة لوقت النوم"""
        return self.generate_personalized_story(
            child_name=child_name,
            age=age,
            mood="calm",
            interests=["النوم", "الأحلام", "النجوم"],
            theme="bedtime",
            story_length="short",
        )
