# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
import random
from typing import Dict, List


class VoiceEnhancements:
    """تحسينات الاستجابة الصوتية للطفل"""

    def __init__(self):
        self.encouragement_phrases = [
            "أحسنت يا بطل!",
            "رائع جداً!",
            "أنت ذكي جداً!",
            "ممتاز يا صغيري!",
            "واو، هذا رائع!",
        ]

        self.guidance_phrases = [
            "دعني أساعدك في هذا",
            "لا بأس، سنتعلم معاً",
            "هيا نحاول مرة أخرى",
            "أنت تتحسن كل يوم",
        ]

    def add_encouragement(self, response_text: str, child_emotion: str) -> str:
        """إضافة رسائل تشجيعية للرد"""
        if child_emotion in ["happy", "excited"]:
            encouragement = random.choice(self.encouragement_phrases)
            return f"{encouragement} {response_text}"
        elif child_emotion in ["sad", "frustrated"]:
            guidance = random.choice(self.guidance_phrases)
            return f"{guidance}. {response_text}"

        return response_text

    def generate_ssml_with_emotions(self, text: str, emotion: str) -> str:
        """توليد SSML مع تأثيرات عاطفية"""
        emotion_settings = {
            "happy": {"rate": "1.1", "pitch": "+5%", "volume": "+2dB"},
            "calm": {"rate": "0.9", "pitch": "0%", "volume": "0dB"},
            "excited": {"rate": "1.2", "pitch": "+10%", "volume": "+3dB"},
            "sad": {"rate": "0.8", "pitch": "-5%", "volume": "-2dB"},
        }

        settings = emotion_settings.get(emotion, emotion_settings["calm"])

        ssml = f"""
        <speak>
            <prosody rate="{settings['rate']}" pitch="{settings['pitch']}" volume="{settings['volume']}">
                {text}
            </prosody>
        </speak>
        """

        return ssml

    def add_sound_effects(self, text: str, context: str) -> str:
        """إضافة مؤثرات صوتية للنص"""
        sound_effects = {
            "celebration": '<audio src="sounds/celebration.mp3"/>',
            "magic": '<audio src="sounds/magic.mp3"/>',
            "applause": '<audio src="sounds/applause.mp3"/>',
        }

        if "رائع" in text or "ممتاز" in text:
            return f"{sound_effects.get('applause', '')} {text}"
        elif "قصة" in text or "حكاية" in text:
            return f"{sound_effects.get('magic', '')} {text}"

        return text


class ChildExperienceOptimizer:
    """محسن تجربة الطفل"""

    def __init__(self):
        self.voice_enhancements = VoiceEnhancements()
        self.interaction_history = []

    def optimize_response(self, text: str, child_data: Dict) -> str:
        """تحسين الرد للطفل"""
        # إضافة اسم الطفل
        if child_data.get("name"):
            text = f"يا {child_data['name']}، {text}"

        # إضافة تشجيع
        text = self.voice_enhancements.add_encouragement(
            text, child_data.get("emotion", "neutral")
        )

        # إضافة مؤثرات
        text = self.voice_enhancements.add_sound_effects(text, "general")

        return text

    def generate_adaptive_content(
            self,
            child_age: int,
            interests: List[str]) -> str:
        """توليد محتوى متكيف مع عمر الطفل"""
        if child_age < 5:
            return "هيا نلعب لعبة بسيطة وممتعة!"
        elif child_age < 10:
            return "أريد أن أشاركك قصة مثيرة!"
        else:
            return "لدي تحدي ممتع لك اليوم!"

    def track_engagement(float) -> None:
        """تتبع مستوى التفاعل"""
        self.interaction_history.append(
            {"type": interaction_type, "quality": response_quality, "timestamp": "now"}
        )

        # الاحتفاظ بآخر 50 تفاعل فقط
        if len(self.interaction_history) > 50:
            self.interaction_history = self.interaction_history[-50:]
