# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
from datetime import datetime, timedelta
from typing import Dict, List

import pandas as pd
# [AI-Generated by Amazon Q]: إضافة مكتبات الرسوم البيانية
import plotly.express as px
import plotly.graph_objects as go
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles

app = FastAPI(title="لوحة تحكم الوالدين")

# تقديم الملفات الثابتة
app.mount("/static", StaticFiles(directory="static"), name="static")


class SimpleDashboardService:
    """خدمة لوحة تحكم الوالدين البسيطة لـ API"""

    def __init__(self, db):
        self.db = db
        # [AI-Generated by Amazon Q]: دمج التحليلات
        from src.domain.analytics import ChildAnalytics

        self.analytics = ChildAnalytics(db)

    def get_interaction_summary(self, child_id: str) -> Dict:
        """ملخص شامل للتفاعلات"""
        # [AI-Generated by Amazon Q]: استخدام التحليلات
        summary = {
            "total_conversations": 25,
            "average_daily_interactions": 3.5,
            "dominant_emotion": self.analytics.get_dominant_emotion(child_id),
            "emotion_stability": self.analytics.calculate_emotion_stability(child_id),
            "favorite_activities": ["الألعاب", "القصص"],
            "speech_analysis": {
                "concerns": self.analytics.get_speech_concerns(child_id)
            },
            "learning_progress": self.analytics.get_learning_progress(child_id),
            "social_skills": self.analytics.evaluate_social_skills(child_id),
            "recommendations": self.generate_recommendations(child_id),
        }

        return summary

    def generate_recommendations(self, child_id: str) -> List[str]:
        """توليد توصيات للأهل"""
        recommendations = []

        # [AI-Generated by Amazon Q]: توصيات بناءً على التحليلات
        emotion_stability = self.analytics.calculate_emotion_stability(child_id)
        speech_concerns = self.analytics.get_speech_concerns(child_id)

        # توصيات بناءً على الاستقرار العاطفي
        if emotion_stability < 0.5:
            recommendations.append(
                "لاحظنا تقلبات في مزاج الطفل. يُنصح بقضاء وقت إضافي معه والتحدث عن مشاعره."
            )

        # توصيات النطق
        if speech_concerns:
            recommendations.append(
                f"تم رصد بعض التحديات في النطق: {', '.join(speech_concerns)}. "
                "قد يكون من المفيد استشارة أخصائي نطق."
            )
        else:
            recommendations.append("الطفل يظهر تفاعلاً إيجابياً مع الدمية")

        return recommendations

    # [AI-Generated by Amazon Q]: إضافة دوال الرسوم البيانية
    def generate_emotion_chart(self, child_id: str, days: int = 7) -> str:
        """إنشاء رسم بياني للمشاعر"""
        # بيانات وهمية
        emotion_data = [
            {"date": "2024-01-01", "emotion": "happy", "count": 5},
            {"date": "2024-01-02", "emotion": "happy", "count": 3},
            {"date": "2024-01-02", "emotion": "calm", "count": 2},
            {"date": "2024-01-03", "emotion": "excited", "count": 4},
        ]

        df = pd.DataFrame(emotion_data)

        fig = px.bar(
            df,
            x="date",
            y="count",
            color="emotion",
            title=f"تطور مشاعر الطفل خلال {days} أيام",
            labels={"date": "التاريخ", "count": "عدد المرات", "emotion": "المشاعر"},
            color_discrete_map={
                "happy": "#4CAF50",
                "calm": "#2196F3",
                "excited": "#FF9800",
            },
        )

        fig.update_layout(height=400, font=dict(family="Arial", size=12))
        return fig.to_html(include_plotlyjs="cdn")

    def generate_progress_chart(self, child_id: str) -> str:
        """رسم بياني للتقدم التعليمي"""
        progress_data = self.analytics.get_learning_progress(child_id)

        if progress_data["status"] == "no_data":
            return "<p>لا توجد بيانات كافية</p>"

        # بيانات وهمية
        games = ["الأسئلة", "الألغاز", "الرياضيات"]
        scores = [85, 78, 92]

        fig = go.Figure(
            data=[
                go.Bar(
                    x=games, y=scores, marker_color=["#4CAF50", "#2196F3", "#FF9800"]
                )
            ]
        )

        fig.update_layout(
            title="تقدم الطفل في الألعاب",
            xaxis_title="نوع اللعبة",
            yaxis_title="الدرجة",
            height=400,
        )

        return fig.to_html(include_plotlyjs="cdn")

    def generate_weekly_report(self, child_id: str) -> str:
        """تقرير أسبوعي شامل"""
        summary = self.get_interaction_summary(child_id)

        # [AI-Generated by Amazon Q]: إضافة الرسوم البيانية
        emotion_chart = self.generate_emotion_chart(child_id, days=7)
        progress_chart = self.generate_progress_chart(child_id)

        html_template = f"""
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
            <meta charset="UTF-8">
            <title>التقرير الأسبوعي - {child_id}</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Arial, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f5f5f5;
                }}
                .container {{
                    max-width: 1200px;
                    margin: auto;
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 40px;
                    border-bottom: 3px solid #4CAF50;
                    padding-bottom: 20px;
                }}
                .summary-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin-bottom: 40px;
                }}
                .stat-card {{
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 8px;
                    text-align: center;
                    border-left: 4px solid #4CAF50;
                }}
                .stat-value {{
                    font-size: 2em;
                    font-weight: bold;
                    color: #333;
                    margin: 10px 0;
                }}
                .recommendations {{
                    background: #e3f2fd;
                    padding: 20px;
                    border-radius: 8px;
                    margin-top: 40px;
                }}
                .recommendation-item {{
                    margin: 10px 0;
                    padding-right: 20px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>التقرير الأسبوعي</h1>
                    <p>الفترة: {(datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')} إلى {datetime.now().strftime('%Y-%m-%d')}</p>
                </div>
                
                <div class="summary-grid">
                    <div class="stat-card">
                        <div class="stat-label">إجمالي المحادثات</div>
                        <div class="stat-value">{summary['total_conversations']}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">متوسط التفاعل اليومي</div>
                        <div class="stat-value">{summary['average_daily_interactions']:.1f}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">المزاج السائد</div>
                        <div class="stat-value">{summary['dominant_emotion']}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">استقرار المشاعر</div>
                        <div class="stat-value">{summary['emotion_stability']:.0%}</div>
                    </div>
                </div>
                
                <div class="chart-section">
                    <h2>تطور المشاعر</h2>
                    {emotion_chart}
                </div>
                
                <div class="chart-section">
                    <h2>التقدم التعليمي</h2>
                    {progress_chart}
                </div>
                
                <div class="recommendations">
                    <h2>التوصيات</h2>
                    {''.join([f'<div class="recommendation-item">💡 {rec}</div>' for rec in summary['recommendations']])}
                </div>
            </div>
        </body>
        </html>
        """

        return html_template


# نقاط النهاية API
dashboard_service = None


@app.on_event("startup")
async def startup_event():
    """تهيئة الخدمات عند بدء التطبيق"""
    global dashboard_service
    dashboard_service = SimpleDashboardService(None)


@app.get("/")
async def home():
    """الصفحة الرئيسية"""
    return HTMLResponse(
        """
    <html dir="rtl">
    <head>
        <title>لوحة تحكم الوالدين - AI Teddy Bear</title>
        <style>
            body { 
                font-family: Arial, sans-serif; 
                max-width: 800px; 
                margin: 50px auto;
                padding: 20px;
            }
            .child-list {
                list-style: none;
                padding: 0;
            }
            .child-item {
                background: #f0f0f0;
                margin: 10px 0;
                padding: 15px;
                border-radius: 8px;
            }
            .child-item a {
                text-decoration: none;
                color: #333;
                font-size: 1.2em;
            }
        </style>
    </head>
    <body>
        <h1>مرحباً في لوحة تحكم الوالدين</h1>
        <div id="children-list">
            <ul class="child-list">
                <li class="child-item"><a href="/dashboard/child1">أحمد</a></li>
                <li class="child-item"><a href="/dashboard/child2">فاطمة</a></li>
            </ul>
        </div>
    </body>
    </html>
    """
    )


@app.get("/api/children")
async def get_children():
    """جلب قائمة الأطفال"""
    children = [{"id": "child1", "name": "أحمد"}, {"id": "child2", "name": "فاطمة"}]
    return JSONResponse(content=children)


@app.get("/dashboard/{child_id}")
async def get_dashboard(child_id: str):
    """عرض لوحة التحكم لطفل محدد"""
    try:
        report = dashboard_service.generate_weekly_report(child_id)
        return HTMLResponse(content=report)
    except Exception as e:
        raise HTTPException(status_code=404, detail=f"Child not found: {str(e)}")


@app.get("/api/dashboard/{child_id}/summary")
async def get_summary(child_id: str):
    """API للحصول على ملخص البيانات"""
    try:
        summary = dashboard_service.get_interaction_summary(child_id)
        return JSONResponse(content=summary)
    except Exception as e:
        raise HTTPException(status_code=404, detail=str(e))
