version: '3.8'

# شبكات آمنة للمراقبة الطارئة
networks:
  emergency-monitoring:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
  security-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

# أحجام البيانات المستمرة
volumes:
  prometheus-emergency-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/teddy/monitoring/prometheus
  grafana-emergency-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/teddy/monitoring/grafana
  alertmanager-emergency-data:
    driver: local
  nginx-waf-logs:
    driver: local

services:
  # Prometheus للمراقبة الأمنية المكثفة
  prometheus-emergency:
    image: prom/prometheus:v2.48.0
    container_name: teddy-prometheus-emergency
    hostname: prometheus-emergency
    restart: unless-stopped
    user: "65534:65534"  # nobody user للأمان
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://prometheus.teddysecurity.ai'
      - '--web.route-prefix=/'
      - '--alertmanager.notification-queue-capacity=10000'
      - '--query.max-concurrency=50'
      - '--query.timeout=30s'
      - '--web.read-timeout=30s'
      - '--web.max-connections=1000'
    ports:
      - "9090:9090"
    volumes:
      - ./kubernetes/emergency-monitoring-configmap.yaml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - prometheus-emergency-data:/prometheus
    networks:
      - emergency-monitoring
      - security-internal
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_STORAGE_PATH=/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=prometheus-emergency"

  # Alertmanager للتنبيهات الطارئة
  alertmanager-emergency:
    image: prom/alertmanager:v0.26.0
    container_name: teddy-alertmanager-emergency
    hostname: alertmanager-emergency
    restart: unless-stopped
    user: "65534:65534"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.teddysecurity.ai'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--log.level=info'
      - '--log.format=json'
    ports:
      - "9093:9093"
      - "9094:9094"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager/templates:/etc/alertmanager/templates:ro
      - ./secrets:/var/run/secrets:ro
      - alertmanager-emergency-data:/alertmanager
    networks:
      - emergency-monitoring
    environment:
      - ALERTMANAGER_WEB_EXTERNAL_URL=https://alertmanager.teddysecurity.ai
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana للوحات المراقبة الأمنية
  grafana-emergency:
    image: grafana/grafana:10.2.0
    container_name: teddy-grafana-emergency
    hostname: grafana-emergency
    restart: unless-stopped
    user: "472:472"  # grafana user
    ports:
      - "3000:3000"
    volumes:
      - grafana-emergency-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./ssl/certs:/etc/ssl/certs:ro
    networks:
      - emergency-monitoring
    environment:
      # الأمان والمصادقة
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana-admin-password
      - GF_SECURITY_SECRET_KEY_FILE=/run/secrets/grafana-secret-key
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=nosniff
      - GF_SECURITY_X_XSS_PROTECTION=true
      
      # الخادم والشبكة
      - GF_SERVER_DOMAIN=grafana.teddysecurity.ai
      - GF_SERVER_ROOT_URL=https://grafana.teddysecurity.ai
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/ssl/certs/grafana.pem
      - GF_SERVER_CERT_KEY=/etc/ssl/private/grafana-key.pem
      
      # قاعدة البيانات
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres-grafana:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD_FILE=/run/secrets/postgres-grafana-password
      - GF_DATABASE_SSL_MODE=require
      
      # التنبيهات والإشعارات
      - GF_ALERTING_ENABLED=true
      - GF_ALERTING_EXECUTE_ALERTS=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      
      # تحسين الأداء
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_LOG_LEVEL=info
      - GF_LOG_MODE=console file
    secrets:
      - grafana-admin-password
      - grafana-secret-key
      - postgres-grafana-password
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    depends_on:
      - postgres-grafana
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # PostgreSQL لـ Grafana
  postgres-grafana:
    image: postgres:15.4-alpine
    container_name: teddy-postgres-grafana
    hostname: postgres-grafana
    restart: unless-stopped
    volumes:
      - postgres-grafana-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - security-internal
    environment:
      - POSTGRES_DB=grafana
      - POSTGRES_USER=grafana
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-grafana-password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    secrets:
      - postgres-grafana-password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grafana -d grafana"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Node Exporter للمراقبة على مستوى النظام
  node-exporter-security:
    image: prom/node-exporter:v1.6.1
    container_name: teddy-node-exporter-security
    hostname: node-exporter-security
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.interrupts'
      - '--collector.cpu.info'
      - '--collector.meminfo_numa'
      - '--web.listen-address=:9100'
      - '--web.telemetry-path=/metrics'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    networks:
      - emergency-monitoring
    pid: host
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SYS_TIME
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # cAdvisor لمراقبة الحاويات
  cadvisor-security:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: teddy-cadvisor-security
    hostname: cadvisor-security
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - emergency-monitoring
    command:
      - '--housekeeping_interval=10s'
      - '--max_housekeeping_interval=15s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace'
      - '--docker_only=true'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # Nginx WAF للحماية المتقدمة
  nginx-waf-security:
    image: owasp/modsecurity-nginx:v1.0.3-nginx-1.22.0
    container_name: teddy-nginx-waf-security
    hostname: nginx-waf-security
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "9113:9113"  # nginx-prometheus-exporter
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/modsecurity:/etc/nginx/modsecurity:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-waf-logs:/var/log/nginx
    networks:
      - emergency-monitoring
    environment:
      - NGINX_ALWAYS_TLS_REDIRECT=true
      - MODSECURITY_CONF_FILE=/etc/nginx/modsecurity/modsecurity.conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Nginx Prometheus Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: teddy-nginx-exporter
    hostname: nginx-exporter
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://nginx-waf-security:9113/nginx_status
      - -web.listen-address=:9113
    ports:
      - "9113:9113"
    networks:
      - emergency-monitoring
    depends_on:
      - nginx-waf-security
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Emergency Response API
  emergency-response-api:
    build:
      context: ./api
      dockerfile: Dockerfile.emergency
    container_name: teddy-emergency-response-api
    hostname: emergency-response
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./secrets:/var/run/secrets:ro
      - ./api/config:/app/config:ro
    networks:
      - emergency-monitoring
      - security-internal
    environment:
      - API_PORT=8080
      - API_HOST=0.0.0.0
      - LOG_LEVEL=info
      - ENVIRONMENT=production
      - DATABASE_URL_FILE=/var/run/secrets/database/url
      - JWT_SECRET_FILE=/var/run/secrets/jwt/secret
    secrets:
      - database-url
      - jwt-secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

# الأسرار الآمنة
secrets:
  grafana-admin-password:
    file: ./secrets/grafana-admin-password.txt
  grafana-secret-key:
    file: ./secrets/grafana-secret-key.txt
  postgres-grafana-password:
    file: ./secrets/postgres-grafana-password.txt
  database-url:
    file: ./secrets/database-url.txt
  jwt-secret:
    file: ./secrets/jwt-secret.txt

# إعدادات إضافية
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "3"
    labels: "service,environment"

x-security: &default-security
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  restart: unless-stopped 