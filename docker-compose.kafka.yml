# üöÄ AI Teddy Bear Event Streaming Infrastructure
# ==================================================
# 
# Apache Kafka cluster for enterprise event-driven architecture
# Supports millions of events per second with high availability

version: '3.8'

services:
  # ========================
  # üêò Zookeeper Cluster
  # ========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: teddy-zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log
    networks:
      - teddy-event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # üì° Kafka Broker
  # ========================
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: teddy-kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      # Basic Configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      
      # Network Configuration
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Replication & Durability
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      
      # Topic Management
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      
      # Performance Tuning
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1GB
      KAFKA_LOG_SEGMENT_BYTES: 104857600  # 100MB
      KAFKA_LOG_CLEANUP_POLICY: delete
      
      # Producer/Consumer Settings
      KAFKA_COMPRESSION_TYPE: snappy
      KAFKA_MESSAGE_MAX_BYTES: 1000000  # 1MB
      
      # JVM Performance
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35"
      
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/kafka/logs
    networks:
      - teddy-event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================
  # üìã Schema Registry
  # ============================
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: teddy-schema-registry
    hostname: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_DEBUG: 'false'
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: backward
    volumes:
      - schema-registry-data:/var/lib/schema-registry
    networks:
      - teddy-event-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================
  # üìä Kafka Connect
  # ============================
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: teddy-kafka-connect
    hostname: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: teddy-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: teddy-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: teddy-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: teddy-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    volumes:
      - kafka-connect-data:/var/lib/kafka-connect
    networks:
      - teddy-event-network
    restart: unless-stopped

  # ============================
  # üéõÔ∏è Kafka Control Center
  # ============================
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    container_name: teddy-control-center
    hostname: control-center
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_CONNECT_TEDDY_CLUSTER: http://kafka-connect:8083
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    volumes:
      - control-center-data:/var/lib/confluent-control-center
    networks:
      - teddy-event-network
    restart: unless-stopped

  # ============================
  # üìà Kafka Exporter (Prometheus)
  # ============================
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: teddy-kafka-exporter
    hostname: kafka-exporter
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:9092'
      - '--web.listen-address=:9308'
      - '--log.level=info'
    networks:
      - teddy-event-network
    restart: unless-stopped

  # ============================
  # üîß Topic Initializer
  # ============================
  kafka-topics-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: teddy-topics-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
        echo "üöÄ Creating Kafka topics for AI Teddy Bear..."
        
        # Child Events Topics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic child.registered --config retention.ms=2592000000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic child.profile-updated --config retention.ms=2592000000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic child.safety-violation --config retention.ms=7776000000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic child.milestone-achieved --config retention.ms=31536000000
        
        # Conversation Events Topics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic conversation.started --config retention.ms=604800000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic conversation.ended --config retention.ms=604800000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic conversation.escalated --config retention.ms=7776000000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic message.received --config retention.ms=604800000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 6 --replication-factor 1 --topic response.generated --config retention.ms=604800000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic emotion.detected --config retention.ms=2592000000
        
        # Analytics Topics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic analytics.usage-stats --config retention.ms=7776000000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic analytics.engagement-metrics --config retention.ms=7776000000
        
        # System Topics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic system.health-check --config retention.ms=86400000
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic system.audit-log --config retention.ms=31536000000
        
        # Dead Letter Topics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic dlq.failed-events --config retention.ms=2592000000
        
        echo "‚úÖ All Kafka topics created successfully!"
        
        echo "üìã Topic List:"
        kafka-topics --list --bootstrap-server kafka:9092
      '
    networks:
      - teddy-event-network
    restart: "no"

# ========================
# üíæ Persistent Volumes
# ========================
volumes:
  zk-data:
    driver: local
    name: teddy-zk-data
  zk-txn-logs:
    driver: local
    name: teddy-zk-logs
  kafka-data:
    driver: local
    name: teddy-kafka-data
  kafka-logs:
    driver: local
    name: teddy-kafka-logs
  schema-registry-data:
    driver: local
    name: teddy-schema-registry
  kafka-connect-data:
    driver: local
    name: teddy-kafka-connect
  control-center-data:
    driver: local
    name: teddy-control-center

# ========================
# üåê Networks
# ========================
networks:
  teddy-event-network:
    driver: bridge
    name: teddy-event-network
    ipam:
      config:
        - subnet: 172.20.0.0/16 