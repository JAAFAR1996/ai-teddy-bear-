# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
import openai
from enum import Enum
from typing import Dict, Optional, List
import json
import random
from datetime import datetime

class GameType(Enum):
    TRIVIA = "trivia"
    STORY_ADVENTURE = "مغامرة_قصصية"
    SOUND_IMITATION = "تقليد_الأصوات"
    RIDDLES = "ألغاز"
    MATH_QUIZ = "تحدي_الرياضيات"
    WORD_GAME = "لعبة_الكلمات"

class GameState:
    """حالة اللعبة الحالية"""
    def __init__(self):
        self.game_type: Optional[GameType] = None
        self.player_name: str = ""
        self.age: int = 0
        self.score: int = 0
        self.turn: int = 0
        self.difficulty: str = "easy"
        self.history: List[Dict] = []
        self.current_question: Optional[str] = None
        self.correct_answer: Optional[str] = None

class VoiceGameEngine:
    """محرك الألعاب الصوتية التفاعلية"""
    
    def __init__(self, openai_key: str):
        openai.api_key = openai_key
        self.game_state = GameState()
        self.game_prompts = self._load_game_prompts()
        
    def _load_game_prompts(self) -> Dict:
        """تحميل قوالب الألعاب"""
        return {
            GameType.TRIVIA: """أنت مقدم لعبة أسئلة ممتعة للأطفال. 
            اطرح أسئلة مناسبة لعمر {age} سنوات عن {topic}.
            كن مرحاً وشجع الطفل {name} على المحاولة.""",
            
            GameType.STORY_ADVENTURE: """أنت راوي مغامرة تفاعلية للطفل {name}.
            اخلق قصة مثيرة مع خيارات يختار منها الطفل.
            كل خيار يؤدي لمسار مختلف في القصة.""",
            
            GameType.SOUND_IMITATION: """العب لعبة تقليد الأصوات مع {name}.
            اطلب تقليد أصوات حيوانات أو أشياء مختلفة.
            كن مشجعاً وامدح المحاولات.""",
            
            GameType.RIDDLES: """اطرح ألغازاً ممتعة ومناسبة لطفل عمره {age} سنوات.
            ابدأ بألغاز سهلة وزد الصعوبة تدريجياً.
            أعط تلميحات إذا احتاج {name} للمساعدة."""
        }
    
    def start_game(self, game_type: GameType, child_name: str, age: int, 
                   topic: str = "عام") -> str:
        """بدء لعبة جديدة"""
        self.game_state = GameState()
        self.game_state.game_type = game_type
        self.game_state.player_name = child_name
        self.game_state.age = age
        
        # تحديد مستوى الصعوبة حسب العمر
        if age < 5:
            self.game_state.difficulty = "very_easy"
        elif age < 8:
            self.game_state.difficulty = "easy"
        elif age < 12:
            self.game_state.difficulty = "medium"
        else:
            self.game_state.difficulty = "hard"
        
        # إنشاء prompt للعبة
        game_prompt = self.game_prompts.get(game_type, "").format(
            name=child_name,
            age=age,
            topic=topic
        )
        
        # بدء اللعبة
        messages = [
            {"role": "system", "content": game_prompt},
            {"role": "user", "content": f"ابدأ لعبة {game_type.value} جديدة"}
        ]
        
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo-preview",
            messages=messages,
            temperature=0.8,
            max_tokens=500
        )
        
        game_intro = response.choices[0].message.content
        
        # حفظ في السجل
        self.game_state.history.append({
            'turn': 0,
            'type': 'intro',
            'content': game_intro
        })
        
        return game_intro
    
    def process_game_response(self, child_response: str) -> Dict:
        """معالجة رد الطفل في اللعبة"""
        self.game_state.turn += 1
        
        # تحليل الرد حسب نوع اللعبة
        if self.game_state.game_type == GameType.TRIVIA:
            return self._process_trivia_response(child_response)
        elif self.game_state.game_type == GameType.STORY_ADVENTURE:
            return self._process_story_response(child_response)
        elif self.game_state.game_type == GameType.SOUND_IMITATION:
            return self._process_sound_response(child_response)
        elif self.game_state.game_type == GameType.RIDDLES:
            return self._process_riddle_response(child_response)
        else:
            return self._process_generic_response(child_response)
    
    def _process_trivia_response(self, response: str) -> Dict:
        """معالجة رد في لعبة الأسئلة"""
        # التحقق من الإجابة
        is_correct = self._check_answer(response)
        
        if is_correct:
            self.game_state.score += 10
            feedback = random.choice([
                "رائع! إجابة صحيحة! 🎉",
                "ممتاز يا بطل! ✨",
                "أحسنت! هذا صحيح تماماً! 🌟"
            ])
        else:
            feedback = random.choice([
                "محاولة جيدة! الإجابة الصحيحة هي...",
                "قريب جداً! دعني أخبرك الإجابة...",
                "لا بأس، سنتعلم معاً!"
            ])
        
        # سؤال جديد
        next_question = self._generate_next_question()
        
        return {
            'feedback': feedback,
            'score': self.game_state.score,
            'next_question': next_question,
            'turn': self.game_state.turn
        }
    
    def _check_answer(self, response: str) -> bool:
        """فحص صحة الإجابة"""
        # منطق بسيط للفحص - يمكن تحسينه
        return len(response.strip()) > 0
    
    def _generate_next_question(self) -> str:
        """توليد السؤال التالي"""
        return "ما هو لونك المفضل؟"
    
    def _process_story_response(self, response: str) -> Dict:
        """معالجة رد في المغامرة القصصية"""
        return {'story_continuation': 'تستمر المغامرة...'}
    
    def _process_sound_response(self, response: str) -> Dict:
        """معالجة رد في لعبة الأصوات"""
        return {'sound_feedback': 'صوت رائع!'}
    
    def _process_riddle_response(self, response: str) -> Dict:
        """معالجة رد في الألغاز"""
        return {'riddle_feedback': 'إجابة ذكية!'}
    
    def _process_generic_response(self, response: str) -> Dict:
        """معالجة رد عام"""
        return {'generic_response': 'شكراً لك!'}
    
    def get_game_summary(self) -> Dict:
        """ملخص اللعبة"""
        return {
            'game_type': self.game_state.game_type.value if self.game_state.game_type else None,
            'player': self.game_state.player_name,
            'final_score': self.game_state.score,
            'total_turns': self.game_state.turn,
            'history': self.game_state.history
        }
    
    def end_game(self) -> str:
        """إنهاء اللعبة"""
        summary = self.get_game_summary()
        
        # رسالة ختامية
        ending_message = f"""
        انتهت اللعبة! 🎮
        
        أحسنت يا {self.game_state.player_name}!
        حصلت على {self.game_state.score} نقطة
        
        هل تريد لعب لعبة أخرى؟
        """
        
        # إعادة تعيين حالة اللعبة
        self.game_state = GameState()
        
        return ending_message

# Requires: pip install openai