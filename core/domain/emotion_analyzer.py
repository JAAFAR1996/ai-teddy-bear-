# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
"""
محلل المشاعر الصوتية - يستخدم Hume AI لتحليل مشاعر الطفل من الصوت
يحفظ تاريخ المشاعر ويولد تقارير للأهل
يدعم المشاعر: سعيد، حزين، غاضب، خائف، متحمس، محايد
"""

import requests
import pandas as pd
from datetime import datetime
import json
from typing import Dict, List, Optional
from hume.client import AsyncHumeClient
from hume import StreamDataModels
import asyncio

class EmotionAnalyzer:
    """محلل المشاعر باستخدام Hume (streaming, async, audio only)"""
    
    def __init__(self, api_key: str):
        self.hume_api_key = api_key
        self.emotion_history: List[Dict] = []
        self.client = AsyncHumeClient(self.hume_api_key)
        
    async def analyze_audio_emotion(self, audio_file_path: str) -> Dict:
        """تحليل المشاعر من ملف صوتي باستخدام Hume (async)"""
        # إعداد نموذج البيانات الصوتية
        config = StreamDataModels.voice()
        # قراءة الملف الصوتي
        with open(audio_file_path, "rb") as f:
            audio_bytes = f.read()
        # إرسال الصوت وتحليل المشاعر
        async with self.client.connect([config]) as socket:
            await socket.send_bytes(audio_bytes)
            result = await socket.recv()
        # استخراج المشاعر
        emotion_data = result.get("voice", {})
        dominant_emotion = self._get_dominant_emotion(emotion_data)
        emotion_result = {
            'timestamp': datetime.now().isoformat(),
            'emotions': emotion_data,
            'dominant_emotion': dominant_emotion,
            'audio_file': audio_file_path
        }
        self.emotion_history.append(emotion_result)
        return emotion_result
    
    def _get_dominant_emotion(self, emotion_data: Dict) -> str:
        """استخراج المشاعر الغالبة من بيانات Hume"""
        try:
            predictions = emotion_data.get('predictions', [])
            if predictions:
                emotions = predictions[0].get('emotions', {})
                if emotions:
                    dominant = max(emotions.items(), key=lambda x: x[1])
                    return dominant[0]
        except Exception:
            pass
        return 'neutral'
        
    def get_emotion_report(self, days: int = 7) -> pd.DataFrame:
        """إنشاء تقرير المشاعر للأهل"""
        df = pd.DataFrame(self.emotion_history)
        if not df.empty:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            # فلترة حسب الأيام المطلوبة
            cutoff_date = datetime.now() - pd.Timedelta(days=days)
            df = df[df['timestamp'] >= cutoff_date]
        return df
    
    def save_history(self, filepath: str):
        """حفظ سجل المشاعر"""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.emotion_history, f, ensure_ascii=False, indent=2)

# Requires: pip install requests pandas
