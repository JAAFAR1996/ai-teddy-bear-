# Zero Trust Network Policies for AI Teddy Bear System
# Implements micro-segmentation and default deny-all approach

# Default deny-all network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: ai-teddy-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Network Policy for Frontend Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: ai-teddy-system
spec:
  podSelector:
    matchLabels:
      tier: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from Istio ingress gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
      podSelector:
        matchLabels:
          app: istio-proxy
    ports:
    - protocol: TCP
      port: 8080
  # Allow traffic from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow communication to backend services
  - to:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 8080
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Network Policy for Backend Services  
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: ai-teddy-system
spec:
  podSelector:
    matchLabels:
      tier: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from frontend
  - from:
    - podSelector:
        matchLabels:
          tier: frontend
    ports:
    - protocol: TCP
      port: 8080
  # Allow traffic from other backend services
  - from:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 8080
  # Allow traffic from AI services
  - from:
    - podSelector:
        matchLabels:
          tier: ai-service
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow communication to database
  - to:
    - podSelector:
        matchLabels:
          tier: database
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # Allow communication to AI services
  - to:
    - podSelector:
        matchLabels:
          tier: ai-service
    ports:
    - protocol: TCP
      port: 8080
  # Allow external API calls (OpenAI, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy for AI Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-service-network-policy
  namespace: ai-teddy-system
spec:
  podSelector:
    matchLabels:
      tier: ai-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from backend services
  - from:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 8080
  # Allow traffic from other AI services
  - from:
    - podSelector:
        matchLabels:
          tier: ai-service
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow communication to external AI APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow communication to backend for data
  - to:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 8080
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy for Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-network-policy
  namespace: ai-teddy-system
spec:
  podSelector:
    matchLabels:
      tier: database
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic only from backend services
  - from:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 27017 # MongoDB
  # Allow traffic from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5432
  egress:
  # Allow minimal egress for updates
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy for Monitoring Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from Istio system
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
  # Allow scraping from all namespaces
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3000  # Grafana
    - protocol: TCP
      port: 9093  # Alertmanager
  egress:
  # Allow communication to all services for monitoring
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 15000  # Envoy admin
  # Allow external notifications
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587  # SMTP

---
# Network Policy for ESP32 Device Communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: esp32-communication-policy
  namespace: ai-teddy-system
spec:
  podSelector:
    matchLabels:
      app: device-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow WebSocket connections from ESP32 devices
  - from: []  # External traffic (ESP32 devices)
    ports:
    - protocol: TCP
      port: 8443  # Secure WebSocket
  # Allow traffic from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8443
  egress:
  # Allow communication to backend services
  - to:
    - podSelector:
        matchLabels:
          tier: backend
    ports:
    - protocol: TCP
      port: 8080
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# Calico GlobalNetworkPolicy for cross-cluster security
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: ai-teddy-global-security
spec:
  # Apply to all workloads
  selector: all()
  order: 100
  types:
  - Ingress
  - Egress
  # Default deny all
  ingress:
  - action: Deny
  egress:
  - action: Deny

---
# Calico NetworkPolicy for encrypted inter-node communication
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: inter-node-encryption
  namespace: ai-teddy-system
spec:
  selector: all()
  types:
  - Ingress
  - Egress
  ingress:
  - action: Allow
    protocol: TCP
    source:
      selector: all()
    destination:
      ports:
      - 443
      - 4789  # VXLAN
  egress:
  - action: Allow
    protocol: TCP
    destination:
      selector: all()
      ports:
      - 443
      - 4789  # VXLAN 