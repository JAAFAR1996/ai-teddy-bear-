# Zero Trust Authentication Policies for AI Teddy Bear System
# These policies enforce strict authentication and authorization

# JWT Authentication for all services
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: ai-teddy-jwt-auth
  namespace: ai-teddy-system
spec:
  selector:
    matchLabels:
      app: ai-teddy
  jwtRules:
  - issuer: "https://auth.ai-teddy.com"
    jwksUri: "https://auth.ai-teddy.com/.well-known/jwks.json"
    audiences:
    - "ai-teddy-api"
    - "ai-teddy-dashboard"
    forwardOriginalToken: true
    fromHeaders:
    - name: Authorization
      prefix: "Bearer "
    fromParams:
    - "access_token"
    fromCookies:
    - "auth-token"

---
# Authorization Policy for Parent Access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: parent-access-policy
  namespace: ai-teddy-system
spec:
  selector:
    matchLabels:
      app: ai-teddy-api
  action: ALLOW
  rules:
  # Allow authenticated parents to access child data
  - from:
    - source:
        principals: ["cluster.local/ns/ai-teddy-system/sa/parent-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT"]
        paths: ["/api/v1/children/*", "/api/v1/profiles/*"]
    when:
    - key: request.auth.claims[role]
      values: ["parent", "guardian"]
    - key: request.auth.claims[verified]
      values: ["true"]

---
# Authorization Policy for Child Services
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: child-service-policy
  namespace: ai-teddy-system
spec:
  selector:
    matchLabels:
      app: child-service
  action: ALLOW
  rules:
  # Allow AI service to interact with child data
  - from:
    - source:
        principals: ["cluster.local/ns/ai-teddy-system/sa/ai-service-account"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/conversation/*", "/api/v1/safety/*"]
    when:
    - key: request.auth.claims[service]
      values: ["ai-processor", "conversation-manager"]

---
# Authorization Policy for Admin Access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: admin-access-policy
  namespace: ai-teddy-system
spec:
  selector:
    matchLabels:
      app: ai-teddy-admin
  action: ALLOW
  rules:
  # Allow admin access to all resources
  - from:
    - source:
        principals: ["cluster.local/ns/ai-teddy-system/sa/admin-service-account"]
    to:
    - operation:
        methods: ["*"]
    when:
    - key: request.auth.claims[role]
      values: ["admin", "super-admin"]
    - key: request.auth.claims[permissions]
      values: ["full-access"]

---
# Deny all other traffic (Zero Trust default deny)
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all-default
  namespace: ai-teddy-system
spec:
  # No selector means this applies to all workloads
  action: DENY
  rules:
  # Deny all traffic that doesn't match above policies
  - {}

---
# mTLS Peer Authentication for service-to-service
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: strict-mtls
  namespace: ai-teddy-system
spec:
  # Apply to all workloads in namespace
  mtls:
    mode: STRICT

---
# Service Account for Parent Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: parent-service-account
  namespace: ai-teddy-system
  annotations:
    # IRSA (IAM Roles for Service Accounts) for AWS
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/ParentServiceRole
automountServiceAccountToken: true

---
# Service Account for AI Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-service-account
  namespace: ai-teddy-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/AIServiceRole
automountServiceAccountToken: true

---
# Service Account for Admin Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-service-account
  namespace: ai-teddy-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/AdminServiceRole
automountServiceAccountToken: true

---
# Network Policy for Zero Trust networking
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-teddy-network-policy
  namespace: ai-teddy-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress only from Istio gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: istio-proxy
  # Allow inter-service communication within namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-teddy-system
  egress:
  # Allow egress to Istio system
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
  # Allow egress to external services (controlled)
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS only
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
# Security Policy for Pod Security Standards
apiVersion: v1
kind: LimitRange
metadata:
  name: security-limits
  namespace: ai-teddy-system
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "512Mi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    type: Container
  - max:
      cpu: "2"
      memory: "2Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
    type: Container

---
# Pod Disruption Budget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-teddy-pdb
  namespace: ai-teddy-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ai-teddy 