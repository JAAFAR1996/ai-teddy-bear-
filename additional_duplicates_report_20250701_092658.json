{
  "timestamp": "2025-07-01 09:26:58.070933",
  "summary": {
    "content_duplicates": 12,
    "name_duplicates": 32,
    "config_files": 29,
    "init_files_total": 160,
    "init_files_empty": 0,
    "test_duplicates": 0
  },
  "details": {
    "content_duplicates": {
      "0a70175fffe5867ae0009da1c3597050": [
        ".\\src\\__init__.py",
        ".\\src\\dashboards\\__init__.py",
        ".\\src\\edge\\__init__.py",
        ".\\src\\simulators\\__init__.py"
      ],
      "05acb17d03b8dc01753cda1a94b4c85c": [
        ".\\src\\application\\accessibility\\services\\__init__.py",
        ".\\src\\application\\arvr\\services\\__init__.py",
        ".\\src\\application\\cleanup\\services\\__init__.py",
        ".\\src\\application\\emotion\\services\\__init__.py",
        ".\\src\\application\\enhancedchildinteraction\\services\\__init__.py",
        ".\\src\\application\\memory\\services\\__init__.py",
        ".\\src\\application\\parentdashboard\\services\\__init__.py",
        ".\\src\\application\\parentreport\\services\\__init__.py",
        ".\\src\\application\\services\\__init__.py",
        ".\\src\\application\\services\\communication\\__init__.py",
        ".\\src\\application\\services\\core\\__init__.py"
      ],
      "f6d7b42f914d1dad08279c974e2ea77e": [
        ".\\src\\application\\accessibility\\use_cases\\__init__.py",
        ".\\src\\application\\emotion\\use_cases\\__init__.py",
        ".\\src\\application\\enhancedchildinteraction\\use_cases\\__init__.py",
        ".\\src\\application\\parentreport\\use_cases\\__init__.py",
        ".\\src\\application\\use_cases\\__init__.py"
      ],
      "ce458cdd1c83ea4c7fc98b2abdd00461": [
        ".\\src\\application\\events\\__init__.py",
        ".\\src\\application\\interfaces\\__init__.py",
        ".\\src\\application\\patterns\\__init__.py",
        ".\\src\\application\\queries\\__init__.py"
      ],
      "febe90822a45caa557b61e9ec9820600": [
        ".\\src\\compliance\\__init__.py",
        ".\\src\\compliance\\alerts\\__init__.py",
        ".\\src\\compliance\\checkers\\__init__.py",
        ".\\src\\compliance\\managers\\__init__.py",
        ".\\src\\compliance\\reports\\__init__.py"
      ],
      "00956cccbb0e86b8a8e3482cda9ff175": [
        ".\\src\\domain\\accessibility\\entities\\__init__.py",
        ".\\src\\domain\\entities\\__init__.py",
        ".\\src\\domain\\streaming\\entities\\__init__.py"
      ],
      "bec7625e60aa6f2aa1ebd4feb4aead22": [
        ".\\src\\domain\\accessibility\\value_objects\\__init__.py",
        ".\\src\\domain\\advancedpersonalization\\value_objects\\__init__.py",
        ".\\src\\domain\\advancedprogressanalyzer\\value_objects\\__init__.py",
        ".\\src\\domain\\arvr\\value_objects\\__init__.py",
        ".\\src\\domain\\emotion\\value_objects\\__init__.py",
        ".\\src\\domain\\enhancedchildinteraction\\value_objects\\__init__.py",
        ".\\src\\domain\\enhancedparentreport\\value_objects\\__init__.py",
        ".\\src\\domain\\memory\\value_objects\\__init__.py",
        ".\\src\\domain\\moderation\\value_objects\\__init__.py",
        ".\\src\\domain\\notification\\value_objects\\__init__.py",
        ".\\src\\domain\\parentdashboard\\value_objects\\__init__.py",
        ".\\src\\domain\\parentreport\\value_objects\\__init__.py",
        ".\\src\\domain\\progressanalyzer\\value_objects\\__init__.py",
        ".\\src\\domain\\value_objects\\__init__.py"
      ],
      "5583da6f69dfa2e449ff08f7bec31605": [
        ".\\src\\domain\\cleanup\\aggregates\\__init__.py",
        ".\\src\\domain\\family\\__init__.py",
        ".\\src\\domain\\repositories\\__init__.py",
        ".\\src\\domain\\stories\\__init__.py",
        ".\\src\\domain\\streaming\\aggregates\\__init__.py"
      ],
      "190e73ae38ddff5de1623570a22e6a2a": [
        ".\\src\\infrastructure\\accessibility\\persistence\\__init__.py",
        ".\\src\\infrastructure\\advancedpersonalization\\persistence\\__init__.py",
        ".\\src\\infrastructure\\advancedprogressanalyzer\\persistence\\__init__.py",
        ".\\src\\infrastructure\\arvr\\persistence\\__init__.py",
        ".\\src\\infrastructure\\emotion\\persistence\\__init__.py",
        ".\\src\\infrastructure\\enhancedchildinteraction\\persistence\\__init__.py",
        ".\\src\\infrastructure\\enhancedparentreport\\persistence\\__init__.py",
        ".\\src\\infrastructure\\memory\\persistence\\__init__.py",
        ".\\src\\infrastructure\\moderation\\persistence\\__init__.py",
        ".\\src\\infrastructure\\notification\\persistence\\__init__.py",
        ".\\src\\infrastructure\\parentdashboard\\persistence\\__init__.py",
        ".\\src\\infrastructure\\parentreport\\persistence\\__init__.py",
        ".\\src\\infrastructure\\persistence\\__init__.py",
        ".\\src\\infrastructure\\persistence\\repositories\\__init__.py",
        ".\\src\\infrastructure\\progressanalyzer\\persistence\\__init__.py",
        ".\\src\\infrastructure\\streaming\\persistence\\__init__.py"
      ],
      "ab17bbedbcc49e088fdfa3bea0bace9e": [
        ".\\src\\infrastructure\\database\\__init__.py",
        ".\\src\\infrastructure\\graphql\\__init__.py",
        ".\\src\\infrastructure\\messaging\\__init__.py",
        ".\\src\\infrastructure\\middleware\\__init__.py",
        ".\\src\\infrastructure\\observability\\__init__.py",
        ".\\src\\infrastructure\\processing\\__init__.py",
        ".\\src\\infrastructure\\services\\data\\__init__.py",
        ".\\src\\infrastructure\\services\\external\\__init__.py",
        ".\\src\\infrastructure\\services\\monitoring\\__init__.py"
      ],
      "c06e62ad59816be86fb712e0e6f97aaf": [
        ".\\src\\ml\\components\\__init__.py",
        ".\\src\\ml\\continuous_learning\\deployment\\__init__.py",
        ".\\src\\ml\\continuous_learning\\evaluation\\__init__.py",
        ".\\src\\ml\\continuous_learning\\feedback\\__init__.py",
        ".\\src\\ml\\continuous_learning\\monitoring\\__init__.py",
        ".\\src\\ml\\continuous_learning\\training\\__init__.py",
        ".\\src\\ml\\deployment\\__init__.py"
      ],
      "3052cf7924c3042d94d051f0c8475bc1": [
        ".\\src\\presentation\\api\\__init__.py",
        ".\\src\\presentation\\api\\rest\\__init__.py",
        ".\\src\\presentation\\grpc\\__init__.py",
        ".\\src\\presentation\\services\\__init__.py"
      ]
    },
    "name_duplicates": {
      ".pre-commit-config.yaml": [
        ".\\.pre-commit-config.yaml",
        ".\\config\\.pre-commit-config.yaml"
      ],
      "settings.json": [
        ".\\.vscode\\settings.json",
        ".\\src\\data\\screen_time\\settings.json"
      ],
      "__init__.py": [
        ".\\api\\endpoints\\__init__.py",
        ".\\api\\websocket\\__init__.py",
        ".\\config\\__init__.py",
        ".\\src\\__init__.py",
        ".\\src\\adapters\\edge\\__init__.py",
        ".\\src\\adapters\\inbound\\rest\\__init__.py",
        ".\\src\\adapters\\outbound\\persistence\\__init__.py",
        ".\\src\\application\\__init__.py",
        ".\\src\\application\\accessibility\\dto\\__init__.py",
        ".\\src\\application\\accessibility\\services\\__init__.py",
        ".\\src\\application\\accessibility\\use_cases\\__init__.py",
        ".\\src\\application\\arvr\\services\\__init__.py",
        ".\\src\\application\\cleanup\\services\\__init__.py",
        ".\\src\\application\\emotion\\services\\__init__.py",
        ".\\src\\application\\emotion\\use_cases\\__init__.py",
        ".\\src\\application\\enhancedchildinteraction\\services\\__init__.py",
        ".\\src\\application\\enhancedchildinteraction\\use_cases\\__init__.py",
        ".\\src\\application\\events\\__init__.py",
        ".\\src\\application\\interfaces\\__init__.py",
        ".\\src\\application\\memory\\services\\__init__.py",
        ".\\src\\application\\parentdashboard\\services\\__init__.py",
        ".\\src\\application\\parentreport\\services\\__init__.py",
        ".\\src\\application\\parentreport\\use_cases\\__init__.py",
        ".\\src\\application\\patterns\\__init__.py",
        ".\\src\\application\\queries\\__init__.py",
        ".\\src\\application\\services\\__init__.py",
        ".\\src\\application\\services\\ai\\__init__.py",
        ".\\src\\application\\services\\ai\\analyzers\\__init__.py",
        ".\\src\\application\\services\\ai\\interfaces\\__init__.py",
        ".\\src\\application\\services\\ai\\models\\__init__.py",
        ".\\src\\application\\services\\audio\\__init__.py",
        ".\\src\\application\\services\\child\\__init__.py",
        ".\\src\\application\\services\\cleanup\\__init__.py",
        ".\\src\\application\\services\\communication\\__init__.py",
        ".\\src\\application\\services\\conversation\\__init__.py",
        ".\\src\\application\\services\\core\\__init__.py",
        ".\\src\\application\\services\\emotion\\__init__.py",
        ".\\src\\application\\services\\enhanced_componentshume_componentsintegration\\__init__.py",
        ".\\src\\application\\services\\esp32\\__init__.py",
        ".\\src\\application\\services\\memory\\__init__.py",
        ".\\src\\application\\services\\moderation\\__init__.py",
        ".\\src\\application\\services\\parentdashboard\\__init__.py",
        ".\\src\\application\\services\\parent_componentsdashboard\\__init__.py",
        ".\\src\\application\\services\\reporting\\__init__.py",
        ".\\src\\application\\services\\streaming\\__init__.py",
        ".\\src\\application\\use_cases\\__init__.py",
        ".\\src\\compliance\\__init__.py",
        ".\\src\\compliance\\alerts\\__init__.py",
        ".\\src\\compliance\\checkers\\__init__.py",
        ".\\src\\compliance\\managers\\__init__.py",
        ".\\src\\compliance\\reports\\__init__.py",
        ".\\src\\dashboards\\__init__.py",
        ".\\src\\domain\\__init__.py",
        ".\\src\\domain\\accessibility\\entities\\__init__.py",
        ".\\src\\domain\\accessibility\\value_objects\\__init__.py",
        ".\\src\\domain\\advancedpersonalization\\value_objects\\__init__.py",
        ".\\src\\domain\\advancedprogressanalyzer\\value_objects\\__init__.py",
        ".\\src\\domain\\arvr\\value_objects\\__init__.py",
        ".\\src\\domain\\audio\\models\\__init__.py",
        ".\\src\\domain\\audio\\services\\__init__.py",
        ".\\src\\domain\\child\\__init__.py",
        ".\\src\\domain\\child\\models\\__init__.py",
        ".\\src\\domain\\child\\services\\__init__.py",
        ".\\src\\domain\\cleanup\\aggregates\\__init__.py",
        ".\\src\\domain\\cleanup\\models\\__init__.py",
        ".\\src\\domain\\emotion\\models\\__init__.py",
        ".\\src\\domain\\emotion\\value_objects\\__init__.py",
        ".\\src\\domain\\enhancedchildinteraction\\value_objects\\__init__.py",
        ".\\src\\domain\\enhancedparentreport\\value_objects\\__init__.py",
        ".\\src\\domain\\entities\\__init__.py",
        ".\\src\\domain\\esp32\\models\\__init__.py",
        ".\\src\\domain\\exceptions\\__init__.py",
        ".\\src\\domain\\family\\__init__.py",
        ".\\src\\domain\\memory\\models\\__init__.py",
        ".\\src\\domain\\memory\\value_objects\\__init__.py",
        ".\\src\\domain\\moderation\\value_objects\\__init__.py",
        ".\\src\\domain\\notification\\value_objects\\__init__.py",
        ".\\src\\domain\\parentdashboard\\__init__.py",
        ".\\src\\domain\\parentdashboard\\value_objects\\__init__.py",
        ".\\src\\domain\\parentreport\\value_objects\\__init__.py",
        ".\\src\\domain\\progressanalyzer\\value_objects\\__init__.py",
        ".\\src\\domain\\reporting\\models\\__init__.py",
        ".\\src\\domain\\reporting\\services\\__init__.py",
        ".\\src\\domain\\repositories\\__init__.py",
        ".\\src\\domain\\services\\__init__.py",
        ".\\src\\domain\\stories\\__init__.py",
        ".\\src\\domain\\streaming\\aggregates\\__init__.py",
        ".\\src\\domain\\streaming\\entities\\__init__.py",
        ".\\src\\domain\\value_objects\\__init__.py",
        ".\\src\\edge\\__init__.py",
        ".\\src\\infrastructure\\__init__.py",
        ".\\src\\infrastructure\\accessibility\\persistence\\__init__.py",
        ".\\src\\infrastructure\\advancedpersonalization\\persistence\\__init__.py",
        ".\\src\\infrastructure\\advancedprogressanalyzer\\persistence\\__init__.py",
        ".\\src\\infrastructure\\ai\\__init__.py",
        ".\\src\\infrastructure\\arvr\\persistence\\__init__.py",
        ".\\src\\infrastructure\\audio\\__init__.py",
        ".\\src\\infrastructure\\audio\\cli\\__init__.py",
        ".\\src\\infrastructure\\audio\\clients\\__init__.py",
        ".\\src\\infrastructure\\caching\\__init__.py",
        ".\\src\\infrastructure\\child\\__init__.py",
        ".\\src\\infrastructure\\database\\__init__.py",
        ".\\src\\infrastructure\\decorators\\__init__.py",
        ".\\src\\infrastructure\\emotion\\__init__.py",
        ".\\src\\infrastructure\\emotion\\persistence\\__init__.py",
        ".\\src\\infrastructure\\enhancedchildinteraction\\persistence\\__init__.py",
        ".\\src\\infrastructure\\enhancedparentreport\\persistence\\__init__.py",
        ".\\src\\infrastructure\\esp32\\__init__.py",
        ".\\src\\infrastructure\\exception_handling\\__init__.py",
        ".\\src\\infrastructure\\graphql\\__init__.py",
        ".\\src\\infrastructure\\memory\\persistence\\__init__.py",
        ".\\src\\infrastructure\\messaging\\__init__.py",
        ".\\src\\infrastructure\\middleware\\__init__.py",
        ".\\src\\infrastructure\\moderation\\persistence\\__init__.py",
        ".\\src\\infrastructure\\notification\\persistence\\__init__.py",
        ".\\src\\infrastructure\\observability\\__init__.py",
        ".\\src\\infrastructure\\parentdashboard\\__init__.py",
        ".\\src\\infrastructure\\parentdashboard\\persistence\\__init__.py",
        ".\\src\\infrastructure\\parentreport\\persistence\\__init__.py",
        ".\\src\\infrastructure\\persistence\\__init__.py",
        ".\\src\\infrastructure\\persistence\\repositories\\__init__.py",
        ".\\src\\infrastructure\\processing\\__init__.py",
        ".\\src\\infrastructure\\progressanalyzer\\persistence\\__init__.py",
        ".\\src\\infrastructure\\reporting\\__init__.py",
        ".\\src\\infrastructure\\security\\__init__.py",
        ".\\src\\infrastructure\\services\\data\\__init__.py",
        ".\\src\\infrastructure\\services\\external\\__init__.py",
        ".\\src\\infrastructure\\services\\monitoring\\__init__.py",
        ".\\src\\infrastructure\\streaming\\persistence\\__init__.py",
        ".\\src\\ml\\components\\__init__.py",
        ".\\src\\ml\\continuous_learning\\__init__.py",
        ".\\src\\ml\\continuous_learning\\deployment\\__init__.py",
        ".\\src\\ml\\continuous_learning\\evaluation\\__init__.py",
        ".\\src\\ml\\continuous_learning\\feedback\\__init__.py",
        ".\\src\\ml\\continuous_learning\\monitoring\\__init__.py",
        ".\\src\\ml\\continuous_learning\\training\\__init__.py",
        ".\\src\\ml\\deployment\\__init__.py",
        ".\\src\\ml\\pipelines\\__init__.py",
        ".\\src\\presentation\\__init__.py",
        ".\\src\\presentation\\api\\__init__.py",
        ".\\src\\presentation\\api\\graphql\\__init__.py",
        ".\\src\\presentation\\api\\middleware\\__init__.py",
        ".\\src\\presentation\\api\\rest\\__init__.py",
        ".\\src\\presentation\\api\\utils\\__init__.py",
        ".\\src\\presentation\\enterprise_componentsdashboard\\__init__.py",
        ".\\src\\presentation\\grpc\\__init__.py",
        ".\\src\\presentation\\services\\__init__.py",
        ".\\src\\presentation\\ui\\__init__.py",
        ".\\src\\presentation\\ui\\audio\\__init__.py",
        ".\\src\\presentation\\ui\\networking\\__init__.py",
        ".\\src\\presentation\\ui\\widgets\\__init__.py",
        ".\\src\\shared\\__init__.py",
        ".\\src\\simulators\\__init__.py",
        ".\\src\\testing\\__init__.py",
        ".\\tests\\enhanced_testing\\__init__.py",
        ".\\tests\\framework\\__init__.py",
        ".\\tests\\unit\\ui\\__init__.py",
        ".\\tests\\unit\\ui\\audio\\__init__.py",
        ".\\tests\\unit\\ui\\network\\__init__.py",
        ".\\tests\\unit\\ui\\widgets\\__init__.py"
      ],
      "config.json": [
        ".\\config\\config.json",
        ".\\src\\config\\config.json"
      ],
      "package.json": [
        ".\\frontend\\package.json",
        ".\\src\\dashboards\\package.json"
      ],
      "index.js": [
        ".\\frontend\\src\\index.js",
        ".\\frontend\\src\\utils\\index.js"
      ],
      "alertmanager.yml": [
        ".\\monitoring\\emergency\\alertmanager\\alertmanager.yml",
        ".\\src\\monitoring\\alertmanager.yml"
      ],
      "emergency_response.py": [
        ".\\monitoring\\emergency\\api\\emergency_response.py",
        ".\\src\\infrastructure\\security\\emergency_response.py"
      ],
      "use_cases.py": [
        ".\\src\\application\\accessibility\\use_cases\\use_cases.py",
        ".\\src\\application\\emotion\\use_cases\\use_cases.py",
        ".\\src\\application\\enhancedchildinteraction\\use_cases\\use_cases.py",
        ".\\src\\application\\parentreport\\use_cases\\use_cases.py"
      ],
      "services.py": [
        ".\\src\\application\\arvr\\services\\services.py",
        ".\\src\\application\\emotion\\services\\services.py",
        ".\\src\\application\\enhancedchildinteraction\\services\\services.py",
        ".\\src\\application\\interfaces\\services.py",
        ".\\src\\application\\memory\\services\\services.py",
        ".\\src\\application\\parentdashboard\\services\\services.py",
        ".\\src\\application\\parentreport\\services\\services.py"
      ],
      "notification_service.py": [
        ".\\src\\application\\services\\notification_service.py",
        ".\\src\\application\\services\\cleanup\\notification_service.py",
        ".\\src\\infrastructure\\parentdashboard\\notification_service.py"
      ],
      "progress_analyzer.py": [
        ".\\src\\application\\services\\progress_analyzer.py",
        ".\\src\\domain\\reporting\\services\\progress_analyzer.py"
      ],
      "fallback_response_service.py": [
        ".\\src\\application\\services\\ai\\fallback_response_service.py",
        ".\\src\\application\\services\\ai\\handlers\\fallback_response_service.py"
      ],
      "models.py": [
        ".\\src\\application\\services\\ai\\models.py",
        ".\\src\\infrastructure\\persistence\\models.py"
      ],
      "openai_service.py": [
        ".\\src\\application\\services\\ai\\openai_service.py",
        ".\\src\\application\\services\\ai\\providers\\openai_service.py"
      ],
      "emotion_analyzer_service.py": [
        ".\\src\\application\\services\\ai\\analyzers\\emotion_analyzer_service.py",
        ".\\src\\domain\\reporting\\services\\emotion_analyzer_service.py"
      ],
      "child_analytics_service.py": [
        ".\\src\\application\\services\\child\\child_analytics_service.py",
        ".\\src\\domain\\child\\services\\child_analytics_service.py"
      ],
      "child_interaction_service.py": [
        ".\\src\\application\\services\\child\\child_interaction_service.py",
        ".\\src\\domain\\child\\services\\child_interaction_service.py"
      ],
      "audio_service.py": [
        ".\\src\\application\\services\\esp32\\audio_service.py",
        ".\\src\\presentation\\services\\audio_service.py"
      ],
      "child_service.py": [
        ".\\src\\application\\services\\esp32\\child_service.py",
        ".\\src\\domain\\entities\\child_service.py"
      ],
      "base.py": [
        ".\\src\\application\\use_cases\\base.py",
        ".\\src\\core\\domain\\shared\\base.py",
        ".\\src\\domain\\entities\\base.py",
        ".\\src\\domain\\exceptions\\base.py",
        ".\\src\\domain\\repositories\\base.py",
        ".\\tests\\framework\\base.py"
      ],
      "audit_logger.py": [
        ".\\src\\compliance\\audit_logger.py",
        ".\\src\\infrastructure\\security\\audit_logger.py"
      ],
      "entities.py": [
        ".\\src\\core\\domain\\child_interaction\\entities.py",
        ".\\src\\domain\\streaming\\entities\\entities.py"
      ],
      "audio_processor.py": [
        ".\\src\\domain\\audio\\services\\audio_processor.py",
        ".\\src\\infrastructure\\audio\\audio_processor.py"
      ],
      "performance.py": [
        ".\\src\\domain\\exceptions\\performance.py",
        ".\\src\\infrastructure\\graphql\\performance.py"
      ],
      "security.py": [
        ".\\src\\domain\\exceptions\\security.py",
        ".\\src\\infrastructure\\middleware\\security.py"
      ],
      "esp32_production_simulator.py": [
        ".\\src\\infrastructure\\esp32_production_simulator.py",
        ".\\src\\simulators\\esp32_production_simulator.py"
      ],
      "persistence.py": [
        ".\\src\\infrastructure\\accessibility\\persistence\\persistence.py",
        ".\\src\\infrastructure\\advancedpersonalization\\persistence\\persistence.py",
        ".\\src\\infrastructure\\advancedprogressanalyzer\\persistence\\persistence.py",
        ".\\src\\infrastructure\\arvr\\persistence\\persistence.py",
        ".\\src\\infrastructure\\emotion\\persistence\\persistence.py",
        ".\\src\\infrastructure\\enhancedchildinteraction\\persistence\\persistence.py",
        ".\\src\\infrastructure\\enhancedparentreport\\persistence\\persistence.py",
        ".\\src\\infrastructure\\memory\\persistence\\persistence.py",
        ".\\src\\infrastructure\\moderation\\persistence\\persistence.py",
        ".\\src\\infrastructure\\notification\\persistence\\persistence.py",
        ".\\src\\infrastructure\\parentdashboard\\persistence\\persistence.py",
        ".\\src\\infrastructure\\parentreport\\persistence\\persistence.py",
        ".\\src\\infrastructure\\progressanalyzer\\persistence\\persistence.py",
        ".\\src\\infrastructure\\streaming\\persistence\\persistence.py"
      ],
      "audio_recorder.py": [
        ".\\src\\infrastructure\\audio\\audio_recorder.py",
        ".\\src\\presentation\\ui\\audio\\audio_recorder.py"
      ],
      "cache_service.py": [
        ".\\src\\infrastructure\\parentdashboard\\cache_service.py",
        ".\\src\\infrastructure\\services\\data\\cache_service.py"
      ],
      "auth.py": [
        ".\\src\\infrastructure\\security\\auth.py",
        ".\\src\\presentation\\api\\middleware\\auth.py"
      ],
      "performance_monitor.py": [
        ".\\src\\ml\\continuous_learning\\monitoring\\performance_monitor.py",
        ".\\src\\presentation\\api\\graphql\\performance_monitor.py"
      ]
    },
    "config_files": [
      ".\\.pre-commit-config.yaml",
      ".\\.vscode\\settings.json",
      ".\\config\\.env",
      ".\\config\\.env.example",
      ".\\config\\.pre-commit-config.yaml",
      ".\\config\\config.json",
      ".\\config\\default_schema.json",
      ".\\config\\secure_config.py",
      ".\\config\\settings.py",
      ".\\config\\environments\\production_config.json",
      ".\\config\\environments\\staging_config.json",
      ".\\esp32\\secure_config.h",
      ".\\frontend\\.env",
      ".\\frontend\\src\\components\\Settings.js",
      ".\\monitoring\\emergency\\kubernetes\\emergency-monitoring-configmap.yaml",
      ".\\scripts\\configure_logging.py",
      ".\\scripts\\config_hardware_esp32_analyzer.py",
      ".\\scripts\\intelligent_config_merger.py",
      ".\\scripts\\migrate_config.py",
      ".\\scripts\\quick_config_analyzer.py",
      ".\\src\\application\\services\\enhanced_componentshume_componentsintegration\\emotioncalibrationconfig.py",
      ".\\src\\config\\config.json",
      ".\\src\\data\\screen_time\\settings.json",
      ".\\src\\domain\\emotion_config.py",
      ".\\src\\infrastructure\\config_manager.py",
      ".\\src\\infrastructure\\config\\secure_configuration.py",
      ".\\src\\infrastructure\\messaging\\kafka_config.py",
      ".\\src\\presentation\\ui\\audio\\audio_config.py",
      ".\\tests\\e2e\\playwright.config.js"
    ],
    "init_analysis": {
      "total": 160,
      "empty": 0,
      "with_content": 160,
      "empty_files": [],
      "content_files": [
        {
          "path": ".\\api\\endpoints\\__init__.py",
          "content": "\"\"\"API Endpoints Package\"\"\"\n\nfrom .device import router as device_router\nfrom .audio import router as audio_router\nfrom .children import router as children_router\nfrom .dashboard import router as dashboard_router\n\n__all__ = [\n    \"device_router\",\n    \"audio_router\", \n    \"children_router\",\n    \"dashboard_router\"\n]",
          "lines": 13
        },
        {
          "path": ".\\api\\websocket\\__init__.py",
          "content": "\"\"\"WebSocket Package\"\"\"\n\nfrom .manager import WebSocketManager\nfrom .handlers import router as websocket_router\n\n__all__ = [\"WebSocketManager\", \"websocket_router\"]",
          "lines": 6
        },
        {
          "path": ".\\config\\__init__.py",
          "content": "\"\"\"\nConfig module for AI Teddy Bear\n\"\"\"",
          "lines": 3
        },
        {
          "path": ".\\src\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Module Package\nEnhanced child interaction system with advanced AI capabilities.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\adapters\\edge\\__init__.py",
          "content": "\"\"\"\nEdge Computing Adapters for AI Teddy Bear Project.\n\nThis module provides edge computing capabilities for real-time processing\non embedded devices like ESP32-S3, enabling instant response and reduced\ncloud dependency.\n\nAI Team Implementation - Task 10\n\"\"\"\n\nfrom .edge_ai_manager import (\n    EdgeAIManager,\n    EdgeModelConfig,\n    EdgeProcessingMode,\n    WakeWordModel,\n    SafetyLevel,\n    EdgeProcessingResult,\n    EdgeEmotionResult,\n    EdgeSafetyResult,\n    EdgeAudioFeatures\n)\n\n__all__ = [\n    'EdgeAIManager',\n    'EdgeModelConfig',\n    'EdgeProcessingMode',\n    'WakeWordModel',\n    'SafetyLevel',\n    'EdgeProcessingResult',\n    'EdgeEmotionResult',\n    'EdgeSafetyResult',\n    'EdgeAudioFeatures'\n]",
          "lines": 33
        },
        {
          "path": ".\\src\\adapters\\inbound\\rest\\__init__.py",
          "content": "\"\"\"\n🌐 REST API Adapters - AI Teddy Bear\n===================================\n\nInbound adapters for REST API endpoints.\nThese adapters translate HTTP requests into application use cases\nand format responses back to HTTP.\n\nFollowing Hexagonal Architecture:\n- Adapters depend on ports, not vice versa\n- Handle HTTP-specific concerns (status codes, headers, etc.)\n- Validate and transform input/output\n- Delegate business logic to use cases\n\"\"\"\n\nfrom .child_controller import ChildController\nfrom .conversation_controller import ConversationController\nfrom .learning_controller import LearningController\nfrom .safety_controller import SafetyController\nfrom .health_controller import HealthController\n\n__all__ = [\n    'ChildController',\n    'ConversationController',\n    'LearningController', \n    'SafetyController',\n    'HealthController'\n]",
          "lines": 28
        },
        {
          "path": ".\\src\\adapters\\outbound\\persistence\\__init__.py",
          "content": "\"\"\"\n💾 Persistence Adapters - AI Teddy Bear\n======================================\n\nOutbound adapters for data persistence.\nThese adapters implement repository ports using specific\ndatabase technologies while keeping the domain independent.\n\nSupported persistence technologies:\n- PostgreSQL for transactional data\n- Redis for caching\n- S3 for file storage\n- MongoDB for analytics data\n\nFollowing Repository Pattern:\n- Implement repository ports from core\n- Handle data mapping between domain and persistence models\n- Manage transactions and connections\n- Provide query optimization\n\"\"\"\n\nfrom .postgresql import (\n    PostgreSQLChildRepository,\n    PostgreSQLConversationRepository,\n    PostgreSQLEventStore\n)\n\nfrom .redis import (\n    RedisCacheRepository,\n    RedisSessionRepository\n)\n\nfrom .s3 import (\n    S3AudioFileRepository,\n    S3BackupRepository\n)\n\nfrom .mongodb import (\n    MongoAnalyticsRepository,\n    MongoLogRepository\n)\n\n__all__ = [\n    # PostgreSQL Adapters\n    'PostgreSQLChildRepository',\n    'PostgreSQLConversationRepository',\n    'PostgreSQLEventStore',\n    \n    # Redis Adapters\n    'RedisCacheRepository',\n    'RedisSessionRepository',\n    \n    # S3 Adapters\n    'S3AudioFileRepository',\n    'S3BackupRepository',\n    \n    # MongoDB Adapters\n    'MongoAnalyticsRepository',\n    'MongoLogRepository'\n]",
          "lines": 60
        },
        {
          "path": ".\\src\\application\\__init__.py",
          "content": "﻿\"\"\"Application Layer - Use Cases and Orchestration\"\"\"\n\n# Export emotion application services\nfrom .services.emotion import (\n    EmotionAnalysisService, EmotionDatabaseService,\n    EmotionAnalyticsService, EmotionHistoryService\n)\n\n# Export ESP32 application services\nfrom .services.esp32 import (\n    DeviceManagementService, AudioManagementService,\n    NetworkCommunicationService, GUIManagementService,\n    ChildProfileService\n)\n\n# Audio Application Services\nfrom .services.audio.voice_synthesis_service import VoiceSynthesisService\nfrom .services.audio.voice_recognition_service import VoiceRecognitionService\nfrom .services.audio.voice_profile_service import VoiceProfileService\n\n# Add reporting application services\nfrom .services.reporting import (\n    ReportGenerationService,\n    AnalysisOrchestratorService,\n    RecommendationService\n)\n\n# Add Parent Dashboard application services\nfrom .services import parentdashboard\n\n# Child Application Services\nfrom .services.child import (\n    ChildSearchService,\n    ChildAnalyticsService,\n    ChildInteractionService,\n    ChildBulkOperationsService\n)",
          "lines": 37
        },
        {
          "path": ".\\src\\application\\accessibility\\dto\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Data Transfer Objects\nApplication layer DTOs for data transfer.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\accessibility\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\accessibility\\use_cases\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Use Cases\nApplication use cases and orchestration logic.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\arvr\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\cleanup\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\emotion\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\emotion\\use_cases\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Use Cases\nApplication use cases and orchestration logic.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\enhancedchildinteraction\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\enhancedchildinteraction\\use_cases\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Use Cases\nApplication use cases and orchestration logic.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\events\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Layer\nUse cases, services, and application orchestration.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\interfaces\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Layer\nUse cases, services, and application orchestration.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\memory\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\parentdashboard\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\parentreport\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\parentreport\\use_cases\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Use Cases\nApplication use cases and orchestration logic.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\patterns\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Layer\nUse cases, services, and application orchestration.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\queries\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Layer\nUse cases, services, and application orchestration.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\services\\ai\\__init__.py",
          "content": "\"\"\"\n🤖 AI Services Module - Enterprise 2025 Implementation\nCentralized AI services with clean architecture and dependency injection\n\"\"\"\n\n# Core models and interfaces\nfrom .models.ai_response_models import (\n    AIResponseModel,\n    EmotionAnalysis,\n    ConversationContext,\n    AIServiceMetrics,\n    ResponseGenerationRequest\n)\n\nfrom .interfaces.ai_service_interface import (\n    IAIService,\n    IEmotionAnalyzer,\n    IResponseGenerator,\n    ICacheService,\n    IConversationManager\n)\n\n# Service implementations\nfrom .analyzers.emotion_analyzer_service import EmotionAnalyzerService\nfrom .fallback_response_service import FallbackResponseService\nfrom .ai_service_factory import EnhancedAIServiceFactory, AIServiceFactory\n\n# Re-exports for backward compatibility\n__all__ = [\n    # Models\n    \"AIResponseModel\",\n    \"EmotionAnalysis\", \n    \"ConversationContext\",\n    \"AIServiceMetrics\",\n    \"ResponseGenerationRequest\",\n    \n    # Interfaces\n    \"IAIService\",\n    \"IEmotionAnalyzer\",\n    \"IResponseGenerator\",\n    \"ICacheService\",\n    \"IConversationManager\",\n    \n    # Services\n    \"EmotionAnalyzerService\",\n    \"FallbackResponseService\",\n    \n    # Factory\n    \"EnhancedAIServiceFactory\",\n    \"AIServiceFactory\"\n]",
          "lines": 51
        },
        {
          "path": ".\\src\\application\\services\\ai\\analyzers\\__init__.py",
          "content": "\"\"\"\n🎭 AI Analyzers Module\nEmotion analysis and other AI analysis services\n\"\"\"\n\nfrom .emotion_analyzer_service import EmotionAnalyzerService\n\n__all__ = [\n    \"EmotionAnalyzerService\"\n]",
          "lines": 10
        },
        {
          "path": ".\\src\\application\\services\\ai\\interfaces\\__init__.py",
          "content": "\"\"\"\n🤖 AI Interfaces Module\nAbstract interfaces and contracts for AI services\n\"\"\"\n\nfrom .ai_service_interface import (\n    IAIService,\n    IEmotionAnalyzer,\n    IResponseGenerator,\n    ICacheService,\n    IConversationManager\n)\n\n__all__ = [\n    \"IAIService\",\n    \"IEmotionAnalyzer\",\n    \"IResponseGenerator\",\n    \"ICacheService\",\n    \"IConversationManager\"\n]",
          "lines": 20
        },
        {
          "path": ".\\src\\application\\services\\ai\\models\\__init__.py",
          "content": "\"\"\"\n🤖 AI Models Module\nData models and structures for AI services\n\"\"\"\n\nfrom .ai_response_models import (\n    AIResponseModel,\n    EmotionAnalysis,\n    ConversationContext,\n    AIServiceMetrics,\n    ResponseGenerationRequest\n)\n\n__all__ = [\n    \"AIResponseModel\",\n    \"EmotionAnalysis\",\n    \"ConversationContext\", \n    \"AIServiceMetrics\",\n    \"ResponseGenerationRequest\"\n]",
          "lines": 20
        },
        {
          "path": ".\\src\\application\\services\\audio\\__init__.py",
          "content": "\"\"\"\n🎵 Audio Services Package\nModern audio processing services for the AI Teddy Bear system\n\"\"\"\n\nfrom .transcription_service import (\n    ModernTranscriptionService,\n    TranscriptionService,\n    TranscriptionConfig,\n    StreamingAudioBuffer,\n    create_transcription_service\n)\n\ntry:\n    from .synthesis_service import (\n        ModernSynthesisService,\n        SynthesisService,\n        SynthesisConfig,\n        VoiceCharacter,\n        VoiceProvider,\n        create_synthesis_service\n    )\nexcept ImportError:\n    # Synthesis service not available\n    pass\n\ntry:\n    from .voice_service import (\n        ModernVoiceService,\n        VoiceService,\n        VoiceConfig,\n        VoiceInteractionResult,\n        create_voice_service\n    )\nexcept ImportError:\n    # Voice service not available\n    pass\n\nfrom .audio_recording_service import AudioRecordingService\nfrom .audio_playback_service import AudioPlaybackService  \nfrom .audio_session_service import AudioSessionService\n\n__all__ = [\n    \"ModernTranscriptionService\",\n    \"TranscriptionService\", \n    \"TranscriptionConfig\",\n    \"StreamingAudioBuffer\",\n    \"create_transcription_service\",\n    \"ModernVoiceService\",\n    \"VoiceService\",\n    \"VoiceConfig\",\n    \"VoiceInteractionResult\",\n    \"create_voice_service\",\n    \"AudioRecordingService\",\n    \"AudioPlaybackService\", \n    \"AudioSessionService\"\n]",
          "lines": 57
        },
        {
          "path": ".\\src\\application\\services\\child\\__init__.py",
          "content": "\"\"\"\nChild Application Services\n\nApplication layer services for child-related use cases and workflows.\n\"\"\"\n\nfrom .child_search_service import ChildSearchService\nfrom .child_analytics_service import ChildAnalyticsService\nfrom .child_interaction_service import ChildInteractionService\nfrom .child_bulk_operations_service import ChildBulkOperationsService\n\n__all__ = [\n    \"ChildSearchService\",\n    \"ChildAnalyticsService\",\n    \"ChildInteractionService\",\n    \"ChildBulkOperationsService\"\n]",
          "lines": 17
        },
        {
          "path": ".\\src\\application\\services\\cleanup\\__init__.py",
          "content": "#!/usr/bin/env python3\n\"\"\"\nCleanup Services Package\nModularized data cleanup services following clean architecture\n\"\"\"\n\nfrom .backup_service import BackupService\nfrom .target_identification_service import TargetIdentificationService\nfrom .cleanup_execution_service import CleanupExecutionService\nfrom .notification_service import NotificationService\n\n__all__ = [\n    \"BackupService\",\n    \"TargetIdentificationService\", \n    \"CleanupExecutionService\",\n    \"NotificationService\"\n]",
          "lines": 17
        },
        {
          "path": ".\\src\\application\\services\\communication\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\services\\conversation\\__init__.py",
          "content": "\"\"\"Conversation application services.\"\"\"\n\nfrom .conversation_analytics_service import ConversationAnalyticsService\nfrom .conversation_export_service import ConversationExportService  \nfrom .conversation_search_service import ConversationSearchService\nfrom .conversation_maintenance_service import ConversationMaintenanceService\n\n__all__ = [\n    'ConversationAnalyticsService',\n    'ConversationExportService',\n    'ConversationSearchService', \n    'ConversationMaintenanceService'\n]",
          "lines": 13
        },
        {
          "path": ".\\src\\application\\services\\core\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Application Services\nUse cases and application service implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\application\\services\\emotion\\__init__.py",
          "content": "﻿\"\"\"Emotion application services exports.\"\"\"\n\nfrom .emotion_analysis_service import EmotionAnalysisService\nfrom .emotion_database_service import EmotionDatabaseService\nfrom .emotion_analytics_service import EmotionAnalyticsService\nfrom .emotion_history_service import EmotionHistoryService\n\n__all__ = [\n    'EmotionAnalysisService',\n    'EmotionDatabaseService', \n    'EmotionAnalyticsService',\n    'EmotionHistoryService'\n]",
          "lines": 13
        },
        {
          "path": ".\\src\\application\\services\\enhanced_componentshume_componentsintegration\\__init__.py",
          "content": "\"\"\"\nEnhanced_Hume_Integration Components Package\nمكونات منفصلة من enhanced_hume_integration.py\n\nتم إنشاؤها تلقائياً بواسطة God Class Splitter\n\"\"\"\n\n# Import all components for backward compatibility\nfrom .language import Language\nfrom .analysismode import AnalysisMode\nfrom .emotioncalibrationconfig import EmotionCalibrationConfig\nfrom .emotionanalysisresult import EmotionAnalysisResult\nfrom .enhancedhumeintegrationcore import EnhancedHumeIntegrationCore\nfrom .enhancedhumeintegrationutility import EnhancedHumeIntegrationUtility\n\n# Legacy compatibility\n__all__ = [\n    'Language',\n    'AnalysisMode',\n    'EmotionCalibrationConfig',\n    'EmotionAnalysisResult',\n    'EnhancedHumeIntegrationCore',\n    'EnhancedHumeIntegrationUtility',\n]",
          "lines": 24
        },
        {
          "path": ".\\src\\application\\services\\esp32\\__init__.py",
          "content": "﻿\"\"\"ESP32 application services.\"\"\"\n\nfrom .device_service import DeviceManagementService\nfrom .audio_service import AudioManagementService  \nfrom .network_service import NetworkCommunicationService\nfrom .gui_service import GUIManagementService\nfrom .child_service import ChildProfileService\n\n__all__ = [\n    'DeviceManagementService',\n    'AudioManagementService',\n    'NetworkCommunicationService', \n    'GUIManagementService',\n    'ChildProfileService'\n]",
          "lines": 15
        },
        {
          "path": ".\\src\\application\\services\\memory\\__init__.py",
          "content": "\"\"\"Memory Application Services\"\"\"\n\nfrom .memory_storage_service import MemoryStorageService\nfrom .memory_retrieval_service import MemoryRetrievalService\nfrom .memory_analysis_service import MemoryAnalysisService\nfrom .child_profile_service import ChildProfileService\nfrom .conversation_summary_service import ConversationSummaryService\n\n__all__ = [\n    'MemoryStorageService',\n    'MemoryRetrievalService',\n    'MemoryAnalysisService',\n    'ChildProfileService',\n    'ConversationSummaryService'\n]",
          "lines": 15
        },
        {
          "path": ".\\src\\application\\services\\moderation\\__init__.py",
          "content": "\"\"\"\nModeration_Service Components Package\nمكونات منفصلة من moderation_service.py\n\nتم إنشاؤها تلقائياً بواسطة God Class Splitter\n\"\"\"\n\n# Import all components for backward compatibility\nfrom .moderationseverity import ModerationSeverity\nfrom .contentcategory import ContentCategory\nfrom .moderationresult import ModerationResult\nfrom .moderationrule import ModerationRule\nfrom .moderationlog import ModerationLog\nfrom .ruleenginecore import RuleEngineCore\nfrom .ruleengineutility import RuleEngineUtility\nfrom .moderationcore import ModerationCore\nfrom .moderationutility import ModerationUtility\n\n# Legacy compatibility\n__all__ = [\n    'ModerationSeverity',\n    'ContentCategory',\n    'ModerationResult',\n    'ModerationRule',\n    'ModerationLog',\n    'RuleEngineCore',\n    'RuleEngineUtility',\n    'ModerationCore',\n    'ModerationUtility',\n]",
          "lines": 30
        },
        {
          "path": ".\\src\\application\\services\\parentdashboard\\__init__.py",
          "content": "\"\"\"\nParent Dashboard Application Services\n====================================\n\nApplication layer services for Parent Dashboard functionality.\nOrchestrates business logic and coordinates between domain and infrastructure layers.\n\nExports:\n- DashboardOrchestrator: Main orchestration service\n- AnalyticsService: Analytics processing\n- AlertService: Alert management\n- SessionService: Session management\n\"\"\"\n\nfrom .dashboard_orchestrator import DashboardOrchestrator\nfrom .analytics_service import DashboardAnalyticsService  \nfrom .alert_service import DashboardAlertService\nfrom .session_service import DashboardSessionService\n\n__all__ = [\n    'DashboardOrchestrator',\n    'DashboardAnalyticsService',\n    'DashboardAlertService', \n    'DashboardSessionService'\n]",
          "lines": 25
        },
        {
          "path": ".\\src\\application\\services\\parent_componentsdashboard\\__init__.py",
          "content": "\"\"\"\nParent_Dashboard_Service Components Package\nمكونات منفصلة من parent_dashboard_service.py\n\nتم إنشاؤها تلقائياً بواسطة God Class Splitter\n\"\"\"\n\n# Import all components for backward compatibility\nfrom .alerttype import AlertType\nfrom .inmemorycache import InMemoryCache\nfrom .rediscache import RedisCache\nfrom .accessscheduletype import AccessScheduleType\nfrom .parentalcontrol import ParentalControl\nfrom .conversationlog import ConversationLog\nfrom .analyticsdata import AnalyticsData\nfrom .parentuser import ParentUser\nfrom .childprofile import ChildProfile\nfrom .conversationlogentry import ConversationLogEntry\nfrom .accessschedule import AccessSchedule\nfrom .alert import Alert\nfrom .parentdashboardcore import ParentDashboardCore\nfrom .parentdashboardutility import ParentDashboardUtility\nfrom .parentdashboardapi import ParentDashboardAPI\n\n# Legacy compatibility\n__all__ = [\n    'AlertType',\n    'InMemoryCache',\n    'RedisCache',\n    'AccessScheduleType',\n    'ParentalControl',\n    'ConversationLog',\n    'AnalyticsData',\n    'ParentUser',\n    'ChildProfile',\n    'ConversationLogEntry',\n    'AccessSchedule',\n    'Alert',\n    'ParentDashboardCore',\n    'ParentDashboardUtility',\n    'ParentDashboardAPI',\n]",
          "lines": 42
        },
        {
          "path": ".\\src\\application\\services\\reporting\\__init__.py",
          "content": "\"\"\"\nApplication Reporting Services\nOrchestrates reporting use cases and business flows\n\"\"\"\n\nfrom .report_generation_service import ReportGenerationService\nfrom .analysis_orchestrator_service import AnalysisOrchestratorService\nfrom .recommendation_service import RecommendationService\n\n__all__ = [\n    'ReportGenerationService',\n    'AnalysisOrchestratorService',\n    'RecommendationService'\n]",
          "lines": 14
        },
        {
          "path": ".\\src\\application\\services\\streaming\\__init__.py",
          "content": "\"\"\"\n🌊 Modern Streaming Services Package - 2025 Edition\n\nReal-time WebSocket and audio streaming capabilities\n\"\"\"\n\nfrom .websocket_manager import (\n    ModernWebSocketManager,\n    WebSocketManager,\n    WebSocketConfig,\n    ConnectionInfo,\n    create_websocket_manager\n)\n\nfrom .audio_streamer import (\n    ModernAudioStreamer,\n    AudioStreamer,\n    AudioStreamConfig,\n    StreamSession,\n    StreamingAudioBuffer,\n    create_audio_streamer\n)\n\n__all__ = [\n    # WebSocket Management\n    \"ModernWebSocketManager\",\n    \"WebSocketManager\",\n    \"WebSocketConfig\", \n    \"ConnectionInfo\",\n    \"create_websocket_manager\",\n    \n    # Audio Streaming\n    \"ModernAudioStreamer\",\n    \"AudioStreamer\",\n    \"AudioStreamConfig\",\n    \"StreamSession\",\n    \"StreamingAudioBuffer\", \n    \"create_audio_streamer\"\n]",
          "lines": 39
        },
        {
          "path": ".\\src\\application\\use_cases\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Use Cases\nApplication use cases and orchestration logic.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\compliance\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Compliance & Security\nSecurity, audit, and compliance implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\compliance\\alerts\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Compliance & Security\nSecurity, audit, and compliance implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\compliance\\checkers\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Compliance & Security\nSecurity, audit, and compliance implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\compliance\\managers\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Compliance & Security\nSecurity, audit, and compliance implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\compliance\\reports\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Compliance & Security\nSecurity, audit, and compliance implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\dashboards\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Module Package\nEnhanced child interaction system with advanced AI capabilities.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\__init__.py",
          "content": "﻿\"\"\"Domain Layer - Pure Business Logic\"\"\"\n\n# Export emotion domain models\nfrom .emotion.models import (\n    EmotionResult, EmotionType, BehavioralIndicator,\n    EmotionContext, ChildEmotionProfile, EmotionAnalytics,\n    EmotionTrend, ParentalReport, EmotionInsight, RiskAssessment, RiskLevel\n)\n\n# Export ESP32 domain models\nfrom .esp32.models import (\n    ESP32Device, DeviceStatus, HardwareState, PowerState,\n    AudioSettings, MicrophoneSettings, AudioVisualization, SpeechRecognition,\n    NetworkConnection, WiFiStatus, ServerConnection, CommunicationProtocol,\n    ChildProfile, ConversationEntry, LearningProgress, SessionData\n)\n\n# Export memory domain models\nfrom .memory.models import (\n    Memory, MemoryType, MemoryImportance, ChildMemoryProfile, ConversationSummary\n)\n\n# Audio Domain Models\nfrom .audio.models import (\n    EmotionalTone,\n    Language,\n    AudioConfig,\n    VoiceProfile\n)\n\n# Audio Domain Services\nfrom .audio.services import (\n    VoiceActivityDetector,\n    AudioProcessor\n)\n\n# Add reporting domain exports\nfrom .reporting.models import (\n    ChildProgress,\n    InteractionAnalysis, \n    ProgressMetrics,\n    ReportPeriod,\n    EmotionDistribution,\n    SkillAnalysis,\n    LLMRecommendation,\n    ActivityRecommendation,\n    InterventionRecommendation,\n    RecommendationBundle,\n    UrgencyLevel\n)\n\nfrom .reporting.services import (\n    ProgressAnalyzer,\n    EmotionAnalyzerService,\n    SkillAnalyzer,\n    BehaviorAnalyzer\n)\n\n# Add Parent Dashboard domain exports\nfrom . import parentdashboard\n\n# Child Domain Components\nfrom .child import (\n    ChildEngagementInsight,\n    ChildStatistics,\n    InteractionMetrics,\n    ChildSearchCriteria,\n    AgeRange,\n    SearchFilters,\n    ChildAnalyticsDomainService,\n    ChildInteractionDomainService,\n    ChildFamilyDomainService\n)",
          "lines": 73
        },
        {
          "path": ".\\src\\domain\\accessibility\\entities\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Entities  \nCore business entities and aggregates.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\accessibility\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\advancedpersonalization\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\advancedprogressanalyzer\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\arvr\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\audio\\models\\__init__.py",
          "content": "\"\"\"\nDomain Audio Models - Voice Interaction\nContains core audio domain models and enums\n\"\"\"\n\nfrom .voice_models import (\n    EmotionalTone,\n    Language,\n    AudioConfig,\n    VoiceProfile\n)\n\n__all__ = [\n    'EmotionalTone',\n    'Language', \n    'AudioConfig',\n    'VoiceProfile'\n]",
          "lines": 18
        },
        {
          "path": ".\\src\\domain\\audio\\services\\__init__.py",
          "content": "\"\"\"\nDomain Audio Services\nCore audio domain services and processors\n\"\"\"\n\nfrom .voice_activity_detector import VoiceActivityDetector\nfrom .audio_processor import AudioProcessor\n\n__all__ = [\n    'VoiceActivityDetector',\n    'AudioProcessor'\n]",
          "lines": 12
        },
        {
          "path": ".\\src\\domain\\child\\__init__.py",
          "content": "\"\"\"\nChild Domain Module\n\nThis module contains all child-related domain logic, entities, and services\nfollowing Clean Architecture principles.\n\"\"\"\n\nfrom src.domain.child.models.child_analytics import (\n    ChildEngagementInsight,\n    ChildStatistics,\n    InteractionMetrics\n)\nfrom src.domain.child.models.child_search_criteria import (\n    ChildSearchCriteria,\n    AgeRange,\n    SearchFilters\n)\nfrom src.domain.child.services.child_analytics_service import ChildAnalyticsDomainService\nfrom src.domain.child.services.child_interaction_service import ChildInteractionDomainService\nfrom src.domain.child.services.child_family_service import ChildFamilyDomainService\n\n__all__ = [\n    # Models\n    \"ChildEngagementInsight\",\n    \"ChildStatistics\", \n    \"InteractionMetrics\",\n    \"ChildSearchCriteria\",\n    \"AgeRange\",\n    \"SearchFilters\",\n    \n    # Services\n    \"ChildAnalyticsDomainService\",\n    \"ChildInteractionDomainService\",\n    \"ChildFamilyDomainService\"\n]",
          "lines": 35
        },
        {
          "path": ".\\src\\domain\\child\\models\\__init__.py",
          "content": "\"\"\"\nChild Domain Models\n\nDomain models for child-related business logic.\n\"\"\"\n\nfrom .child_analytics import (\n    ChildEngagementInsight,\n    ChildStatistics,\n    InteractionMetrics\n)\nfrom .child_search_criteria import (\n    ChildSearchCriteria,\n    AgeRange,\n    SearchFilters\n)\n\n__all__ = [\n    \"ChildEngagementInsight\",\n    \"ChildStatistics\",\n    \"InteractionMetrics\", \n    \"ChildSearchCriteria\",\n    \"AgeRange\",\n    \"SearchFilters\"\n]",
          "lines": 25
        },
        {
          "path": ".\\src\\domain\\child\\services\\__init__.py",
          "content": "\"\"\"\nChild Domain Services\n\nDomain services for child-related business logic operations.\n\"\"\"\n\nfrom .child_analytics_service import ChildAnalyticsDomainService\nfrom .child_interaction_service import ChildInteractionDomainService\nfrom .child_family_service import ChildFamilyDomainService\n\n__all__ = [\n    \"ChildAnalyticsDomainService\",\n    \"ChildInteractionDomainService\", \n    \"ChildFamilyDomainService\"\n]",
          "lines": 15
        },
        {
          "path": ".\\src\\domain\\cleanup\\aggregates\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Layer\nCore business logic and domain models.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\cleanup\\models\\__init__.py",
          "content": "#!/usr/bin/env python3\n\"\"\"\nDomain Models for Data Cleanup\n\"\"\"\n\nfrom .retention_policy import DataRetentionPolicy\nfrom .cleanup_target import CleanupTarget\nfrom .cleanup_report import CleanupReport\n\n__all__ = [\n    \"DataRetentionPolicy\",\n    \"CleanupTarget\", \n    \"CleanupReport\"\n]",
          "lines": 14
        },
        {
          "path": ".\\src\\domain\\emotion\\models\\__init__.py",
          "content": "\"\"\"Emotion domain models.\"\"\"\n\nfrom .emotion_models import (\n    EmotionResult, EmotionType, BehavioralIndicator, \n    EmotionContext, ChildEmotionProfile\n)\nfrom .emotion_analytics import (\n    EmotionAnalytics, EmotionTrend, ParentalReport, \n    EmotionInsight, RiskAssessment, RiskLevel\n)\n\n__all__ = [\n    'EmotionResult',\n    'EmotionType', \n    'BehavioralIndicator',\n    'EmotionContext',\n    'ChildEmotionProfile',\n    'EmotionAnalytics',\n    'EmotionTrend',\n    'ParentalReport',\n    'EmotionInsight',\n    'RiskAssessment',\n    'RiskLevel'\n]",
          "lines": 24
        },
        {
          "path": ".\\src\\domain\\emotion\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\enhancedchildinteraction\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\enhancedparentreport\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\entities\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Entities  \nCore business entities and aggregates.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\esp32\\models\\__init__.py",
          "content": "﻿\"\"\"ESP32 domain models.\"\"\"\n\nfrom .device_models import (\n    ESP32Device, DeviceStatus, HardwareState, PowerState\n)\nfrom .audio_models import (\n    AudioSettings, MicrophoneSettings, AudioVisualization, SpeechRecognition, AudioQuality\n)\nfrom .network_models import (\n    NetworkConnection, WiFiStatus, ServerConnection, CommunicationProtocol\n)\nfrom .child_models import (\n    ChildProfile, ConversationEntry, LearningProgress, SessionData\n)\n\n__all__ = [\n    'ESP32Device',\n    'DeviceStatus', \n    'HardwareState',\n    'PowerState',\n    'AudioSettings',\n    'MicrophoneSettings',\n    'AudioVisualization',\n    'SpeechRecognition',\n    'AudioQuality',\n    'NetworkConnection',\n    'WiFiStatus',\n    'ServerConnection',\n    'CommunicationProtocol',\n    'ChildProfile',\n    'ConversationEntry',\n    'LearningProgress',\n    'SessionData'\n]",
          "lines": 34
        },
        {
          "path": ".\\src\\domain\\exceptions\\__init__.py",
          "content": "\"\"\"\nDomain Exceptions Package\nتنظيم وتصدير جميع exception classes\n\"\"\"\n\n# Base exceptions\nfrom .base import (\n    ErrorSeverity,\n    ErrorCategory,\n    ErrorContext,\n    AITeddyBearException\n)\n\n# Child safety exceptions\nfrom .child_safety import (\n    ChildSafetyException,\n    InappropriateContentException,\n    ParentalConsentRequiredException,\n    AgeInappropriateException\n)\n\n# Validation exceptions\nfrom .validation import (\n    ValidationException,\n    InvalidInputException,\n    MissingRequiredFieldException\n)\n\n# Security exceptions\nfrom .security import (\n    SecurityException,\n    AuthenticationException,\n    AuthorizationException,\n    TokenExpiredException\n)\n\n# Infrastructure exceptions\nfrom .infrastructure import (\n    InfrastructureException,\n    DatabaseException,\n    ExternalServiceException,\n    CircuitBreakerOpenException\n)\n\n# Business logic exceptions\nfrom .business_logic import (\n    BusinessLogicException,\n    ResourceNotFoundException,\n    DuplicateResourceException,\n    QuotaExceededException\n)\n\n# Performance exceptions\nfrom .performance import (\n    PerformanceException,\n    TimeoutException,\n    RateLimitException\n)\n\n__all__ = [\n    # Base\n    \"ErrorSeverity\",\n    \"ErrorCategory\",\n    \"ErrorContext\",\n    \"AITeddyBearException\",\n    \n    # Child safety\n    \"ChildSafetyException\",\n    \"InappropriateContentException\",\n    \"ParentalConsentRequiredException\",\n    \"AgeInappropriateException\",\n    \n    # Validation\n    \"ValidationException\",\n    \"InvalidInputException\",\n    \"MissingRequiredFieldException\",\n    \n    # Security\n    \"SecurityException\",\n    \"AuthenticationException\",\n    \"AuthorizationException\",\n    \"TokenExpiredException\",\n    \n    # Infrastructure\n    \"InfrastructureException\",\n    \"DatabaseException\",\n    \"ExternalServiceException\",\n    \"CircuitBreakerOpenException\",\n    \n    # Business logic\n    \"BusinessLogicException\",\n    \"ResourceNotFoundException\",\n    \"DuplicateResourceException\",\n    \"QuotaExceededException\",\n    \n    # Performance\n    \"PerformanceException\",\n    \"TimeoutException\",\n    \"RateLimitException\"\n]",
          "lines": 100
        },
        {
          "path": ".\\src\\domain\\family\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Layer\nCore business logic and domain models.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\memory\\models\\__init__.py",
          "content": "\"\"\"Memory Domain Models\"\"\"\n\nfrom .memory_models import (\n    MemoryType, MemoryImportance, Memory\n)\nfrom .profile_models import (\n    ChildMemoryProfile, ConversationSummary\n)\n\n__all__ = [\n    'MemoryType',\n    'MemoryImportance', \n    'Memory',\n    'ChildMemoryProfile',\n    'ConversationSummary'\n]",
          "lines": 16
        },
        {
          "path": ".\\src\\domain\\memory\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\moderation\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\notification\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\parentdashboard\\__init__.py",
          "content": "\"\"\"\nParent Dashboard Domain Layer\n============================\n\nThis module contains all domain models, value objects, and domain services\nfor the Parent Dashboard functionality.\n\nExports:\n- Models: AlertType, ParentalControl, AnalyticsData, etc.\n- Services: DashboardDomainService, AccessControlService, etc.\n\"\"\"\n\nfrom .models.alert_models import (\n    AlertType,\n    Alert,\n    AlertSeverity\n)\n\nfrom .models.control_models import (\n    AccessScheduleType,\n    ParentalControl,\n    AccessSchedule\n)\n\nfrom .models.analytics_models import (\n    AnalyticsData,\n    ConversationLog,\n    LearningProgress,\n    UsageMetrics\n)\n\nfrom .models.user_models import (\n    ParentUser,\n    ChildProfile,\n    ConversationLogEntry\n)\n\nfrom .services.analytics_domain_service import AnalyticsDomainService\nfrom .services.access_control_service import AccessControlService\nfrom .services.content_analysis_service import ContentAnalysisService\n\n__all__ = [\n    # Models\n    'AlertType', 'Alert', 'AlertSeverity',\n    'AccessScheduleType', 'ParentalControl', 'AccessSchedule',\n    'AnalyticsData', 'ConversationLog', 'LearningProgress', 'UsageMetrics',\n    'ParentUser', 'ChildProfile', 'ConversationLogEntry',\n    \n    # Services\n    'AnalyticsDomainService',\n    'AccessControlService', \n    'ContentAnalysisService'\n]",
          "lines": 53
        },
        {
          "path": ".\\src\\domain\\parentdashboard\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\parentreport\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\progressanalyzer\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\reporting\\models\\__init__.py",
          "content": "\"\"\"\nDomain Reporting Models\nContains core reporting domain models and value objects\n\"\"\"\n\nfrom .report_models import (\n    ChildProgress,\n    InteractionAnalysis,\n    ProgressMetrics,\n    ReportPeriod,\n    EmotionDistribution,\n    SkillAnalysis\n)\n\nfrom .recommendation_models import (\n    LLMRecommendation,\n    InterventionRecommendation,\n    ActivityRecommendation,\n    UrgencyLevel\n)\n\n__all__ = [\n    'ChildProgress',\n    'InteractionAnalysis',\n    'ProgressMetrics',\n    'ReportPeriod',\n    'EmotionDistribution',\n    'SkillAnalysis',\n    'LLMRecommendation',\n    'InterventionRecommendation',\n    'ActivityRecommendation',\n    'UrgencyLevel'\n]",
          "lines": 33
        },
        {
          "path": ".\\src\\domain\\reporting\\services\\__init__.py",
          "content": "\"\"\"\nDomain Reporting Services\nCore reporting domain services and analyzers\n\"\"\"\n\nfrom .progress_analyzer import ProgressAnalyzer\nfrom .emotion_analyzer_service import EmotionAnalyzerService\nfrom .skill_analyzer import SkillAnalyzer\nfrom .behavior_analyzer import BehaviorAnalyzer\n\n__all__ = [\n    'ProgressAnalyzer',\n    'EmotionAnalyzerService',\n    'SkillAnalyzer', \n    'BehaviorAnalyzer'\n]",
          "lines": 16
        },
        {
          "path": ".\\src\\domain\\repositories\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Layer\nCore business logic and domain models.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Services\nCore business logic and domain services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\stories\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Layer\nCore business logic and domain models.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\streaming\\aggregates\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Layer\nCore business logic and domain models.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\streaming\\entities\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Entities  \nCore business entities and aggregates.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\domain\\value_objects\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Domain Value Objects\nValue objects for domain-driven design implementation.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\edge\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Module Package\nEnhanced child interaction system with advanced AI capabilities.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\__init__.py",
          "content": "﻿\"\"\"Infrastructure Layer - External Services and Databases\"\"\"\n\n# Export emotion infrastructure components\nfrom .emotion import (\n    TextEmotionAnalyzer, AudioEmotionAnalyzer, EmotionRepository\n)\n\n# Export ESP32 infrastructure components  \nfrom .esp32 import (\n    HardwareSimulator, AudioDriver, NetworkAdapter, GUIComponents\n)\n\n# Export memory infrastructure\nfrom .memory import (\n    VectorMemoryStore, MemoryRepository\n)\n\n# Audio Infrastructure Clients\nfrom .audio.clients import (\n    ElevenLabsClient,\n    AzureSpeechClient,\n    WhisperClient,\n    OpenAISpeechClient\n)\n\n# Add reporting infrastructure\nfrom .reporting import (\n    ChartGenerator,\n    PDFGenerator,\n    ReportRepository\n)\n\n# Add Parent Dashboard infrastructure services  \nfrom . import parentdashboard\n\n# Child Infrastructure Components\nfrom .child import (\n    ChildSQLiteRepositoryRefactored,\n    ChildBackupService\n)",
          "lines": 40
        },
        {
          "path": ".\\src\\infrastructure\\accessibility\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\advancedpersonalization\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\advancedprogressanalyzer\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\ai\\__init__.py",
          "content": "\"\"\"\nAI Infrastructure Components for AI Teddy Bear Project.\n\nThis module provides distributed AI processing capabilities using Ray Serve,\nenabling scalable, parallel processing of conversation requests across\nmultiple workers and services.\n\nAI Team Implementation - Task 11\n\"\"\"\n\nfrom .distributed_processor import (\n    DistributedAIProcessor,\n    ConversationRequest,\n    ConversationResponse,\n    ChildContext,\n    ProcessingPriority,\n    AIServiceType,\n    ProcessingMetrics,\n    MockAIServices\n)\n\n__all__ = [\n    'DistributedAIProcessor',\n    'ConversationRequest',\n    'ConversationResponse',\n    'ChildContext',\n    'ProcessingPriority',\n    'AIServiceType',\n    'ProcessingMetrics',\n    'MockAIServices'\n]",
          "lines": 31
        },
        {
          "path": ".\\src\\infrastructure\\arvr\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\audio\\__init__.py",
          "content": "\"\"\"Enhanced Audio System Module.\n\nThis module provides a complete audio processing system with capabilities for:\n- Audio recording and playback with modern format support\n- Text-to-speech conversion with emotional context\n- Multi-format audio file I/O operations (WAV, MP3, OPUS, OGG, FLAC)\n- Advanced audio signal processing\n- Session management and performance monitoring\n- Cloud integration and backup capabilities\n\nThe system follows clean architecture principles with clear separation of concerns\nand robust error handling throughout.\n\nExample usage:\n    from src.audio import EnhancedAudioManager, create_child_safe_config\n    \n    # Create audio manager\n    config = create_child_safe_config()\n    audio_manager = EnhancedAudioManager(config)\n    \n    # Start session\n    session_id = audio_manager.start_session(\"child_001\")\n    \n    # Record audio\n    audio_data, metadata = audio_manager.record_audio(duration=5, session_id=session_id)\n    \n    # Play audio\n    audio_manager.play_audio(audio_data=audio_data, volume=0.7)\n    \n    # Text-to-speech\n    audio_manager.speak(\"مرحباً! كيف حالك اليوم؟\", language=\"ar\", session_id=session_id)\n    \n    # Save audio in multiple formats\n    audio_manager.save_audio(audio_data, \"recording.mp3\", format=AudioFormatType.MP3)\n    \n    # Cleanup\n    audio_manager.end_session(session_id)\n    audio_manager.cleanup()\n\"\"\"\ntry:\n    import structlog\n    logger = structlog.get_logger(__name__)\nexcept ImportError:\n    import logging\n    logger = logging.getLogger(__name__)\n\n\n# Import main enhanced audio manager\ntry:\n    from .audio_manager import (\n        EnhancedAudioManager,\n        AudioSystemError,\n        create_audio_manager,\n        get_default_config,\n        create_child_safe_config,\n        create_high_quality_config,\n        create_low_latency_config,\n        get_audio_manager,\n        shutdown_audio_manager\n    )\n    \n    # Import domain models\n    from ...domain.audio.models import (\n        AudioSession,\n        AudioSessionType,\n        AudioQualityMode,\n        AudioFormatType,\n        AudioSystemConfig\n    )\n    \n    # Alias for backward compatibility\n    AudioManager = EnhancedAudioManager\n    ENHANCED_AUDIO_AVAILABLE = True\nexcept Exception as e:\n    logger.warning(f\"⚠️ Enhanced audio manager not available: {e}\")\n    ENHANCED_AUDIO_AVAILABLE = False\n\n# Modern audio manager removed - use EnhancedAudioManager directly\nMODERN_AUDIO_AVAILABLE = False\n\n# Import audio processing components (optional)\ntry:\n    from .audio_processing import (\n        AudioProcessor,\n        process_audio,\n        normalize_volume,\n        detect_silence,\n        trim_silence,\n        get_audio_stats\n    )\n    AUDIO_PROCESSING_AVAILABLE = True\nexcept ImportError:\n    AUDIO_PROCESSING_AVAILABLE = False\n\n# Import audio I/O components (optional)\ntry:\n    from .audio_io import (\n        AudioIO,\n        AudioFormat,\n        AudioQuality,\n        AudioMetadata,\n        cleanup_temp_files,\n        get_audio_files,\n        get_audio_duration,\n        get_audio_format\n    )\n    AUDIO_IO_AVAILABLE = True\nexcept ImportError:\n    AUDIO_IO_AVAILABLE = False\n\n# Import TTS components (optional)\ntry:\n    from .tts_playback import (\n        TTSPlayback,\n        cleanup_tts_cache\n    )\n    TTS_AVAILABLE = True\nexcept ImportError:\n    TTS_AVAILABLE = False\n\n# Import state management (optional)\ntry:\n    from .state_manager import (\n        state_manager,\n        AudioState,\n        StateChangeEvent,\n        StateManager\n    )\n    STATE_MANAGER_AVAILABLE = True\nexcept ImportError:\n    STATE_MANAGER_AVAILABLE = False\n\n# Import emotion analysis (optional)\ntry:\n    from .hume_emotion_analyzer import (\n        HumeSpeechEmotionAnalyzer,\n        ChildVoiceEmotion\n    )\n    EMOTION_ANALYSIS_AVAILABLE = True\nexcept ImportError:\n    EMOTION_ANALYSIS_AVAILABLE = False\n\n\n# Export main classes and functions\n__all__ = []\n\n# Enhanced Audio Manager exports\nif ENHANCED_AUDIO_AVAILABLE:\n    __all__.extend([\n        'EnhancedAudioManager',\n        'AudioManager',\n        'AudioSystemConfig',\n        'AudioSessionType',\n        'AudioQualityMode',\n        'AudioFormatType',\n        'AudioSession',\n        'AudioSystemError',\n        'create_audio_manager',\n        'create_child_safe_config',\n        'create_high_quality_config',\n        'create_low_latency_config',\n        'get_audio_manager',\n        'shutdown_audio_manager'\n    ])\n\n# Modern Audio Manager exports removed - no longer needed\n\n# Audio processing exports\nif AUDIO_PROCESSING_AVAILABLE:\n    __all__.extend([\n        'AudioProcessor',\n        'process_audio',\n        'normalize_volume',\n        'detect_silence',\n        'trim_silence',\n        'get_audio_stats'\n    ])\n\n# Audio I/O exports\nif AUDIO_IO_AVAILABLE:\n    __all__.extend([\n        'AudioIO',\n        'AudioFormat',\n        'AudioQuality', \n        'AudioMetadata',\n        'cleanup_temp_files',\n        'get_audio_files',\n        'get_audio_duration',\n        'get_audio_format'\n    ])\n\n# TTS exports\nif TTS_AVAILABLE:\n    __all__.extend([\n        'TTSPlayback',\n        'cleanup_tts_cache'\n    ])\n\n# State management exports\nif STATE_MANAGER_AVAILABLE:\n    __all__.extend([\n        'state_manager',\n        'AudioState',\n        'StateChangeEvent',\n        'StateManager'\n    ])\n\n# Emotion analysis exports\nif EMOTION_ANALYSIS_AVAILABLE:\n    __all__.extend([\n        'HumeSpeechEmotionAnalyzer',\n        'ChildVoiceEmotion'\n    ])\n\n\n# Convenience functions\n\ndef get_system_info() -> dict:\n    \"\"\"Get information about available audio system components.\"\"\"\n    return {\n        \"enhanced_audio_available\": ENHANCED_AUDIO_AVAILABLE,\n        \"modern_audio_available\": MODERN_AUDIO_AVAILABLE,\n        \"audio_processing_available\": AUDIO_PROCESSING_AVAILABLE,\n        \"audio_io_available\": AUDIO_IO_AVAILABLE,\n        \"tts_available\": TTS_AVAILABLE,\n        \"state_manager_available\": STATE_MANAGER_AVAILABLE,\n        \"emotion_analysis_available\": EMOTION_ANALYSIS_AVAILABLE\n    }\n\n\ndef create_default_audio_manager():\n    \"\"\"Create default audio manager with best available implementation.\"\"\"\n    if ENHANCED_AUDIO_AVAILABLE:\n        config = create_child_safe_config()\n        return EnhancedAudioManager(config)\n    else:\n        raise ImportError(\"No audio manager implementation available\")\n\n\n# Modern audio manager creation removed - use EnhancedAudioManager directly\n\n\n# For backward compatibility with existing code\nif ENHANCED_AUDIO_AVAILABLE:\n    # Create global instance (use with caution in production)\n    _default_audio_manager = None\n    \n    def get_default_audio_manager():\n        \"\"\"Get or create default global audio manager instance.\"\"\"\n        global _default_audio_manager\n        if _default_audio_manager is None:\n            _default_audio_manager = create_default_audio_manager()\n        return _default_audio_manager\n    \n    def shutdown_default_audio_manager():\n        \"\"\"Shutdown and cleanup default global audio manager.\"\"\"\n        global _default_audio_manager\n        if _default_audio_manager is not None:\n            _default_audio_manager.cleanup()\n            _default_audio_manager = None\n    \n    # Add to exports\n    __all__.extend(['get_default_audio_manager', 'shutdown_default_audio_manager'])\n\n\n# Version info\n__version__ = '2.0.0'\n__author__ = 'AI Teddy Bear Team'\n__license__ = 'MIT'\n\n# Module initialization message\ndef _print_init_status():\n    \"\"\"Print module initialization status.\"\"\"\n    available_components = []\n    if ENHANCED_AUDIO_AVAILABLE:\n        available_components.append(\"Enhanced Audio Manager\")\n    # Modern Audio Manager removed\n    if AUDIO_PROCESSING_AVAILABLE:\n        available_components.append(\"Audio Processing\")\n    if EMOTION_ANALYSIS_AVAILABLE:\n        available_components.append(\"Emotion Analysis\")\n    \n    if available_components:\n        print(f\"🎵 Audio System v{__version__} - Available: {', '.join(available_components)}\")\n    else:\n        print(f\"⚠️ Audio System v{__version__} - Limited functionality (no components available)\")\n\n# Print status only if running directly\nif __name__ != \"__main__\":\n    _print_init_status()",
          "lines": 290
        },
        {
          "path": ".\\src\\infrastructure\\audio\\cli\\__init__.py",
          "content": "\"\"\"Command-line interface package for the audio system.\n\nThis package provides CLI commands for:\n- Audio recording\n- Audio processing\n- Text-to-speech conversion\n\nExample usage:\n    # Record audio\n    $ audio-record -d 10 -o recording.wav\n\n    # Process audio\n    $ audio-process input.wav --normalize --trim\n\n    # Text-to-speech\n    $ audio-tts \"Hello, world!\" --play\n\"\"\"\n\nfrom . import record\nfrom . import process\nfrom . import tts\n\n__all__ = ['record', 'process', 'tts']\n\n# Version info\n__version__ = '1.0.0'\n\n# Command mapping\ncommands = {\n    'record': record.main,\n    'process': process.main,\n    'tts': tts.main,\n}",
          "lines": 33
        },
        {
          "path": ".\\src\\infrastructure\\audio\\clients\\__init__.py",
          "content": "\"\"\"\nInfrastructure Audio Clients\nExternal service integrations for audio processing\n\"\"\"\n\nfrom .elevenlabs_client import ElevenLabsClient\nfrom .azure_speech_client import AzureSpeechClient\nfrom .whisper_client import WhisperClient\nfrom .openai_speech_client import OpenAISpeechClient\n\n__all__ = [\n    'ElevenLabsClient',\n    'AzureSpeechClient', \n    'WhisperClient',\n    'OpenAISpeechClient'\n]",
          "lines": 16
        },
        {
          "path": ".\\src\\infrastructure\\caching\\__init__.py",
          "content": "# Cache module exports for AI Teddy Bear project\n\ntry:\n    from .simple_cache_service import SimpleCacheService\n    SIMPLE_CACHE_AVAILABLE = True\nexcept ImportError:\n    SIMPLE_CACHE_AVAILABLE = False\n\ntry:\n    from .cache_service import CacheService\n    CACHE_SERVICE_AVAILABLE = True\nexcept ImportError:\n    CACHE_SERVICE_AVAILABLE = False\n\ntry:\n    from .multi_layer_cache import (\n        MultiLayerCache,\n        CacheConfig,\n        CacheLayer,\n        CachePolicy,\n        ContentType,\n        CacheMetrics,\n        CacheEntry,\n        L1MemoryCache,\n        L2RedisCache,\n        L3CDNCache\n    )\n    MULTI_LAYER_CACHE_AVAILABLE = True\nexcept ImportError:\n    MULTI_LAYER_CACHE_AVAILABLE = False\n\ntry:\n    from .cache_integration_service import (\n        CacheIntegrationService,\n        CacheStrategy,\n        create_cache_integration_service\n    )\n    CACHE_INTEGRATION_AVAILABLE = True\nexcept ImportError:\n    CACHE_INTEGRATION_AVAILABLE = False\n\n__all__ = [\n    # Simple cache\n    \"SimpleCacheService\",\n    \n    # Basic cache service\n    \"CacheService\",\n    \n    # Multi-layer cache system\n    \"MultiLayerCache\",\n    \"CacheConfig\",\n    \"CacheLayer\",\n    \"CachePolicy\", \n    \"ContentType\",\n    \"CacheMetrics\",\n    \"CacheEntry\",\n    \"L1MemoryCache\",\n    \"L2RedisCache\",\n    \"L3CDNCache\",\n    \n    # Integration service\n    \"CacheIntegrationService\",\n    \"CacheStrategy\",\n    \"create_cache_integration_service\",\n    \n    # Availability flags\n    \"SIMPLE_CACHE_AVAILABLE\",\n    \"CACHE_SERVICE_AVAILABLE\",\n    \"MULTI_LAYER_CACHE_AVAILABLE\",\n    \"CACHE_INTEGRATION_AVAILABLE\"\n]",
          "lines": 71
        },
        {
          "path": ".\\src\\infrastructure\\child\\__init__.py",
          "content": "\"\"\"\nChild Infrastructure Layer\n\nInfrastructure layer services for child data persistence and external services.\n\"\"\"\n\nfrom .sqlite_repository import ChildSQLiteRepositoryRefactored\nfrom .backup_service import ChildBackupService\n\n__all__ = [\n    \"ChildSQLiteRepositoryRefactored\",\n    \"ChildBackupService\"\n]",
          "lines": 13
        },
        {
          "path": ".\\src\\infrastructure\\database\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\decorators\\__init__.py",
          "content": "\"\"\"\nException Handler Decorators\n\"\"\"\n\nfrom .exception_handler import (\n    handle_exceptions,\n    with_retry,\n    with_circuit_breaker,\n    child_safe,\n    validate_input,\n    authenticated,\n    RetryConfig\n)\n\n__all__ = [\n    'handle_exceptions',\n    'with_retry',\n    'with_circuit_breaker',\n    'child_safe',\n    'validate_input',\n    'authenticated',\n    'RetryConfig'\n]",
          "lines": 23
        },
        {
          "path": ".\\src\\infrastructure\\emotion\\__init__.py",
          "content": "﻿\"\"\"Infrastructure emotion components.\"\"\"\n\nfrom .text_emotion_analyzer import TextEmotionAnalyzer\nfrom .audio_emotion_analyzer import AudioEmotionAnalyzer\nfrom .emotion_repository import EmotionRepository\n\n__all__ = [\n    'TextEmotionAnalyzer',\n    'AudioEmotionAnalyzer', \n    'EmotionRepository'\n]",
          "lines": 11
        },
        {
          "path": ".\\src\\infrastructure\\emotion\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\enhancedchildinteraction\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\enhancedparentreport\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\esp32\\__init__.py",
          "content": "﻿\"\"\"ESP32 infrastructure components.\"\"\"\n\nfrom .hardware_simulator import HardwareSimulator\nfrom .audio_driver import AudioDriver\nfrom .network_adapter import NetworkAdapter\nfrom .gui_components import GUIComponents\n\n__all__ = [\n    'HardwareSimulator',\n    'AudioDriver',\n    'NetworkAdapter',\n    'GUIComponents'\n]",
          "lines": 13
        },
        {
          "path": ".\\src\\infrastructure\\exception_handling\\__init__.py",
          "content": "\"\"\"\nException Handling Infrastructure\n\"\"\"\n\nfrom .global_handler import (\n    GlobalExceptionHandler,\n    CircuitBreaker,\n    CircuitState,\n    CircuitStats,\n    get_global_exception_handler,\n    handle_exception,\n    handle_exception_sync\n)\n\n__all__ = [\n    'GlobalExceptionHandler',\n    'CircuitBreaker',\n    'CircuitState',\n    'CircuitStats',\n    'get_global_exception_handler',\n    'handle_exception',\n    'handle_exception_sync'\n]",
          "lines": 23
        },
        {
          "path": ".\\src\\infrastructure\\graphql\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\memory\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\messaging\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\middleware\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\moderation\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\notification\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\observability\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\parentdashboard\\__init__.py",
          "content": "\"\"\"\nParent Dashboard Infrastructure Layer\n====================================\n\nInfrastructure layer for Parent Dashboard functionality.\nHandles external services, caching, notifications, charts, and data persistence.\n\nExports:\n- CacheService: Caching implementations\n- ChartService: Chart generation\n- NotificationService: Email/SMS notifications  \n- ExportService: Data export functionality\n\"\"\"\n\nfrom .cache_service import CacheService\nfrom .chart_service import ChartGenerationService\nfrom .notification_service import NotificationService\nfrom .export_service import ExportService\n\n__all__ = [\n    'CacheService',\n    'ChartGenerationService',\n    'NotificationService',\n    'ExportService'\n]",
          "lines": 25
        },
        {
          "path": ".\\src\\infrastructure\\parentdashboard\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\parentreport\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\persistence\\repositories\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\processing\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\progressanalyzer\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\reporting\\__init__.py",
          "content": "\"\"\"\nInfrastructure Reporting Components\nExternal service integrations for reporting functionality\n\"\"\"\n\nfrom .chart_generator import ChartGenerator\nfrom .pdf_generator import PDFGenerator\nfrom .report_repository import ReportRepository\n\n__all__ = [\n    'ChartGenerator',\n    'PDFGenerator',\n    'ReportRepository'\n]",
          "lines": 14
        },
        {
          "path": ".\\src\\infrastructure\\security\\__init__.py",
          "content": "from .encryption import EncryptionService\nfrom .homomorphic_encryption import HomomorphicEncryption, HEConfig, ProcessingMode\n\n__all__ = [\n    'EncryptionService',\n    'HomomorphicEncryption', \n    'HEConfig',\n    'ProcessingMode'\n]",
          "lines": 9
        },
        {
          "path": ".\\src\\infrastructure\\services\\data\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\services\\external\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\services\\monitoring\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Layer\nExternal services, adapters, and technical implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\infrastructure\\streaming\\persistence\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Infrastructure Persistence\nDatabase adapters and persistence implementations.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\components\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\__init__.py",
          "content": "# ===================================================================\n# 🧸 AI Teddy Bear - Continuous Learning Module\n# Enterprise ML Continuous Learning & Model Improvement\n# ML Team Lead: Senior ML Engineer\n# Date: January 2025\n# ===================================================================\n\n\"\"\"\nAI Teddy Bear Continuous Learning System\n\nThis module provides enterprise-grade continuous learning capabilities for the\nAI Teddy Bear platform, enabling automatic model improvement based on real-world\nfeedback and performance data.\n\nKey Components:\n- ContinuousLearningSystem: Main orchestrator for the learning pipeline\n- FeedbackCollector: Collects and processes user feedback and interaction data  \n- ModelEvaluator: Evaluates current model performance and identifies improvement areas\n- TrainingPipeline: Manages automated model training and enhancement\n- DeploymentManager: Handles safe model deployment with A/B testing\n- PerformanceMonitor: Real-time monitoring and alerting for deployed models\n\nFeatures:\n- Automated feedback collection from multiple sources\n- Intelligent model performance evaluation\n- Safe and gradual model deployment strategies\n- Real-time performance monitoring and alerting\n- Comprehensive A/B testing capabilities\n- Child safety-first approach with COPPA compliance\n- Enterprise scalability and reliability\n\nUsage:\n    from src.ml.continuous_learning import ContinuousLearningSystem\n    \n    # Initialize the continuous learning system\n    learning_system = ContinuousLearningSystem()\n    \n    # Start continuous learning\n    await learning_system.start_continuous_learning()\n\"\"\"\n\nfrom .continuous_learning import (\n    ContinuousLearningSystem,\n    LearningStrategy,\n    ModelPerformanceThreshold,\n    LearningMetrics,\n    ModelVersion,\n    LearningInsight\n)\n\nfrom .feedback.feedback_collector import (\n    FeedbackCollector,\n    FeedbackType,\n    FeedbackData,\n    InteractionFeedback\n)\n\nfrom .evaluation.model_evaluator import (\n    ModelEvaluator,\n    EvaluationMetric,\n    ModelEvaluationResult,\n    PerformanceTrend\n)\n\nfrom .training.training_pipeline import (\n    TrainingPipeline,\n    TrainingStrategy,\n    ModelType,\n    TrainingConfig,\n    TrainingResult\n)\n\nfrom .deployment.deployment_manager import (\n    DeploymentManager,\n    DeploymentStrategy,\n    DeploymentStatus,\n    DeploymentConfig,\n    DeploymentResult\n)\n\nfrom .monitoring.performance_monitor import (\n    PerformanceMonitor,\n    AlertSeverity,\n    MetricType,\n    PerformanceAlert,\n    MetricSnapshot\n)\n\nfrom .continuous_learning_demo import ContinuousLearningDemo\n\n__version__ = \"1.0.0\"\n__author__ = \"AI Teddy Bear ML Team\"\n__email__ = \"ml-team@ai-teddy-bear.com\"\n\n__all__ = [\n    # Main system\n    \"ContinuousLearningSystem\",\n    \"LearningStrategy\", \n    \"ModelPerformanceThreshold\",\n    \"LearningMetrics\",\n    \"ModelVersion\",\n    \"LearningInsight\",\n    \n    # Feedback collection\n    \"FeedbackCollector\",\n    \"FeedbackType\",\n    \"FeedbackData\", \n    \"InteractionFeedback\",\n    \n    # Model evaluation\n    \"ModelEvaluator\",\n    \"EvaluationMetric\",\n    \"ModelEvaluationResult\",\n    \"PerformanceTrend\",\n    \n    # Training pipeline\n    \"TrainingPipeline\",\n    \"TrainingStrategy\",\n    \"ModelType\",\n    \"TrainingConfig\",\n    \"TrainingResult\",\n    \n    # Deployment management\n    \"DeploymentManager\",\n    \"DeploymentStrategy\", \n    \"DeploymentStatus\",\n    \"DeploymentConfig\",\n    \"DeploymentResult\",\n    \n    # Performance monitoring\n    \"PerformanceMonitor\",\n    \"AlertSeverity\",\n    \"MetricType\",\n    \"PerformanceAlert\",\n    \"MetricSnapshot\",\n    \n    # Demo system\n    \"ContinuousLearningDemo\"\n]\n\n# Module metadata\n__module_info__ = {\n    \"name\": \"Continuous Learning System\",\n    \"description\": \"Enterprise ML continuous learning and model improvement pipeline\",\n    \"version\": __version__,\n    \"components\": len(__all__),\n    \"safety_certified\": True,\n    \"coppa_compliant\": True,\n    \"enterprise_ready\": True,\n    \"scalability\": \"Fortune 500+\",\n    \"supported_age_groups\": [\"3-6\", \"7-9\", \"10-12\"],\n    \"supported_languages\": [\"english\", \"arabic\"],\n    \"deployment_strategies\": [\"canary\", \"blue_green\", \"rolling\", \"a_b_test\"],\n    \"monitoring_capabilities\": [\n        \"real_time_metrics\",\n        \"anomaly_detection\", \n        \"automated_alerting\",\n        \"performance_trending\",\n        \"safety_monitoring\"\n    ],\n    \"training_strategies\": [\n        \"incremental_learning\",\n        \"full_retraining\",\n        \"transfer_learning\", \n        \"federated_learning\",\n        \"multi_task_learning\"\n    ]\n}\n\n\ndef get_system_info() -> dict:\n    \"\"\"Get comprehensive system information\"\"\"\n    return __module_info__\n\n\ndef get_version() -> str:\n    \"\"\"Get the current version of the continuous learning system\"\"\"\n    return __version__\n\n\ndef get_supported_features() -> list:\n    \"\"\"Get list of supported features\"\"\"\n    return [\n        \"Automated feedback collection\",\n        \"Real-time model evaluation\", \n        \"Safe model deployment\",\n        \"A/B testing capabilities\",\n        \"Performance monitoring\",\n        \"Anomaly detection\",\n        \"Safety-first approach\",\n        \"COPPA compliance\",\n        \"Enterprise scalability\",\n        \"Multi-language support\",\n        \"Age-appropriate content\",\n        \"Parent dashboard integration\"\n    ]\n\n\n# System health check\ndef check_system_health() -> dict:\n    \"\"\"Perform basic system health check\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": __version__,\n        \"components_available\": len(__all__),\n        \"safety_systems\": \"active\",\n        \"compliance_status\": \"coppa_compliant\",\n        \"last_check\": \"2025-01-20T10:30:00Z\"\n    }",
          "lines": 209
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\deployment\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\evaluation\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\feedback\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\monitoring\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\continuous_learning\\training\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\deployment\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Machine Learning\nAI models, training pipelines, and ML services.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\ml\\pipelines\\__init__.py",
          "content": "# ===================================================================\n# 🤖 AI Teddy Bear - ML Pipelines Module\n# Enterprise-Grade AI Pipeline Components\n# AI Team Lead: Senior AI Engineer\n# Date: January 2025\n# ===================================================================\n\nfrom .child_interaction_pipeline import (\n    child_interaction_pipeline,\n    deploy_child_interaction_pipeline,\n    preprocess_child_audio,\n    generate_safe_response,\n    ChildSafetyChecker,\n    SafetyResult\n)\n\n__all__ = [\n    'child_interaction_pipeline',\n    'deploy_child_interaction_pipeline', \n    'preprocess_child_audio',\n    'generate_safe_response',\n    'ChildSafetyChecker',\n    'SafetyResult'\n]\n\n__version__ = \"1.0.0\"",
          "lines": 26
        },
        {
          "path": ".\\src\\presentation\\__init__.py",
          "content": "\"\"\"Presentation Layer - API and User Interface\"\"\"",
          "lines": 1
        },
        {
          "path": ".\\src\\presentation\\api\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Presentation Layer  \nWeb APIs, UI components, and external interfaces.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\presentation\\api\\graphql\\__init__.py",
          "content": "# GraphQL Federation module exports for AI Teddy Bear project\n\ntry:\n    from .federation_gateway import (\n        GraphQLFederationGateway,\n        FederationConfig,\n        ServiceConfig,\n        create_default_federation_config,\n        create_federation_gateway\n    )\n    FEDERATION_GATEWAY_AVAILABLE = True\nexcept ImportError:\n    FEDERATION_GATEWAY_AVAILABLE = False\n\ntry:\n    from .authentication import (\n        AuthenticationService,\n        AuthConfig,\n        User,\n        UserRole,\n        Permission,\n        APIKey,\n        GraphQLAuthenticator,\n        create_auth_config,\n        create_auth_service\n    )\n    AUTHENTICATION_AVAILABLE = True\nexcept ImportError:\n    AUTHENTICATION_AVAILABLE = False\n\ntry:\n    from .service_resolvers import (\n        Child,\n        Conversation,\n        AIProfile,\n        EmotionSnapshot,\n        LearningProgress,\n        ChildServiceResolvers,\n        AIServiceResolvers,\n        MonitoringServiceResolvers,\n        SafetyServiceResolvers,\n        EntityResolver,\n        schema\n    )\n    SERVICE_RESOLVERS_AVAILABLE = True\nexcept ImportError:\n    SERVICE_RESOLVERS_AVAILABLE = False\n\ntry:\n    from .performance_monitor import (\n        GraphQLPerformanceMonitor,\n        QueryMetrics,\n        ServiceMetrics,\n        PerformanceAlert,\n        QueryComplexityAnalyzer,\n        create_performance_monitor\n    )\n    PERFORMANCE_MONITOR_AVAILABLE = True\nexcept ImportError:\n    PERFORMANCE_MONITOR_AVAILABLE = False\n\n__all__ = [\n    # Federation Gateway\n    \"GraphQLFederationGateway\",\n    \"FederationConfig\", \n    \"ServiceConfig\",\n    \"create_default_federation_config\",\n    \"create_federation_gateway\",\n    \n    # Authentication\n    \"AuthenticationService\",\n    \"AuthConfig\",\n    \"User\",\n    \"UserRole\",\n    \"Permission\",\n    \"APIKey\",\n    \"GraphQLAuthenticator\",\n    \"create_auth_config\",\n    \"create_auth_service\",\n    \n    # Service Resolvers\n    \"Child\",\n    \"Conversation\",\n    \"AIProfile\",\n    \"EmotionSnapshot\",\n    \"LearningProgress\",\n    \"ChildServiceResolvers\",\n    \"AIServiceResolvers\",\n    \"MonitoringServiceResolvers\",\n    \"SafetyServiceResolvers\",\n    \"EntityResolver\",\n    \"schema\",\n    \n    # Performance Monitoring\n    \"GraphQLPerformanceMonitor\",\n    \"QueryMetrics\",\n    \"ServiceMetrics\",\n    \"PerformanceAlert\",\n    \"QueryComplexityAnalyzer\",\n    \"create_performance_monitor\",\n    \n    # Availability flags\n    \"FEDERATION_GATEWAY_AVAILABLE\",\n    \"AUTHENTICATION_AVAILABLE\",\n    \"SERVICE_RESOLVERS_AVAILABLE\",\n    \"PERFORMANCE_MONITOR_AVAILABLE\"\n]",
          "lines": 107
        },
        {
          "path": ".\\src\\presentation\\api\\middleware\\__init__.py",
          "content": "# Middleware package",
          "lines": 1
        },
        {
          "path": ".\\src\\presentation\\api\\rest\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Presentation Layer  \nWeb APIs, UI components, and external interfaces.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\presentation\\api\\utils\\__init__.py",
          "content": "# Utils package",
          "lines": 1
        },
        {
          "path": ".\\src\\presentation\\enterprise_componentsdashboard\\__init__.py",
          "content": "\"\"\"\nEnterprise_Dashboard Components Package\nمكونات منفصلة من enterprise_dashboard.py\n\nتم إنشاؤها تلقائياً بواسطة God Class Splitter\n\"\"\"\n\n# Import all components for backward compatibility\nfrom .emotionanalyticsenginecore import EmotionAnalyticsEngineCore\nfrom .emotionanalyticsengineutility import EmotionAnalyticsEngineUtility\nfrom .smartalertsystemcore import SmartAlertSystemCore\nfrom .smartalertsystemprocessing import SmartAlertSystemProcessing\nfrom .smartalertsystemnotification import SmartAlertSystemNotification\nfrom .smartalertsystemutility import SmartAlertSystemUtility\nfrom .enterprisedashboardwidgetcore import EnterpriseDashboardWidgetCore\nfrom .enterprisedashboardwidgetprocessing import EnterpriseDashboardWidgetProcessing\nfrom .enterprisedashboardwidgetnotification import EnterpriseDashboardWidgetNotification\nfrom .enterprisedashboardwidgetutility import EnterpriseDashboardWidgetUtility\n\n# Legacy compatibility\n__all__ = [\n    'EmotionAnalyticsEngineCore',\n    'EmotionAnalyticsEngineUtility',\n    'SmartAlertSystemCore',\n    'SmartAlertSystemProcessing',\n    'SmartAlertSystemNotification',\n    'SmartAlertSystemUtility',\n    'EnterpriseDashboardWidgetCore',\n    'EnterpriseDashboardWidgetProcessing',\n    'EnterpriseDashboardWidgetNotification',\n    'EnterpriseDashboardWidgetUtility',\n]",
          "lines": 32
        },
        {
          "path": ".\\src\\presentation\\grpc\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Presentation Layer  \nWeb APIs, UI components, and external interfaces.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\presentation\\services\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Presentation Layer  \nWeb APIs, UI components, and external interfaces.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\presentation\\ui\\__init__.py",
          "content": "\"\"\"\nUI Package for AI Teddy Bear Presentation Layer\nProvides modular UI components for the enterprise application\n\"\"\"\n\nfrom .audio.audio_engine import AudioProcessingEngine\nfrom .audio.audio_config import AudioConfig\nfrom .audio.audio_recorder import AudioRecorder\nfrom .networking.websocket_client import WebSocketClient\nfrom .networking.message_sender import EnterpriseMessageSender\nfrom .widgets.waveform_widget import WaveformWidget\nfrom .widgets.conversation_widget import ConversationWidget\nfrom .widgets.audio_widget import ModernAudioWidget\nfrom .main_window import TeddyMainWindow, ModernTeddyUI, main\n\n__all__ = [\n    'AudioProcessingEngine',\n    'AudioConfig', \n    'AudioRecorder',\n    'WebSocketClient',\n    'EnterpriseMessageSender',\n    'WaveformWidget',\n    'ConversationWidget',\n    'ModernAudioWidget',\n    'TeddyMainWindow',\n    'ModernTeddyUI',\n    'main'\n]",
          "lines": 28
        },
        {
          "path": ".\\src\\presentation\\ui\\audio\\__init__.py",
          "content": "\"\"\"\nAudio Processing Components for AI Teddy Bear UI\nProfessional audio engine with noise reduction and voice enhancement\n\"\"\"\n\nfrom .audio_engine import AudioProcessingEngine\nfrom .audio_config import AudioConfig\nfrom .audio_recorder import AudioRecorder\n\n__all__ = ['AudioProcessingEngine', 'AudioConfig', 'AudioRecorder']",
          "lines": 10
        },
        {
          "path": ".\\src\\presentation\\ui\\networking\\__init__.py",
          "content": "\"\"\"\nNetworking Components for AI Teddy Bear UI\nWebSocket client and enterprise message handling\n\"\"\"\n\nfrom .websocket_client import WebSocketClient\nfrom .message_sender import EnterpriseMessageSender\n\n__all__ = ['WebSocketClient', 'EnterpriseMessageSender']",
          "lines": 9
        },
        {
          "path": ".\\src\\presentation\\ui\\widgets\\__init__.py",
          "content": "\"\"\"\nUI Widgets for AI Teddy Bear Interface\nModern, responsive widgets for the enterprise application\n\"\"\"\n\nfrom .waveform_widget import WaveformWidget\nfrom .conversation_widget import ConversationWidget\nfrom .audio_widget import ModernAudioWidget\n\n__all__ = ['WaveformWidget', 'ConversationWidget', 'ModernAudioWidget']",
          "lines": 10
        },
        {
          "path": ".\\src\\shared\\__init__.py",
          "content": "\"\"\"Shared Kernel - Common Components\"\"\"",
          "lines": 1
        },
        {
          "path": ".\\src\\simulators\\__init__.py",
          "content": "\"\"\"\nAI Teddy Bear - Module Package\nEnhanced child interaction system with advanced AI capabilities.\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\src\\testing\\__init__.py",
          "content": "\"\"\"\nAI-Powered Testing Framework for AI Teddy Bear Project\n====================================================\n\nThis package provides comprehensive AI-powered testing capabilities:\n- AI test generation using GPT-4\n- Smart fuzzing for security vulnerabilities\n- Property-based testing with Hypothesis\n- Child safety validation\n- Performance regression detection\n- Security penetration testing\n\nUsage:\n    from src.testing import AITestGenerator, SmartFuzzer\n    \n    generator = AITestGenerator()\n    tests = await generator.generate_tests_for_module(\"core/ai/service.py\")\n\"\"\"\n\nfrom .ai_test_generator import AITestGenerator\nfrom .smart_fuzzer import SmartFuzzer\nfrom .code_analyzer import CodeAnalyzer\nfrom .coverage_tracker import CoverageTracker\nfrom .test_validator import TestValidator\nfrom .mutation_engine import MutationEngine\nfrom .security_tester import SecurityTester\nfrom .performance_tester import PerformanceTester\n\n__all__ = [\n    'AITestGenerator',\n    'SmartFuzzer', \n    'CodeAnalyzer',\n    'CoverageTracker',\n    'TestValidator',\n    'MutationEngine',\n    'SecurityTester',\n    'PerformanceTester'\n]\n\n__version__ = \"1.0.0\"",
          "lines": 40
        },
        {
          "path": ".\\tests\\enhanced_testing\\__init__.py",
          "content": "\"\"\"\nEnhanced Testing Framework - Enterprise Grade 2025\nComprehensive testing suite with performance, security, and integration testing\n\"\"\"\n\nfrom .base_test import BaseTest, AsyncBaseTest\nfrom .fixtures import (\n    sample_child_profile, sample_device_info, sample_voice_message,\n    sample_ai_response, mock_database_session, mock_audio_data\n)\nfrom .mocks import MockServices, MockAIService, MockAudioService\nfrom .security_tests import SecurityTestSuite\nfrom .performance_tests import PerformanceTestSuite\nfrom .integration_tests import IntegrationTestSuite\nfrom .load_tests import LoadTestSuite\nfrom .utils import TestDataGenerator, TestHelper\n\n__all__ = [\n    'BaseTest',\n    'AsyncBaseTest', \n    'MockServices',\n    'MockAIService',\n    'MockAudioService',\n    'SecurityTestSuite',\n    'PerformanceTestSuite',\n    'IntegrationTestSuite',\n    'LoadTestSuite',\n    'TestDataGenerator',\n    'TestHelper'\n]",
          "lines": 30
        },
        {
          "path": ".\\tests\\framework\\__init__.py",
          "content": "\"\"\"\nTest Framework Package - إطار الاختبارات الشامل\n\"\"\"\nfrom .base import BaseTestCase, ChildSafetyTestCase, PerformanceTestCase\nfrom .builders import TestDataBuilder, MockFactory\nfrom .validators import ContentSafetyValidator, AgeAppropriateContentGenerator\nfrom .bdd import TestContextBuilder, ActionExecutor, BDDTestCase\n\n__all__ = [\n    'BaseTestCase',\n    'ChildSafetyTestCase', \n    'PerformanceTestCase',\n    'TestDataBuilder',\n    'MockFactory',\n    'ContentSafetyValidator',\n    'AgeAppropriateContentGenerator',\n    'TestContextBuilder',\n    'ActionExecutor',\n    'BDDTestCase'\n]",
          "lines": 20
        },
        {
          "path": ".\\tests\\unit\\ui\\__init__.py",
          "content": "\"\"\"\nUI Unit Tests Package for AI Teddy Bear Project\nContains comprehensive unit tests for all UI components\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\tests\\unit\\ui\\audio\\__init__.py",
          "content": "\"\"\"\nAudio Engine Unit Tests\nTests for audio processing functionality\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\tests\\unit\\ui\\network\\__init__.py",
          "content": "\"\"\"\nNetwork Communication Unit Tests  \nTests for WebSocket client and network functionality\n\"\"\"",
          "lines": 4
        },
        {
          "path": ".\\tests\\unit\\ui\\widgets\\__init__.py",
          "content": "\"\"\"\nUI Widgets Unit Tests\nTests for PySide6 widgets and UI components\n\"\"\"",
          "lines": 4
        }
      ]
    },
    "test_analysis": {
      "total_tests": 48,
      "duplicates": {},
      "all_tests": [
        {
          "path": ".\\src\\presentation\\simple_compatibility_test.py",
          "size": 5482,
          "lines": 177,
          "hash": "c6599890b873a06bfa4dd4ab20c729d4"
        },
        {
          "path": ".\\src\\presentation\\test_backward_compatibility.py",
          "size": 4863,
          "lines": 133,
          "hash": "ee936a5fb7864b5a0a0baa17a6a223aa"
        },
        {
          "path": ".\\src\\testing\\ai_test_demo.py",
          "size": 24239,
          "lines": 584,
          "hash": "8cd0b0f1bd2e9deef84d078abe362934"
        },
        {
          "path": ".\\src\\testing\\ai_test_generator.py",
          "size": 7956,
          "lines": 229,
          "hash": "6d83bf255fae4a11d8cd29294088cb0a"
        },
        {
          "path": ".\\src\\testing\\performance_tester.py",
          "size": 33119,
          "lines": 837,
          "hash": "6a9584b62dcd18cb9c7ca08fb5341fd4"
        },
        {
          "path": ".\\src\\testing\\security_tester.py",
          "size": 34914,
          "lines": 930,
          "hash": "2008589e59e7f28e5d35d6d4fc797d67"
        },
        {
          "path": ".\\src\\testing\\test_validator.py",
          "size": 16195,
          "lines": 452,
          "hash": "0d998418dbe5ed70c511f271e5a6f0ed"
        },
        {
          "path": ".\\tests\\conftest.py",
          "size": 1376,
          "lines": 48,
          "hash": "9c5f490b3db53d0907941b422f5f58e6"
        },
        {
          "path": ".\\tests\\test_basic_functionality.py",
          "size": 6812,
          "lines": 204,
          "hash": "66dc3c42a1fead320fd7cedd98a5bf92"
        },
        {
          "path": ".\\tests\\test_exception_handling.py",
          "size": 8827,
          "lines": 267,
          "hash": "8b792f6461d6eaf6edd2512846a4c84c"
        },
        {
          "path": ".\\tests\\test_integration.py",
          "size": 7696,
          "lines": 226,
          "hash": "4bca3de99a3344cd7ac0c83126996273"
        },
        {
          "path": ".\\tests\\auto_generated\\test_arexperience.py",
          "size": 1079,
          "lines": 34,
          "hash": "412e00543543d8a0d08b63ee49922c29"
        },
        {
          "path": ".\\tests\\auto_generated\\test_baseservice.py",
          "size": 1058,
          "lines": 34,
          "hash": "6808291240175a4edfe808f087be4e3f"
        },
        {
          "path": ".\\tests\\auto_generated\\test_childpersonality.py",
          "size": 1178,
          "lines": 34,
          "hash": "d8698dcf3d218fdddf73b7231831ddac"
        },
        {
          "path": ".\\tests\\auto_generated\\test_progressmetrics.py",
          "size": 1152,
          "lines": 34,
          "hash": "1ef77e6901bec7f07caf4598804bfa96"
        },
        {
          "path": ".\\tests\\auto_generated\\test_specialneedtype.py",
          "size": 1147,
          "lines": 34,
          "hash": "7b6e5446ac35442db9731e9f8e83e458"
        },
        {
          "path": ".\\tests\\e2e\\test_full_journey.py",
          "size": 4392,
          "lines": 112,
          "hash": "a44492bb34b1cb11ada380c2c83d4cbd"
        },
        {
          "path": ".\\tests\\e2e\\test_mobile_experience.py",
          "size": 2892,
          "lines": 75,
          "hash": "b0e11739e84801db728a648110ad9b9e"
        },
        {
          "path": ".\\tests\\integration\\test_ai_service_integration.py",
          "size": 3288,
          "lines": 87,
          "hash": "f4d0fc3b444f872c6d869c12f2169462"
        },
        {
          "path": ".\\tests\\integration\\test_conversation_flow.py",
          "size": 2608,
          "lines": 87,
          "hash": "08f0df5126e54230a28975f5b295d06b"
        },
        {
          "path": ".\\tests\\integration\\test_voice_api_integration.py",
          "size": 20267,
          "lines": 554,
          "hash": "b02c083b75c3e8ace88bdbe7b4763a82"
        },
        {
          "path": ".\\tests\\load\\test_concurrent_users.py",
          "size": 3452,
          "lines": 89,
          "hash": "031172ed3db10dbb1743e09713a007d7"
        },
        {
          "path": ".\\tests\\load\\test_load_performance.py",
          "size": 1850,
          "lines": 62,
          "hash": "c98cb40bd90995971d2deb8858f6f6a9"
        },
        {
          "path": ".\\tests\\performance\\test_system_performance.py",
          "size": 14173,
          "lines": 372,
          "hash": "63f6d386c418414c092cfdd4815ef3e5"
        },
        {
          "path": ".\\tests\\security\\test_child_protection_comprehensive.py",
          "size": 14523,
          "lines": 377,
          "hash": "95e7642d6b3f77b52f40b50925c3db3a"
        },
        {
          "path": ".\\tests\\security\\test_child_safety_comprehensive.py",
          "size": 1657,
          "lines": 52,
          "hash": "4a802cfb3a42a39ab24a092a1518a5f3"
        },
        {
          "path": ".\\tests\\security\\test_performance_critical.py",
          "size": 2444,
          "lines": 80,
          "hash": "239adb581d0f54e0fbc860a47aec35f5"
        },
        {
          "path": ".\\tests\\unit\\test_ai_safety_system.py",
          "size": 14747,
          "lines": 370,
          "hash": "d0372134167f25dee62865fcf23e9d41"
        },
        {
          "path": ".\\tests\\unit\\test_bias_detection.py",
          "size": 14671,
          "lines": 354,
          "hash": "f1f150fda3f31e2e172cc9856df1e5c6"
        },
        {
          "path": ".\\tests\\unit\\test_child_aggregate.py",
          "size": 2501,
          "lines": 74,
          "hash": "8ccb0c2fa3a68d1bc096f4f031ff80cf"
        },
        {
          "path": ".\\tests\\unit\\test_child_repository.py",
          "size": 17412,
          "lines": 505,
          "hash": "e099f1530f49c9dbba602ee2f59734b8"
        },
        {
          "path": ".\\tests\\unit\\test_clean_container.py",
          "size": 9505,
          "lines": 298,
          "hash": "951304de4ff758f3a4335db2911fec1c"
        },
        {
          "path": ".\\tests\\unit\\test_container.py",
          "size": 2520,
          "lines": 62,
          "hash": "5c9bfc992e6aab168526a7a5adb936d3"
        },
        {
          "path": ".\\tests\\unit\\test_content_moderator.py",
          "size": 1503,
          "lines": 39,
          "hash": "3ef0aaf1cdf6f68aca2311bf91041860"
        },
        {
          "path": ".\\tests\\unit\\test_conversation_repository.py",
          "size": 25909,
          "lines": 695,
          "hash": "11d6ba5c07294ebda923f6769aab07c7"
        },
        {
          "path": ".\\tests\\unit\\test_distributed_processor.py",
          "size": 19203,
          "lines": 519,
          "hash": "d39948994f09341be339ded66df76737"
        },
        {
          "path": ".\\tests\\unit\\test_edge_ai_manager.py",
          "size": 15868,
          "lines": 417,
          "hash": "1814e2cffdd3bf4a24f8d1aa0094cdc9"
        },
        {
          "path": ".\\tests\\unit\\test_emotion_analyzer.py",
          "size": 1564,
          "lines": 43,
          "hash": "d21b8cb89479961a6f62fec3d8cd29c4"
        },
        {
          "path": ".\\tests\\unit\\test_graphql_federation.py",
          "size": 19202,
          "lines": 546,
          "hash": "6b1b8dbf4c21cc5132d82a692adef6e1"
        },
        {
          "path": ".\\tests\\unit\\test_homomorphic_encryption.py",
          "size": 4396,
          "lines": 129,
          "hash": "16526a0fe0b42db28452fb3c3d8454cd"
        },
        {
          "path": ".\\tests\\unit\\test_multi_layer_cache.py",
          "size": 13656,
          "lines": 439,
          "hash": "85fa84c4b93b9a1631ff7c719f439db0"
        },
        {
          "path": ".\\tests\\unit\\test_security_solutions.py",
          "size": 20238,
          "lines": 559,
          "hash": "1abaadbf3b6219a3ab32fb234b97ccfc"
        },
        {
          "path": ".\\tests\\unit\\test_session_manager.py",
          "size": 6611,
          "lines": 214,
          "hash": "89f3dd960c6522a8a813ad6efd5bf3b4"
        },
        {
          "path": ".\\tests\\unit\\test_voice_service.py",
          "size": 19233,
          "lines": 516,
          "hash": "f413104e78bbc381efea5ae33e7a40bd"
        },
        {
          "path": ".\\tests\\unit\\ui\\test_simple.py",
          "size": 1,
          "lines": 1,
          "hash": "7215ee9c7d9dc229d2921a40e899ec5f"
        },
        {
          "path": ".\\tests\\unit\\ui\\audio\\test_audio_engine.py",
          "size": 6587,
          "lines": 164,
          "hash": "4a44b1006a61908ff85a96f53890eb7a"
        },
        {
          "path": ".\\tests\\unit\\ui\\network\\test_websocket_client.py",
          "size": 12470,
          "lines": 296,
          "hash": "885d5089f385b211df75abf1511a3333"
        },
        {
          "path": ".\\tests\\unit\\ui\\widgets\\test_conversation_widget.py",
          "size": 11652,
          "lines": 291,
          "hash": "ef36df8dc8d3d928900412fadb835dda"
        }
      ]
    }
  }
}