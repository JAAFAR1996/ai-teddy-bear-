version: '3.8'

# üõ°Ô∏è Zero Trust Security Infrastructure
# Complete deployment stack for AI Teddy Bear security

services:
  # ================================================
  # Authentication & Authorization Services
  # ================================================
  
  auth-service:
    build:
      context: ../../
      dockerfile: infrastructure/security/Dockerfile.auth
    container_name: ai-teddy-auth
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key}
      - JWT_EXPIRATION_HOURS=24
      - MAX_LOGIN_ATTEMPTS=5
      - LOCKOUT_DURATION_MINUTES=30
      - ENABLE_MFA=true
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8081:8080"
    depends_on:
      - redis
      - postgres
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
  
  policy-engine:
    build:
      context: ../../
      dockerfile: infrastructure/security/Dockerfile.policy
    container_name: ai-teddy-policy-engine
    environment:
      - POSTGRES_URL=postgresql://security_user:${POSTGRES_PASSWORD}@postgres:5432/security_db
      - REDIS_URL=redis://redis:6379/1
      - POLICY_CACHE_TTL=3600
      - COMPLIANCE_FRAMEWORKS=GDPR,COPPA,SOC2,PCI_DSS
      - THREAT_DETECTION_ENABLED=true
    ports:
      - "8082:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - zero-trust-network
    volumes:
      - ./zero_trust/policies:/app/policies:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  security-monitoring:
    build:
      context: ../../
      dockerfile: infrastructure/security/Dockerfile.monitoring
    container_name: ai-teddy-security-monitoring
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - ALERT_MANAGER_URL=http://alertmanager:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BROKERS=kafka:9092
      - THREAT_DETECTION_INTERVAL=60
      - METRICS_RETENTION_DAYS=30
    ports:
      - "8083:8080"
    depends_on:
      - prometheus
      - grafana
      - elasticsearch
      - kafka
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Data Stores
  # ================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: ai-teddy-postgres
    environment:
      - POSTGRES_DB=security_db
      - POSTGRES_USER=security_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_db_password_123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init-security-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U security_user -d security_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
  
  redis:
    image: redis:7-alpine
    container_name: ai-teddy-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password_123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
  
  # ================================================
  # Monitoring & Observability
  # ================================================
  
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ai-teddy-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ai-teddy-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_123}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-grafana_secret_key_123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - zero-trust-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ai-teddy-alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Log Management
  # ================================================
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai-teddy-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai-teddy-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ai-teddy-logstash
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
    depends_on:
      - elasticsearch
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 | grep -q 'ok'"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Message Queue
  # ================================================
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ai-teddy-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - zero-trust-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
  
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ai-teddy-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - zero-trust-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # API Gateway (Kong)
  # ================================================
  
  kong-database:
    image: postgres:13-alpine
    container_name: ai-teddy-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_123}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  kong-migration:
    image: kong:3.3.0
    container_name: ai-teddy-kong-migration
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_123}
    networks:
      - zero-trust-network
  
  kong:
    image: kong:3.3.0
    container_name: ai-teddy-kong
    depends_on:
      - kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_123}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"  # Kong proxy port
      - "8443:8443"  # Kong proxy SSL port
      - "8001:8001"  # Kong admin API port
      - "8444:8444"  # Kong admin API SSL port
      - "8002:8002"  # Kong Manager
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Security Scanners
  # ================================================
  
  vault:
    image: vault:1.14.0
    container_name: ai-teddy-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-vault_root_token_123}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config:ro
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Reverse Proxy & Load Balancer
  # ================================================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-teddy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth-service
      - policy-engine
      - security-monitoring
    networks:
      - zero-trust-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ================================================
  # Certificate Management
  # ================================================
  
  certbot:
    image: certbot/certbot:v2.6.0
    container_name: ai-teddy-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
    command: certonly --webroot --webroot-path=/var/www/html --email admin@ai-teddy.com --agree-tos --no-eff-email -d api.ai-teddy.com
    networks:
      - zero-trust-network

# ================================================
# Networks
# ================================================

networks:
  zero-trust-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================================
# Volumes
# ================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local
  kafka_data:
    driver: local
  kong_data:
    driver: local
  vault_data:
    driver: local 