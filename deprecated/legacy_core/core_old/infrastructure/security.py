# [AI-Generated by Amazon Q]: تم إضافة هذا الكود تلقائياً وفق دليل المشروع.
import os
import hashlib
from typing import List, Dict, Optional
from pathlib import Path
import mimetypes

class SecurityManager:
    """مدير الأمان والحماية"""
    
    def __init__(self):
        self.allowed_audio_types = [
            'audio/wav', 'audio/mp3', 'audio/mpeg', 
            'audio/mp4', 'audio/m4a', 'audio/ogg'
        ]
        self.max_file_size = 10 * 1024 * 1024  # 10MB
        self.blocked_extensions = ['.exe', '.bat', '.sh', '.php', '.js']
    
    def validate_audio_file(self, file_path: str, file_data: bytes) -> Dict:
        """التحقق من صحة الملف الصوتي"""
        result = {'valid': True, 'errors': []}
        
        # فحص حجم الملف
        if len(file_data) > self.max_file_size:
            result['valid'] = False
            result['errors'].append('حجم الملف كبير جداً')
        
        # فحص نوع الملف
        mime_type, _ = mimetypes.guess_type(file_path)
        if mime_type not in self.allowed_audio_types:
            result['valid'] = False
            result['errors'].append('نوع الملف غير مدعوم')
        
        # فحص الامتداد
        file_ext = Path(file_path).suffix.lower()
        if file_ext in self.blocked_extensions:
            result['valid'] = False
            result['errors'].append('امتداد الملف محظور')
        
        # فحص محتوى الملف (بسيط)
        if not self._is_valid_audio_content(file_data):
            result['valid'] = False
            result['errors'].append('محتوى الملف مشبوه')
        
        return result
    
    def _is_valid_audio_content(self, file_data: bytes) -> bool:
        """فحص بسيط لمحتوى الملف الصوتي"""
        # فحص التوقيعات الشائعة للملفات الصوتية
        audio_signatures = [
            b'RIFF',  # WAV
            b'ID3',   # MP3
            b'\xff\xfb',  # MP3
            b'OggS',  # OGG
            b'ftyp'   # MP4/M4A
        ]
        
        for signature in audio_signatures:
            if file_data.startswith(signature) or signature in file_data[:100]:
                return True
        
        return False
    
    def sanitize_filename(self, filename: str) -> str:
        """تنظيف اسم الملف"""
        # إزالة الأحرف الخطيرة
        dangerous_chars = ['<', '>', ':', '"', '|', '?', '*', '\\', '/']
        
        for char in dangerous_chars:
            filename = filename.replace(char, '_')
        
        # تحديد طول الاسم
        if len(filename) > 100:
            name, ext = os.path.splitext(filename)
            filename = name[:95] + ext
        
        return filename
    
    def generate_secure_filename(self, original_filename: str) -> str:
        """توليد اسم ملف آمن"""
        # استخراج الامتداد
        _, ext = os.path.splitext(original_filename)
        
        # توليد اسم عشوائي آمن
        import uuid
        secure_name = str(uuid.uuid4())
        
        return f"{secure_name}{ext}"

class APISecurityManager:
    """مدير أمان API"""
    
    def __init__(self):
        self.rate_limits = {}
        self.blocked_ips = set()
        self.max_requests_per_minute = 60
    
    def check_rate_limit(self, client_ip: str) -> bool:
        """فحص حد المعدل للطلبات"""
        import time
        current_time = time.time()
        
        if client_ip not in self.rate_limits:
            self.rate_limits[client_ip] = []
        
        # تنظيف الطلبات القديمة
        self.rate_limits[client_ip] = [
            req_time for req_time in self.rate_limits[client_ip]
            if current_time - req_time < 60  # آخر دقيقة
        ]
        
        # فحص العدد
        if len(self.rate_limits[client_ip]) >= self.max_requests_per_minute:
            return False
        
        # إضافة الطلب الحالي
        self.rate_limits[client_ip].append(current_time)
        return True
    
    def validate_api_key(self, api_key: str) -> bool:
        """التحقق من صحة مفتاح API"""
        # فحص بسيط - يمكن تطويره
        if not api_key or len(api_key) < 20:
            return False
        
        # فحص التنسيق
        if not api_key.replace('-', '').replace('_', '').isalnum():
            return False
        
        return True
    
    def sanitize_input(self, user_input: str) -> str:
        """تنظيف المدخلات من المستخدم"""
        # إزالة HTML tags
        import re
        clean_input = re.sub(r'<[^>]+>', '', user_input)
        
        # إزالة الأحرف الخطيرة
        dangerous_patterns = [
            r'<script.*?</script>',
            r'javascript:',
            r'on\w+\s*=',
            r'eval\s*\(',
            r'exec\s*\('
        ]
        
        for pattern in dangerous_patterns:
            clean_input = re.sub(pattern, '', clean_input, flags=re.IGNORECASE)
        
        return clean_input.strip()

class DataPrivacyManager:
    """مدير خصوصية البيانات"""
    
    def __init__(self):
        self.sensitive_fields = ['name', 'email', 'phone', 'address']
    
    def anonymize_data(self, data: Dict) -> Dict:
        """إخفاء هوية البيانات الحساسة"""
        anonymized = data.copy()
        
        for field in self.sensitive_fields:
            if field in anonymized:
                if field == 'email':
                    anonymized[field] = self._mask_email(anonymized[field])
                elif field == 'phone':
                    anonymized[field] = self._mask_phone(anonymized[field])
                elif field == 'name':
                    anonymized[field] = self._mask_name(anonymized[field])
                else:
                    anonymized[field] = '***'
        
        return anonymized
    
    def _mask_email(self, email: str) -> str:
        """إخفاء البريد الإلكتروني"""
        if '@' in email:
            local, domain = email.split('@', 1)
            if len(local) > 2:
                masked_local = local[0] + '*' * (len(local) - 2) + local[-1]
            else:
                masked_local = '*' * len(local)
            return f"{masked_local}@{domain}"
        return '***'
    
    def _mask_phone(self, phone: str) -> str:
        """إخفاء رقم الهاتف"""
        if len(phone) > 4:
            return phone[:2] + '*' * (len(phone) - 4) + phone[-2:]
        return '***'
    
    def _mask_name(self, name: str) -> str:
        """إخفاء الاسم"""
        if len(name) > 2:
            return name[0] + '*' * (len(name) - 2) + name[-1]
        return '***'
    
    def encrypt_sensitive_data(self, data: str) -> str:
        """تشفير البيانات الحساسة"""
        # تشفير بسيط - يمكن استخدام مكتبات أقوى
        import base64
        encoded = base64.b64encode(data.encode()).decode()
        return encoded
    
    def decrypt_sensitive_data(self, encrypted_data: str) -> str:
        """فك تشفير البيانات"""
        try:
            import base64
            decoded = base64.b64decode(encrypted_data.encode()).decode()
            return decoded
        except:
            return ""

class SecurityConfig:
    """إعدادات الأمان"""
    
    # CORS settings
    ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://localhost:8000",
        "https://yourdomain.com"
    ]
    
    # File upload settings
    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
    ALLOWED_EXTENSIONS = ['.wav', '.mp3', '.m4a']
    
    # API security
    REQUIRE_API_KEY = True
    RATE_LIMIT_ENABLED = True
    MAX_REQUESTS_PER_MINUTE = 60
    
    # Data retention
    DATA_RETENTION_DAYS = 90
    AUTO_CLEANUP_ENABLED = True
    
    # Encryption
    ENCRYPT_SENSITIVE_DATA = True
    HASH_PASSWORDS = True