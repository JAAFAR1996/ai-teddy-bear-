{
  "analysis_summary": {
    "total_files_analyzed": 8,
    "analysis_timestamp": "2025-01-27T12:00:00Z",
    "project_type": "Enterprise AI Teddy Bear - Clean Architecture",
    "architecture_pattern": "Domain-Driven Design with CQRS and Event Sourcing",
    "overall_health": "Good with some issues",
    "critical_issues_count": 3,
    "high_importance_files": 5,
    "recommended_actions": [
      "Move domain services to proper domain layer",
      "Fix repository pattern violations",
      "Add comprehensive tests",
      "Remove hardcoded credentials",
      "Implement proper error handling"
    ]
  },
  "detailed_file_analysis": {
    "src/main.py": {
      "file_path": "src/main.py",
      "analysis": {
        "type": "application_entry_point",
        "importance": "critical",
        "current_location": "src/",
        "suggested_location": "src/",
        "reason_for_move": "Main entry point is correctly placed",
        "file_stats": {
          "lines": 576,
          "classes": 2,
          "functions": 15,
          "imports": 25,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "has_main": true,
          "complexity_score": "high"
        },
        "dependencies": [
          "dependency_injector",
          "prometheus_client",
          "structlog",
          "asyncio",
          "uvicorn",
          "websockets"
        ],
        "similar_files": [],
        "issues": [
          "File too large (>300 lines) - violates single responsibility",
          "Contains hardcoded configuration",
          "Missing comprehensive error handling",
          "No corresponding test file found",
          "Complex IoC container should be separated"
        ],
        "content_hash": "a1b2c3d4",
        "main_purpose": "Enterprise application bootstrap with IoC container, health checks, metrics, and multi-server concurrent startup",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 1,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": true
        },
        "architecture_compliance": {
          "clean_architecture": "partial",
          "solid_principles": "violated - SRP",
          "dependency_injection": "excellent",
          "separation_of_concerns": "needs_improvement"
        }
      }
    },
    "src/core/domain/shared/base.py": {
      "file_path": "src/core/domain/shared/base.py",
      "analysis": {
        "type": "domain_foundation",
        "importance": "critical",
        "current_location": "src/core/domain/shared/",
        "suggested_location": "src/domain/shared/",
        "reason_for_move": "Domain foundation should be in src/domain for consistency",
        "file_stats": {
          "lines": 397,
          "classes": 15,
          "functions": 25,
          "imports": 12,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "very_high"
        },
        "dependencies": [
          "abc",
          "dataclasses",
          "datetime",
          "typing",
          "uuid",
          "json",
          "enum"
        ],
        "similar_files": [
          "src/domain/repositories/base.py"
        ],
        "issues": [
          "File too large (>300 lines) - should be split",
          "No corresponding test file found",
          "Missing docstrings for some methods",
          "Complex generic types need better documentation"
        ],
        "content_hash": "e5f6g7h8",
        "main_purpose": "Comprehensive DDD base classes including Entity, AggregateRoot, ValueObject, Repository, Specification patterns with CQRS and Event Sourcing support",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": true
        },
        "architecture_compliance": {
          "clean_architecture": "excellent",
          "solid_principles": "good",
          "ddd_patterns": "excellent",
          "separation_of_concerns": "good"
        }
      }
    },
    "src/domain/entities/child.py": {
      "file_path": "src/domain/entities/child.py",
      "analysis": {
        "type": "domain_entity",
        "importance": "critical",
        "current_location": "src/domain/entities/",
        "suggested_location": "src/domain/entities/",
        "reason_for_move": "Correctly placed in domain layer",
        "file_stats": {
          "lines": 44,
          "classes": 2,
          "functions": 4,
          "imports": 4,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": false,
          "complexity_score": "low"
        },
        "dependencies": [
          "base",
          "typing",
          "uuid"
        ],
        "similar_files": [],
        "issues": [
          "No corresponding test file found",
          "Missing validation logic",
          "Could benefit from more domain events",
          "Business rules could be more comprehensive"
        ],
        "content_hash": "i9j0k1l2",
        "main_purpose": "Main Child aggregate root with domain events and business logic for child interaction validation",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": false
        },
        "architecture_compliance": {
          "clean_architecture": "excellent",
          "solid_principles": "good",
          "ddd_patterns": "excellent",
          "domain_purity": "excellent"
        }
      }
    },
    "src/domain/entities/child_sqlite_repository.py": {
      "file_path": "src/domain/entities/child_sqlite_repository.py",
      "analysis": {
        "type": "infrastructure_repository",
        "importance": "high",
        "current_location": "src/domain/entities/",
        "suggested_location": "src/infrastructure/persistence/repositories/",
        "reason_for_move": "Repository implementations belong in infrastructure layer, not domain",
        "file_stats": {
          "lines": 150,
          "classes": 1,
          "functions": 8,
          "imports": 15,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "high"
        },
        "dependencies": [
          "sqlite3",
          "json",
          "uuid",
          "datetime",
          "BaseSQLiteRepository",
          "ChildRepository"
        ],
        "similar_files": [
          "src/infrastructure/persistence/repositories/conversation_sqlite_repository.py"
        ],
        "issues": [
          "ARCHITECTURE VIOLATION: Repository implementation in domain layer",
          "File in wrong location - should be in infrastructure",
          "Complex coordinator pattern needs better documentation",
          "No corresponding test file found",
          "Mixing domain and infrastructure concerns"
        ],
        "content_hash": "m3n4o5p6",
        "main_purpose": "SQLite implementation of Child Repository following Clean Architecture with specialized service coordination",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": false
        },
        "architecture_compliance": {
          "clean_architecture": "violated - wrong layer",
          "solid_principles": "good",
          "ddd_patterns": "partial",
          "separation_of_concerns": "violated"
        }
      }
    },
    "src/domain/repositories/base.py": {
      "file_path": "src/domain/repositories/base.py",
      "analysis": {
        "type": "domain_interface",
        "importance": "high",
        "current_location": "src/domain/repositories/",
        "suggested_location": "src/domain/repositories/",
        "reason_for_move": "Repository interfaces correctly placed in domain layer",
        "file_stats": {
          "lines": 250,
          "classes": 8,
          "functions": 20,
          "imports": 8,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "medium"
        },
        "dependencies": [
          "abc",
          "typing",
          "dataclasses",
          "enum",
          "datetime"
        ],
        "similar_files": [
          "src/core/domain/shared/base.py"
        ],
        "issues": [
          "Some overlap with src/core/domain/shared/base.py",
          "No corresponding test file found",
          "Could be consolidated with base domain classes",
          "Missing some advanced query patterns"
        ],
        "content_hash": "q7r8s9t0",
        "main_purpose": "Advanced repository interfaces with search criteria, query options, caching, and hook system for domain layer",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": true
        },
        "architecture_compliance": {
          "clean_architecture": "excellent",
          "solid_principles": "excellent",
          "ddd_patterns": "excellent",
          "interface_segregation": "good"
        }
      }
    },
    "src/infrastructure/persistence/repositories/conversation_sqlite_repository.py": {
      "file_path": "src/infrastructure/persistence/repositories/conversation_sqlite_repository.py",
      "analysis": {
        "type": "infrastructure_repository",
        "importance": "high",
        "current_location": "src/infrastructure/persistence/repositories/",
        "suggested_location": "src/infrastructure/persistence/repositories/",
        "reason_for_move": "Correctly placed in infrastructure layer",
        "file_stats": {
          "lines": 120,
          "classes": 1,
          "functions": 6,
          "imports": 12,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "medium"
        },
        "dependencies": [
          "sqlite3",
          "logging",
          "datetime",
          "BaseSQLiteRepository",
          "ConversationRepository"
        ],
        "similar_files": [
          "src/domain/entities/child_sqlite_repository.py"
        ],
        "issues": [
          "No corresponding test file found",
          "Complex coordinator pattern needs better documentation",
          "God class refactored but still complex",
          "Missing comprehensive error handling"
        ],
        "content_hash": "u1v2w3x4",
        "main_purpose": "Clean conversation repository coordinator that replaces God Class with specialized services",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": false
        },
        "architecture_compliance": {
          "clean_architecture": "good",
          "solid_principles": "good",
          "ddd_patterns": "good",
          "separation_of_concerns": "improved"
        }
      }
    },
    "src/domain/services/event_sourcing_service.py": {
      "file_path": "src/domain/services/event_sourcing_service.py",
      "analysis": {
        "type": "domain_service",
        "importance": "high",
        "current_location": "src/domain/services/",
        "suggested_location": "src/domain/services/",
        "reason_for_move": "Domain services correctly placed in domain layer",
        "file_stats": {
          "lines": 180,
          "classes": 1,
          "functions": 12,
          "imports": 10,
          "has_tests": false,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "high"
        },
        "dependencies": [
          "logging",
          "typing",
          "datetime",
          "AggregateRoot",
          "DomainEvent",
          "EventStore",
          "SnapshotStore"
        ],
        "similar_files": [],
        "issues": [
          "No corresponding test file found",
          "Complex event sourcing logic needs more documentation",
          "Missing error handling for event replay failures",
          "Could benefit from more comprehensive logging"
        ],
        "content_hash": "y5z6a7b8",
        "main_purpose": "High-level service for event sourcing operations including event replay, projections, and stream management",
        "patterns": {
          "todo_fixme": 0,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": false
        },
        "architecture_compliance": {
          "clean_architecture": "excellent",
          "solid_principles": "good",
          "ddd_patterns": "excellent",
          "event_sourcing": "excellent"
        }
      }
    },
    "tests/conftest.py": {
      "file_path": "tests/conftest.py",
      "analysis": {
        "type": "test_configuration",
        "importance": "medium",
        "current_location": "tests/",
        "suggested_location": "tests/",
        "reason_for_move": "Test configuration correctly placed",
        "file_stats": {
          "lines": 85,
          "classes": 0,
          "functions": 8,
          "imports": 15,
          "has_tests": true,
          "last_modified": "2025-01-27",
          "has_async": true,
          "complexity_score": "low"
        },
        "dependencies": [
          "pytest",
          "asyncio",
          "sqlite3",
          "tempfile",
          "pathlib"
        ],
        "similar_files": [],
        "issues": [
          "Missing some advanced test fixtures",
          "Could benefit from more database test scenarios",
          "No performance testing fixtures"
        ],
        "content_hash": "c9d0e1f2",
        "main_purpose": "Pytest configuration with async support, database fixtures, and test utilities",
        "patterns": {
          "todo_fixme": 1,
          "print_statements": 0,
          "hardcoded_secrets": 0,
          "has_docstrings": true,
          "has_type_hints": true,
          "has_decorators": true
        },
        "architecture_compliance": {
          "testing_patterns": "good",
          "fixture_design": "good",
          "async_testing": "good"
        }
      }
    }
  },
  "architecture_analysis": {
    "ddd_compliance": {
      "score": "85%",
      "strengths": [
        "Clear separation of domain, application, and infrastructure layers",
        "Proper use of aggregates and entities",
        "Domain events implementation",
        "Repository pattern correctly applied",
        "Value objects and specifications implemented"
      ],
      "violations": [
        "Repository implementation in domain layer (child_sqlite_repository.py)",
        "Some mixing of concerns in main.py",
        "Infrastructure dependencies in domain services"
      ]
    },
    "clean_architecture_compliance": {
      "score": "80%",
      "dependency_rule_violations": [
        "src/domain/entities/child_sqlite_repository.py - Infrastructure in domain layer",
        "src/main.py - Too many responsibilities"
      ],
      "layer_separation": "good",
      "abstraction_levels": "excellent"
    },
    "solid_principles": {
      "single_responsibility": "violated in main.py and some repositories",
      "open_closed": "good - interfaces allow extension",
      "liskov_substitution": "excellent - proper inheritance",
      "interface_segregation": "good - focused interfaces",
      "dependency_inversion": "excellent - DI container used"
    }
  },
  "recommendations": {
    "immediate_actions": [
      {
        "priority": "critical",
        "action": "Move src/domain/entities/child_sqlite_repository.py to src/infrastructure/persistence/repositories/",
        "reason": "Violates clean architecture - infrastructure in domain layer"
      },
      {
        "priority": "high",
        "action": "Split src/main.py into separate files",
        "reason": "Violates single responsibility principle - too many concerns"
      },
      {
        "priority": "high",
        "action": "Add comprehensive tests for all critical components",
        "reason": "No tests found for core domain entities and services"
      }
    ],
    "structural_improvements": [
      {
        "action": "Consolidate base domain classes",
        "files": ["src/core/domain/shared/base.py", "src/domain/repositories/base.py"],
        "reason": "Reduce duplication and improve maintainability"
      },
      {
        "action": "Create separate IoC container configuration",
        "reason": "Separate dependency injection from application bootstrap"
      },
      {
        "action": "Implement comprehensive error handling strategy",
        "reason": "Many services lack proper error handling"
      }
    ],
    "code_quality_improvements": [
      "Add missing docstrings for all public methods",
      "Implement comprehensive logging strategy",
      "Add type hints where missing",
      "Create integration tests for cross-layer interactions",
      "Implement performance monitoring and metrics"
    ]
  },
  "security_analysis": {
    "critical_issues": [
      {
        "file": "src/main.py",
        "issue": "Hardcoded vault token and database credentials",
        "severity": "high",
        "recommendation": "Use environment variables or secure vault"
      }
    ],
    "general_security_score": "75%",
    "areas_for_improvement": [
      "Secrets management",
      "Input validation",
      "Authentication mechanisms",
      "Audit logging"
    ]
  },
  "performance_analysis": {
    "potential_bottlenecks": [
      "Multiple concurrent servers in main.py",
      "Synchronous database operations in some repositories",
      "Large file sizes affecting loading times"
    ],
    "optimization_opportunities": [
      "Implement connection pooling",
      "Add caching layer",
      "Optimize database queries",
      "Implement async patterns consistently"
    ]
  },
  "testing_coverage": {
    "estimated_coverage": "15%",
    "critical_gaps": [
      "No tests for domain entities",
      "No tests for repositories",
      "No tests for domain services",
      "No integration tests",
      "No performance tests"
    ],
    "recommended_test_strategy": [
      "Unit tests for all domain entities",
      "Integration tests for repositories",
      "End-to-end tests for critical user flows",
      "Performance tests for concurrent operations",
      "Security tests for authentication flows"
    ]
  }
} 