version: '3.9'

services:
  # ===================
  # Frontend Service
  # ===================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${API_URL:-http://localhost:8000/api}
        - VITE_WS_URL=${WS_URL:-ws://localhost:8000/ws}
    image: ai-teddy-frontend:${VERSION:-latest}
    container_name: teddy-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - teddy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # ===================
  # Backend Service
  # ===================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ai-teddy-backend:${VERSION:-latest}
    container_name: teddy-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - teddy-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ===================
  # WebSocket Service
  # ===================
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    image: ai-teddy-websocket:${VERSION:-latest}
    container_name: teddy-websocket
    restart: unless-stopped
    ports:
      - "${WS_PORT:-8001}:8001"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import websockets; asyncio.run(websockets.connect('ws://localhost:8001/health'))"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - teddy-network

  # ===================
  # PostgreSQL Database
  # ===================
  postgres:
    image: postgres:15-alpine
    container_name: teddy-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-teddy}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-ai_teddy_bear}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-teddy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - teddy-network

  # ===================
  # Redis Cache
  # ===================
  redis:
    image: redis:7-alpine
    container_name: teddy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - teddy-network

  # ===================
  # Kafka Message Queue
  # ===================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: teddy-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - teddy-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: teddy-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - teddy-network

  # ===================
  # Monitoring Stack
  # ===================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: teddy-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - teddy-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: teddy-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - teddy-network

  # ===================
  # Logging Stack
  # ===================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: teddy-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
    networks:
      - teddy-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: teddy-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "${LOGSTASH_PORT:-5000}:5000"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - teddy-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: teddy-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    networks:
      - teddy-network

  # ===================
  # Reverse Proxy
  # ===================
  traefik:
    image: traefik:v3.0
    container_name: teddy-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - teddy-network

# ===================
# Networks
# ===================
networks:
  teddy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===================
# Volumes
# ===================
volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  traefik_data: 