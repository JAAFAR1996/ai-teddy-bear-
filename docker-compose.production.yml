version: '3.8'

networks:
  teddy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

x-common-variables: &common-variables
  ENVIRONMENT: production
  POSTGRES_DB: ${POSTGRES_DB:-teddy_bear_prod}
  POSTGRES_USER: ${POSTGRES_USER:-teddy_user}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  REDIS_URL: redis://redis:6379/0
  MINIO_ENDPOINT: minio:9000
  MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
  MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  ENCRYPTION_KEY: ${ENCRYPTION_KEY}

services:
  # Core Database
  postgres:
    image: postgres:15-alpine
    container_name: teddy-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teddy_bear_prod}
      POSTGRES_USER: ${POSTGRES_USER:-teddy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - teddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-teddy_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: teddy-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - teddy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Object Storage (for audio files)
  minio:
    image: minio/minio:latest
    container_name: teddy-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - teddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: src/Dockerfile_from_core
      target: production
    container_name: teddy-backend-prod
    restart: unless-stopped
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-teddy_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-teddy_bear_prod}
      CORS_ORIGINS: ${FRONTEND_URL:-https://your-domain.com}
      LOG_LEVEL: INFO
      WORKERS: 4
      MAX_WORKERS: 8
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads:ro
    ports:
      - "8000:8000"
    networks:
      - teddy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: teddy-nginx-prod
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - teddy-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue for ESP32 Communications
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: teddy-rabbitmq-prod
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-teddy}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /teddy
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - teddy-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: teddy-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - teddy-network
    depends_on:
      - backend

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: teddy-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: https://${GRAFANA_DOMAIN:-localhost}/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.json:ro
    ports:
      - "3000:3000"
    networks:
      - teddy-network
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: teddy-loki-prod
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"
    networks:
      - teddy-network

  # Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: teddy-promtail-prod
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - ./logs:/var/logs:ro
      - /var/log:/var/host-logs:ro
    networks:
      - teddy-network
    depends_on:
      - loki

  # Security Scanner (runs periodically)
  security-scanner:
    image: aquasec/trivy:latest
    container_name: teddy-security-scanner
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports
    command: ["sh", "-c", "while true; do trivy image --format json --output /reports/security-scan-$$(date +%Y%m%d).json teddy-backend-prod; sleep 86400; done"]
    networks:
      - teddy-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: teddy-backup-prod
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teddy_bear_prod}
      POSTGRES_USER: ${POSTGRES_USER:-teddy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "while true; do /backup.sh; sleep 21600; done"] # Every 6 hours
    networks:
      - teddy-network
    depends_on:
      - postgres 