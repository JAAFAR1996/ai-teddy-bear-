{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_story_games.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 80
                }
              }
            }
          ],
          "message": {
            "text": "Method _load_educational_content has 78 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_story_games.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 580
                }
              }
            }
          ],
          "message": {
            "text": "Method get_learning_report has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 102
                }
              }
            }
          ],
          "message": {
            "text": "Method _load_stored_stories has 189 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 297
                }
              }
            }
          ],
          "message": {
            "text": "Method start_interactive_story has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 297
                }
              }
            }
          ],
          "message": {
            "text": "Method start_interactive_story has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 376
                }
              }
            }
          ],
          "message": {
            "text": "Method process_story_choice has 82 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 376
                }
              }
            }
          ],
          "message": {
            "text": "Method process_story_choice has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 488
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_behavioral_feedback has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 521
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_behavioral_patterns has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aggregates.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 510
                }
              }
            }
          ],
          "message": {
            "text": "Method get_llm_response has 55 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aggregates.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 510
                }
              }
            }
          ],
          "message": {
            "text": "Method get_llm_response has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_value_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 47
                }
              }
            }
          ],
          "message": {
            "text": "Method _load_age_curricula has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_value_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_learning_categories has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_value_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Method suggest_educational_enhancements has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_value_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 421
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_learning_recommendations has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "behavioral_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 195
                }
              }
            }
          ],
          "message": {
            "text": "Method _analyze_speech_patterns has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "behavioral_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 234
                }
              }
            }
          ],
          "message": {
            "text": "Method _combine_voice_and_text_analysis has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "behavioral_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 306
                }
              }
            }
          ],
          "message": {
            "text": "Method _update_psychological_profile has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "behavioral_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 491
                }
              }
            }
          ],
          "message": {
            "text": "Method get_child_psychological_report has 53 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "behavioral_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 491
                }
              }
            }
          ],
          "message": {
            "text": "Method get_child_psychological_report has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "story_generator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_personalized_story has 52 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud_audio_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 212
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_fallback_response has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_optimization_recommendations has 92 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 406
                }
              }
            }
          ],
          "message": {
            "text": "Method check_health has 60 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 406
                }
              }
            }
          ],
          "message": {
            "text": "Method check_health has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 138
                }
              }
            }
          ],
          "message": {
            "text": "Method update has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 193
                }
              }
            }
          ],
          "message": {
            "text": "Method list has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 281
                }
              }
            }
          ],
          "message": {
            "text": "Method _deserialize_child_from_db has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_database_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 234
                }
              }
            }
          ],
          "message": {
            "text": "Method get_read_replica_session has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_database_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 264
                }
              }
            }
          ],
          "message": {
            "text": "Method execute_optimized_query has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_database_optimizer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 365
                }
              }
            }
          ],
          "message": {
            "text": "Method _monitor_database_health has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exceptions.handle_exceptions.decorator.async_wrapper has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exceptions.handle_exceptions.decorator.sync_wrapper has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 195
                }
              }
            }
          ],
          "message": {
            "text": "Method with_retry.with_retry.decorator.async_wrapper has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 366
                }
              }
            }
          ],
          "message": {
            "text": "Method child_safe.child_safe.decorator.async_wrapper has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 597
                }
              }
            }
          ],
          "message": {
            "text": "Method authenticated.authenticated.decorator.async_wrapper has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 635
                }
              }
            }
          ],
          "message": {
            "text": "Method authenticated.authenticated.decorator.sync_wrapper has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_container.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Method cleanup has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_container.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 235
                }
              }
            }
          ],
          "message": {
            "text": "Method register has 10 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "Method _map_features_to_emotions has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 312
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exceptions.handle_exceptions.decorator.async_wrapper has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 349
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exceptions.handle_exceptions.decorator.sync_wrapper has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 403
                }
              }
            }
          ],
          "message": {
            "text": "Method with_retry.with_retry.decorator.async_wrapper has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 444
                }
              }
            }
          ],
          "message": {
            "text": "Method with_retry.with_retry.decorator.sync_wrapper has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "global_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 335
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exception has 62 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "global_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 335
                }
              }
            }
          ],
          "message": {
            "text": "Method handle_exception has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "process.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Method main has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "advanced_ai_orchestrator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 275
                }
              }
            }
          ],
          "message": {
            "text": "Method _classify_request has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_io.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 169
                }
              }
            }
          ],
          "message": {
            "text": "Method validate_audio_file has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_io.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 484
                }
              }
            }
          ],
          "message": {
            "text": "Method cleanup_temp_files has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Method play_audio has 9 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 741
                }
              }
            }
          ],
          "message": {
            "text": "Method process_conversation has 70 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 895
                }
              }
            }
          ],
          "message": {
            "text": "Method _call_service has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 380
                }
              }
            }
          ],
          "message": {
            "text": "Method _process_historical_data has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 422
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_historical_insights has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 532
                }
              }
            }
          ],
          "message": {
            "text": "Method _extract_emotions_from_hume has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 86
                }
              }
            }
          ],
          "message": {
            "text": "Method calibrate_hume has 61 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 299
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_calibration_recommendation has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 322
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_emotion_multilang has 69 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 592
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_language_insights has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 642
                }
              }
            }
          ],
          "message": {
            "text": "Method merge_historical_data has 97 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 298
                }
              }
            }
          ],
          "message": {
            "text": "Method _convert_to_child_emotion has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 546
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_developmental_indicators has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 63
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_batch has 79 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 63
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_batch has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 183
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_stream has 56 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 183
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_stream has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 274
                }
              }
            }
          ],
          "message": {
            "text": "Method _extract_emotions_from_predictions has a cyclomatic complexity of 16 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 328
                }
              }
            }
          ],
          "message": {
            "text": "Method extract_emotions_summary has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dataloaders.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 116
                }
              }
            }
          ],
          "message": {
            "text": "Method _batch_load_with_cache has 53 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pagination.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Method paginate has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 194
                }
              }
            }
          ],
          "message": {
            "text": "Method get_performance_summary has a cyclomatic complexity of 18 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 277
                }
              }
            }
          ],
          "message": {
            "text": "Method get_query_recommendations has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "event_consumer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 187
                }
              }
            }
          ],
          "message": {
            "text": "Method _consumption_loop has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "event_consumer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Method _process_message has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "event_consumer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Method _process_message has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_orchestrator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 320
                }
              }
            }
          ],
          "message": {
            "text": "Method select_instance has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alert_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 324
                }
              }
            }
          ],
          "message": {
            "text": "Method _send_slack has 55 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "alert_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 432
                }
              }
            }
          ],
          "message": {
            "text": "Method _send_push_notification has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 358
                }
              }
            }
          ],
          "message": {
            "text": "Method get_system_status has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "custom_metrics.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Method __init__ has 59 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "custom_metrics.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 451
                }
              }
            }
          ],
          "message": {
            "text": "Method record_ai_interaction has 73 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "custom_metrics.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 451
                }
              }
            }
          ],
          "message": {
            "text": "Method record_ai_interaction has 10 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "auto_scaling.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Method _make_scaling_decision has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 197
                }
              }
            }
          ],
          "message": {
            "text": "Method create has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "Method update has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 334
                }
              }
            }
          ],
          "message": {
            "text": "Method list has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 377
                }
              }
            }
          ],
          "message": {
            "text": "Method search has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 424
                }
              }
            }
          ],
          "message": {
            "text": "Method _build_search_condition has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 495
                }
              }
            }
          ],
          "message": {
            "text": "Method bulk_create has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 553
                }
              }
            }
          ],
          "message": {
            "text": "Method bulk_update has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 764
                }
              }
            }
          ],
          "message": {
            "text": "Method aggregate has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_fix_and_report.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 86
                }
              }
            }
          ],
          "message": {
            "text": "Method verify_structure_completeness has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_fix_and_report.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 190
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_final_comprehensive_report has 152 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_fix_and_report.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 190
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_final_comprehensive_report has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "conversation_core_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 100
                }
              }
            }
          ],
          "message": {
            "text": "Method update has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "conversation_core_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 193
                }
              }
            }
          ],
          "message": {
            "text": "Method _serialize_conversation_for_db has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "conversation_core_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 226
                }
              }
            }
          ],
          "message": {
            "text": "Method _deserialize_conversation_from_db has a cyclomatic complexity of 16 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Method _build_query has a cyclomatic complexity of 16 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 170
                }
              }
            }
          ],
          "message": {
            "text": "Method _build_condition has a cyclomatic complexity of 21 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 341
                }
              }
            }
          ],
          "message": {
            "text": "Method update has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 596
                }
              }
            }
          ],
          "message": {
            "text": "Method bulk_update has 51 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 596
                }
              }
            }
          ],
          "message": {
            "text": "Method bulk_update has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "connection_pool.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "Method __init__ has 11 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugin_architecture.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 345
                }
              }
            }
          ],
          "message": {
            "text": "Method load_plugin has 53 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "plugin_architecture.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 345
                }
              }
            }
          ],
          "message": {
            "text": "Method load_plugin has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 556
                }
              }
            }
          ],
          "message": {
            "text": "Method _worker has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 616
                }
              }
            }
          ],
          "message": {
            "text": "Method _execute_task has 52 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 616
                }
              }
            }
          ],
          "message": {
            "text": "Method _execute_task has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pdf_generator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Method _build_pdf_content has 58 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pdf_generator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Method _build_pdf_content has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "report_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Method get_interactions has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "report_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 137
                }
              }
            }
          ],
          "message": {
            "text": "Method get_recent_interactions has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "report_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 176
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_mock_interactions has 70 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "api_gateway.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 565
                }
              }
            }
          ],
          "message": {
            "text": "Method _classify_request has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audit_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Method log_event has 11 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audit_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 219
                }
              }
            }
          ],
          "message": {
            "text": "Method _count_recent_events has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audit_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 280
                }
              }
            }
          ],
          "message": {
            "text": "Method get_events has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_security.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 270
                }
              }
            }
          ],
          "message": {
            "text": "Method validate_password has a cyclomatic complexity of 19 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_security.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 701
                }
              }
            }
          ],
          "message": {
            "text": "Method authenticate_request has 93 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_security.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 701
                }
              }
            }
          ],
          "message": {
            "text": "Method authenticate_request has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Method create_token_pair has 53 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 210
                }
              }
            }
          ],
          "message": {
            "text": "Method refresh_access_token has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 179
                }
              }
            }
          ],
          "message": {
            "text": "Method _initialize_role_permissions has 87 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 285
                }
              }
            }
          ],
          "message": {
            "text": "Method check_access has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 349
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_context_permissions has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 400
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_resource_access has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 600
                }
              }
            }
          ],
          "message": {
            "text": "Method get_audit_log has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rbac_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 91
                }
              }
            }
          ],
          "message": {
            "text": "Method check_permission has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 192
                }
              }
            }
          ],
          "message": {
            "text": "Method validate_ast has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Method _evaluate_node has 74 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Method _evaluate_node has a cyclomatic complexity of 32 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "secrets_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 604
                }
              }
            }
          ],
          "message": {
            "text": "Method get_secret has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 147
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_local_rate_limit has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_audit_logger.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 257
                }
              }
            }
          ],
          "message": {
            "text": "Method log_security_event has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_audit_logger.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 257
                }
              }
            }
          ],
          "message": {
            "text": "Method log_security_event has 14 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_audit_logger.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 612
                }
              }
            }
          ],
          "message": {
            "text": "Method get_compliance_report has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vault_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 179
                }
              }
            }
          ],
          "message": {
            "text": "Method store_secret has 51 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vault_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 241
                }
              }
            }
          ],
          "message": {
            "text": "Method get_secret has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud_server_launcher.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Method create_control_panel has 62 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_session_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 200
                }
              }
            }
          ],
          "message": {
            "text": "Method _cleanup_expired_sessions has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modern_container.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 125
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_service_health has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modern_container.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Method register_service has 10 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deployment_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 411
                }
              }
            }
          ],
          "message": {
            "text": "Method _perform_health_check has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deployment_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 659
                }
              }
            }
          ],
          "message": {
            "text": "Method _analyze_ab_test_results has 59 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deployment_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 659
                }
              }
            }
          ],
          "message": {
            "text": "Method _analyze_ab_test_results has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 219
                }
              }
            }
          ],
          "message": {
            "text": "Method _measure_model_performance has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 314
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_model_strengths has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 353
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_model_weaknesses has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 392
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_model_recommendations has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 551
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_issues_and_recommendations has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model_evaluator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 618
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_evaluation_summary has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "feedback_collector.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 356
                }
              }
            }
          ],
          "message": {
            "text": "Method _process_and_filter_feedback has 93 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "feedback_collector.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 356
                }
              }
            }
          ],
          "message": {
            "text": "Method _process_and_filter_feedback has a cyclomatic complexity of 25 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "feedback_collector.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 469
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_improvement_areas has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "feedback_collector.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 506
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_positive_trends has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 175
                }
              }
            }
          ],
          "message": {
            "text": "Method _simulate_model_metrics has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Method _detect_anomalies has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 582
                }
              }
            }
          ],
          "message": {
            "text": "Method _initialize_alert_rules has 58 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 692
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_monitoring_report has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "training_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 149
                }
              }
            }
          ],
          "message": {
            "text": "Method _identify_models_for_training has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "training_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 244
                }
              }
            }
          ],
          "message": {
            "text": "Method _get_base_training_config has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "training_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 489
                }
              }
            }
          ],
          "message": {
            "text": "Method _prepare_model_data has 67 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "training_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 565
                }
              }
            }
          ],
          "message": {
            "text": "Method _execute_training has 63 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "continuous_learning.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 145
                }
              }
            }
          ],
          "message": {
            "text": "Method continuous_improvement_loop has 68 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "continuous_learning.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 355
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_comprehensive_ab_test has 51 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "child_interaction_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_safe_response has 72 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "authentication.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 308
                }
              }
            }
          ],
          "message": {
            "text": "Method authenticate_user has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "authentication.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 386
                }
              }
            }
          ],
          "message": {
            "text": "Method verify_token has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "federation_gateway.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 679
                }
              }
            }
          ],
          "message": {
            "text": "Method _analyze_query_services has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 196
                }
              }
            }
          ],
          "message": {
            "text": "Method finish_query_monitoring has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 196
                }
              }
            }
          ],
          "message": {
            "text": "Method finish_query_monitoring has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 196
                }
              }
            }
          ],
          "message": {
            "text": "Method finish_query_monitoring has 11 parameters (limit is 8)"
          },
          "ruleId": "Lizard_parameter-count-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 378
                }
              }
            }
          ],
          "message": {
            "text": "Method get_performance_summary has 61 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 378
                }
              }
            }
          ],
          "message": {
            "text": "Method get_performance_summary has a cyclomatic complexity of 20 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 452
                }
              }
            }
          ],
          "message": {
            "text": "Method get_query_analytics has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "verify_graphql_federation.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 31
                }
              }
            }
          ],
          "message": {
            "text": "Method verify_implementation has 101 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "verify_graphql_federation.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 31
                }
              }
            }
          ],
          "message": {
            "text": "Method verify_implementation has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "auth.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Method require_parent_auth.decorated_function has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "auth.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Method require_child_auth.decorated_function has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "api_documentation.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Method custom_openapi has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "fastapi_integration.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Method create_streaming_app.get_test_client has 147 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "smart_restructure.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_migration_plan has 56 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "smart_restructure.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 175
                }
              }
            }
          ],
          "message": {
            "text": "Method execute_migration has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "smart_restructure.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 322
                }
              }
            }
          ],
          "message": {
            "text": "Method _classify_existing_files has a cyclomatic complexity of 17 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "parental_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_weekly_report has 109 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Method process_audio has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "conversation_widget.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Method setup_ui has 55 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Method create_emotion_timeline_chart has 61 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Method create_emotion_timeline_chart has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 301
                }
              }
            }
          ],
          "message": {
            "text": "Method get_emotion_insights has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 396
                }
              }
            }
          ],
          "message": {
            "text": "Method process_emotion_data has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 554
                }
              }
            }
          ],
          "message": {
            "text": "Method create_metrics_panel has 89 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "code_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 267
                }
              }
            }
          ],
          "message": {
            "text": "Method _analyze_single_class has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "code_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Method _find_security_concerns has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "code_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 489
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_coverage_recommendations has a cyclomatic complexity of 13 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "coverage_tracker.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 391
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_coverage_recommendations has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "mutation_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 170
                }
              }
            }
          ],
          "message": {
            "text": "Method _apply_mutation has a cyclomatic complexity of 15 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 255
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_load_test has 75 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 445
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_spike_test has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 623
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_endurance_test has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 623
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_endurance_test has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 723
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_performance_report has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 772
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_performance_recommendations has 72 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 772
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_performance_recommendations has a cyclomatic complexity of 26 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Method __init__ has 56 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 149
                }
              }
            }
          ],
          "message": {
            "text": "Method run_comprehensive_security_test has 55 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 651
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_input_validation has 55 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 897
                }
              }
            }
          ],
          "message": {
            "text": "Method generate_security_report has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "smart_fuzzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 140
                }
              }
            }
          ],
          "message": {
            "text": "Method run_comprehensive_fuzz_test has 58 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "smart_fuzzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 140
                }
              }
            }
          ],
          "message": {
            "text": "Method run_comprehensive_fuzz_test has a cyclomatic complexity of 11 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_fixed.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_batch has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_fixed.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_batch has a cyclomatic complexity of 12 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "validators.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 30
                }
              }
            }
          ],
          "message": {
            "text": "Method __init__ has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "validators.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Method __init__ has 75 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_concurrent_users.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Method run_concurrent_test has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_system_performance.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Method test_database_query_performance has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_ai_safety_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Method analyze_content has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 375
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_child_safety_tests has 61 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 449
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_performance_tests has 70 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 532
                }
              }
            }
          ],
          "message": {
            "text": "Method _run_security_tests has 59 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 654
                }
              }
            }
          ],
          "message": {
            "text": "Method _calculate_overall_results has a cyclomatic complexity of 16 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_child_service_contracts has 54 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 183
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_audio_service_contracts has 60 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 253
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_ai_service_contracts has 63 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 326
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_security_service_contracts has 58 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 394
                }
              }
            }
          ],
          "message": {
            "text": "Method _test_parent_service_contracts has 57 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 461
                }
              }
            }
          ],
          "message": {
            "text": "Method _execute_contract_test has 65 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 461
                }
              }
            }
          ],
          "message": {
            "text": "Method _execute_contract_test has a cyclomatic complexity of 17 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 561
                }
              }
            }
          ],
          "message": {
            "text": "Method _validate_field has a cyclomatic complexity of 19 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "final_test.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Method test_services has 66 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "final_test.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Method test_services has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "mutation_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Method _initialize_mutation_operators has 82 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_backward_compatibility.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Method test_backward_compatibility has 86 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_backward_compatibility.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Method test_backward_compatibility has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_comprehensive_backend.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 795
                }
              }
            }
          ],
          "message": {
            "text": "Method test_weekly_report_with_insights has 58 lines of code (limit is 50)"
          },
          "ruleId": "Lizard_nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 176
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_imports has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 197
                }
              }
            }
          ],
          "message": {
            "text": "Method _check_test_logic has a cyclomatic complexity of 10 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 226
                }
              }
            }
          ],
          "message": {
            "text": "Method _generate_suggestions has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 256
                }
              }
            }
          ],
          "message": {
            "text": "Method _fix_syntax_errors has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "Method _fix_imports has a cyclomatic complexity of 14 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_validator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 333
                }
              }
            }
          ],
          "message": {
            "text": "Method _fix_test_structure has a cyclomatic complexity of 9 (limit is 8)"
          },
          "ruleId": "Lizard_ccn-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos_orchestrator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./chaos/infrastructure/chaos_orchestrator.py has 538 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "edge_ai_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/adapters/edge/edge_ai_manager.py has 810 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "child_domain_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/ai/child_domain_service.py has 505 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_child_interaction_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/child/enhanced_child_interaction_service.py has 545 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud_transcription_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/core/cloud_transcription_service.py has 502 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data_cleanup_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/core/data_cleanup_service.py has 563 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "issue_tracker_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/core/issue_tracker_service.py has 733 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_resolvers.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/core/service_resolvers.py has 503 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "transcription_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/core/transcription_service.py has 610 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_parent_report_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/parent/enhanced_parent_report_service.py has 690 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "advanced_progress_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/application/services/advanced_progress_analyzer.py has 638 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "automated_compliance.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/compliance/automated_compliance.py has 865 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "fix_remaining_services.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/core/services/fix_remaining_services.py has 878 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_organizer_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/core/services/service_organizer_analyzer.py has 517 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "child_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/entities/child_repository.py has 534 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "child_safety_chaos.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/entities/child_safety_chaos.py has 668 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "advanced_family_system.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/family/advanced_family_system.py has 603 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/services/emotion_analyzer.py has 637 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ai_story_generator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/stories/ai_story_generator.py has 650 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "educational_story_games.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/stories/educational_story_games.py has 526 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interactive_story_engine.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/domain/stories/interactive_story_engine.py has 591 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "multi_layer_cache.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/caching/multi_layer_cache.py has 954 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/decorators/exception_handler.py has 548 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "global_exception_handler.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/exception_handling/global_exception_handler.py has 514 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "audio_io.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/external_services/audio_io.py has 671 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "distributed_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/external_services/distributed_processor.py has 815 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/external_services/enhanced_hume_integration_2025.py has 655 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hume_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/external_services/hume_emotion_analyzer.py has 508 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "service_orchestrator.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/microservices/service_orchestrator.py has 526 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "custom_metrics.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/observability/custom_metrics.py has 594 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "base_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/persistence/repositories/base_sqlite_repository.py has 679 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sqlalchemy_base_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/persistence/repositories/sqlalchemy_base_repository.py has 671 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "async_processor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/processing/async_processor.py has 797 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/security/advanced_content_filter.py has 532 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "api_gateway.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/security/api_gateway.py has 532 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enhanced_security.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/security/enhanced_security.py has 668 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "secrets_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/security/secrets_manager.py has 696 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_audit_logger.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/security/security_audit_logger.py has 561 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud_server_launcher.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/infrastructure/cloud_server_launcher.py has 663 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deployment_manager.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/ml/continuous_learning/deployment/deployment_manager.py has 599 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/ml/continuous_learning/monitoring/performance_monitor.py has 536 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "training_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/ml/continuous_learning/training/training_pipeline.py has 718 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "federation_gateway.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/presentation/api/graphql/federation_gateway.py has 714 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_monitor.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/presentation/api/graphql/performance_monitor.py has 520 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/presentation/enterprise_dashboard.py has 774 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/testing/performance_tester.py has 696 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security_tester.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./src/testing/security_tester.py has 827 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_child_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/unit/test_child_repository.py has 505 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_conversation_repository.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/unit/test_conversation_repository.py has 532 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/comprehensive_testing_framework.py has 613 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contract_tests.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/contract_tests.py has 532 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_comprehensive_backend.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/test_comprehensive_backend.py has 785 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 0
                }
              }
            }
          ],
          "message": {
            "text": "Method ./tests/test_comprehensive_frontend.py has 662 file-nloc (limit is 500)"
          },
          "ruleId": "Lizard_file-nloc-medium"
        }
      ],
      "tool": {
        "driver": {
          "informationUri": "https://github.com/terryyin/lizard",
          "name": "Lizard",
          "rules": null,
          "version": "1.17.10"
        }
      }
    },
    {
      "invocations": [
        {
          "executionSuccessful": false,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [
            {
              "exception": {
                "message": "net.sourceforge.pmd.lang.ast.ParseException: Parse exception in file '/mnt/c/Users/jaafa/Desktop/5555/ai-teddy/src/database_migrations/create_parent_reports_table.sql' at line 5, column 1: Encountered \u003cIDENTIFIER: \"GO\"\u003e.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"/\" ...\n\tat net.sourceforge.pmd.lang.plsql.ast.PLSQLParserImpl.generateParseException(PLSQLParserImpl.java)\n\tat net.sourceforge.pmd.lang.plsql.ast.PLSQLParserImpl.jj_consume_token(PLSQLParserImpl.java)\n\tat net.sourceforge.pmd.lang.plsql.ast.PLSQLParserImpl.Input(PLSQLParserImpl.java:257)\n\tat net.sourceforge.pmd.lang.plsql.ast.PLSQLParser.parseImpl(PLSQLParser.java:86)\n\tat net.sourceforge.pmd.lang.plsql.ast.PLSQLParser.parseImpl(PLSQLParser.java:21)\n\tat net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeParserAdapter.parse(JjtreeParserAdapter.java:36)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.parse(PmdRunnable.java:112)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.processSource(PmdRunnable.java:132)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.run(PmdRunnable.java:80)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\n"
              },
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/src/database_migrations/create_parent_reports_table.sql"
                    }
                  }
                }
              ],
              "message": {
                "text": "ParseException: Parse exception in file '/mnt/c/Users/jaafa/Desktop/5555/ai-teddy/src/database_migrations/create_parent_reports_table.sql' at line 5, column 1: Encountered \u003cIDENTIFIER: \"GO\"\u003e.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"/\" ..."
              }
            }
          ]
        }
      ],
      "results": [],
      "tool": {
        "driver": {
          "informationUri": "https://docs.pmd-code.org/latest/",
          "name": "PMD",
          "rules": null,
          "version": "7.11.0"
        }
      }
    },
    {
      "results": [
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hume_fixed.py"
                },
                "region": {
                  "startColumn": 63,
                  "startLine": 148
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.hume_fixed, line 148)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/setup.py"
                },
                "region": {
                  "startColumn": 58,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.setup, line 48)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/adapters/edge/edge_ai_manager.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 1057
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.adapters.edge.edge_ai_manager, line 1057)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/accessibility/use_cases/use_cases.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.application.accessibility.use_cases.use_cases, line 15)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/emotion/use_cases/use_cases.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.application.emotion.use_cases.use_cases, line 17)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/enhancedchildinteraction/use_cases/use_cases.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.application.enhancedchildinteraction.use_cases.use_cases, line 17)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/parentreport/use_cases/use_cases.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.application.parentreport.use_cases.use_cases, line 16)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/advanced_progress_analyzer.py"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'try' statement on line 32 (src.application.services.advanced_progress_analyzer, line 33)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_analysis_service.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 2
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid non-printable character U+FEFF (src.application.services.ai.emotion_analysis_service, line 2)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_service.py"
                },
                "region": {
                  "startColumn": 71,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.application.services.ai.emotion_service, line 172)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/main_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.application.services.ai.main_service, line 150)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_recognition_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 179
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.application.services.audio.voice_recognition_service, line 179)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/child/child_bulk_operations_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/ar_vr_preferences_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 192
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.application.services.core.ar_vr_preferences_manager, line 192)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/data_cleanup_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid non-printable character U+0A0D (src.application.services.core.data_cleanup_service, line 5)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/external_services.py"
                },
                "region": {
                  "startColumn": 60,
                  "startLine": 39
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.application.services.core.external_services, line 39)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/notification_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 348
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 347 (src.application.services.core.notification_service, line 348)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/push_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 296
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 295 (src.application.services.core.push_service, line 296)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/services.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.application.services.core.services, line 15)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/service_resolvers.py"
                },
                "region": {
                  "startColumn": 37,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.application.services.core.service_resolvers, line 98)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/parent/parent_notification_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/parent/rate_monitor_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.application.services.parent.rate_monitor_service, line 167)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/automated_compliance.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/alerts/violation_alerter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/checkers/coppa_compliance.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/checkers/gdpr_compliance.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/managers/consent_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/managers/data_retention_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/compliance/reports/compliance_reporter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/core/domain/entities/start_teddy_system.py"
                },
                "region": {
                  "startColumn": 72,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.core.domain.entities.start_teddy_system, line 83)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/core/services/vault_secret_manager.py"
                },
                "region": {
                  "startColumn": 48,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax. Perhaps you forgot a comma? (src.core.services.vault_secret_manager, line 172)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/services/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 53,
                  "startLine": 775
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.domain.services.emotion_analyzer, line 775)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/streaming/aggregates/aggregates.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 366
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unexpected indent (src.domain.streaming.aggregates.aggregates, line 366)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/streaming/entities/entities.py"
                },
                "region": {
                  "startColumn": 29,
                  "startLine": 43
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.domain.streaming.entities.entities, line 43)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/edge/device_manager.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 86
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 85 (src.edge.device_manager, line 86)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/cloud_server_launcher.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 494
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 493 (src.infrastructure.cloud_server_launcher, line 494)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/file_manager.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 51 (src.infrastructure.file_manager, line 52)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/modern_container.py"
                },
                "region": {
                  "startColumn": 29,
                  "startLine": 291
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.modern_container, line 291)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/caching/multi_layer_cache.py"
                },
                "region": {
                  "startColumn": 28,
                  "startLine": 480
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.caching.multi_layer_cache, line 480)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/emotion/text_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 2
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid non-printable character U+FEFF (src.infrastructure.emotion.text_emotion_analyzer, line 2)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/exception_handling/global_exception_handler.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 380
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.exception_handling.global_exception_handler, line 380)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/enhanced_hume_2025.py"
                },
                "region": {
                  "startColumn": 72,
                  "startLine": 211
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.infrastructure.external_services.enhanced_hume_2025, line 211)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/enhanced_hume_integration_2025.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/hume_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 61,
                  "startLine": 179
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.infrastructure.external_services.hume_emotion_analyzer, line 179)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/hume_integration.py"
                },
                "region": {
                  "startColumn": 63,
                  "startLine": 168
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.infrastructure.external_services.hume_integration, line 168)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/state_manager.py"
                },
                "region": {
                  "startColumn": 27,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.external_services.state_manager, line 51)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/tts_playback.py"
                },
                "region": {
                  "startColumn": 70,
                  "startLine": 35
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.infrastructure.external_services.tts_playback, line 35)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/__main__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 42
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.external_services.__main__, line 42)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/clients/azure_speech_client.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.external_services.clients.azure_speech_client, line 112)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/clients/elevenlabs_client.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.external_services.clients.elevenlabs_client, line 76)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/clients/openai_speech_client.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.external_services.clients.openai_speech_client, line 92)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/clients/whisper_client.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.external_services.clients.whisper_client, line 81)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/graphql/pagination.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.graphql.pagination, line 61)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/graphql/performance.py"
                },
                "region": {
                  "startColumn": 26,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.graphql.performance, line 110)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/memory/memory_repository.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/memory/vector_memory_store.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/monitoring/metrics.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 122
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.monitoring.metrics, line 122)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/persistence/repositories/comprehensive_fix_and_report.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.persistence.repositories.comprehensive_fix_and_report, line 127)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/persistence/repositories/transcription_sqlite_repository.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (src.infrastructure.persistence.repositories.transcription_sqlite_repository, line 48)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_gateway.py"
                },
                "region": {
                  "startColumn": 36,
                  "startLine": 740
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.security.api_gateway, line 740)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/rbac_manager.py"
                },
                "region": {
                  "startColumn": 22,
                  "startLine": 664
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.security.rbac_manager, line 664)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security.py"
                },
                "region": {
                  "startColumn": 28,
                  "startLine": 328
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.security.security, line 328)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_solutions_integration.py"
                },
                "region": {
                  "startColumn": 5,
                  "startLine": 217
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 214 (src.infrastructure.security.security_solutions_integration, line 217)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/vault_integration.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 507
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 506 (src.infrastructure.security.vault_integration, line 507)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/vault_secrets_manager.py"
                },
                "region": {
                  "startColumn": 31,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.infrastructure.security.vault_secrets_manager, line 89)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ml/pipelines/child_interaction_pipeline.py"
                },
                "region": {
                  "startColumn": 1,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid non-printable character U+FEFF (src.ml.pipelines.child_interaction_pipeline, line 3)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/api_core_init.py"
                },
                "region": {
                  "startColumn": 76,
                  "startLine": 31
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unmatched ')' (src.presentation.api.api_core_init, line 31)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/federation_gateway.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 581
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 580 (src.presentation.api.graphql.federation_gateway, line 581)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/rest/smart_restructure.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 409
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.presentation.api.rest.smart_restructure, line 409)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/main_window.py"
                },
                "region": {
                  "startColumn": 34,
                  "startLine": 151
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.presentation.ui.main_window, line 151)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/audio/audio_engine.py"
                },
                "region": {
                  "startColumn": 58,
                  "startLine": 238
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'closing parenthesis '}' does not match opening parenthesis '(' on line 237 (src.presentation.ui.audio.audio_engine, line 238)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/networking/websocket_client.py"
                },
                "region": {
                  "startColumn": 26,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.presentation.ui.networking.websocket_client, line 64)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/widgets/conversation_widget.py"
                },
                "region": {
                  "startColumn": 29,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (src.presentation.ui.widgets.conversation_widget, line 96)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/coverage_tracker.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 348
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 347 (src.testing.coverage_tracker, line 348)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/mutation_engine.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 283
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected an indented block after 'except' statement on line 282 (src.testing.mutation_engine, line 283)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_backend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1056
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (tests.test_comprehensive_backend, line 1056)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/architecture/test_phase2_architecture_modernization.py"
                },
                "region": {
                  "startColumn": 21,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'invalid syntax (tests.architecture.test_phase2_architecture_modernization, line 45)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_child_repository.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'source code string cannot contain null bytes'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_edge_ai_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 389
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'expected 'except' or 'finally' block (tests.unit.test_edge_ai_manager, line 389)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_security_solutions.py"
                },
                "region": {
                  "startColumn": 35,
                  "startLine": 194
                }
              }
            }
          ],
          "message": {
            "text": "Parsing failed: 'unterminated string literal (detected at line 194) (tests.unit.test_security_solutions, line 194)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "api/endpoints/audio.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 124
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response_audio'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/ai.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 367
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'reset_response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/safety.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 231
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'baseline_metrics'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 504
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'exc'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/monitoring/chaos_metrics.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'service_name'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/monitoring/chaos_metrics.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 120
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'exc'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "monitoring/emergency/api/emergency_response.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'category'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 68
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 85
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 100
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 124
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 142
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 148
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 160
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 162
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 168
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 180
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 194
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 206
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 211
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 214
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 217
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 253
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 258
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 269
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 273
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 276
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 279
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 284
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 288
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 64,
                  "startLine": 297
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 300
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 306
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 308
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 312
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 321
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 329
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 333
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 337
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 342
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 345
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 348
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 352
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 360
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 368
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 376
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 381
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 384
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 388
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 390
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 399
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 408
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 411
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 419
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 423
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 426
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 428
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 430
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 438
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 441
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 446
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 450
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 453
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 455
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 457
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 459
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 465
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 470
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 472
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 474
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 476
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 483
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 488
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 490
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 492
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 494
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 501
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 507
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 513
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 516
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 519
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 523
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 530
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 537
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 544
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 548
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 550
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 564
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 566
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 340
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'enhanced_audio_processor'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 343
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'advanced_ai_orchestrator'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 346
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'advanced_content_filter'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 401
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'server_tasks'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Unused Dict imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused import logging"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/adapters/edge/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'edge_ai_manager' due to 'invalid syntax (src.adapters.edge.edge_ai_manager, line 1057)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/arvr/services/arvr_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/arvr/services/arvr_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/cleanup/services/cleanup_orchestrator.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 268
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/cleanup/services/cleanup_orchestrator.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 274
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/commands/command_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/commands/command_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/commands/command_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/emotion/services/emotion_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/emotion/services/emotion_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/memory/services/memory_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/memory/services/memory_orchestrator.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/patterns/observer.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/patterns/strategy.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 80
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'id'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 82
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 93
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/queries/query_bus.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 264
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'id'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/circuit_breaker.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 274
                }
              }
            }
          ],
          "message": {
            "text": "Too many positional arguments for method call"
          },
          "ruleId": "too-many-function-args"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/screen_time_manager.py"
                },
                "region": {
                  "startColumn": 25,
                  "startLine": 280
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'int'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 42
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 60
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 87
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 108
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 120
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/ai_service_interface.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 125
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused AudioConfig imported from audio.audio_processing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused AdvancedEmotionAnalyzer imported from domain.services.advanced_emotion_analyzer"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/edge_ai_integration_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Unused AIResponseService imported from application.services.ai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/email_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/email_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/email_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'session'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 102
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'session'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'start_time'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'session'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 168
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'cutoff_date'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 170
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'session'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/emotion_database_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 184
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'session'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "Unused import hashlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Unused import logging"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused ABC imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused abstractmethod imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused defaultdict imported from collections"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused dataclass imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused field imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unused Enum imported from enum"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused google.generativeai imported as genai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused import openai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused import torch"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoModelForCausalLM imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoTokenizer imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Unused redis.asyncio imported as aioredis"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused Conversation imported from src.core.domain.entities.conversation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_anthropic_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused get_config imported from src.infrastructure.config"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "Unused import hashlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused defaultdict imported from collections"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused import anthropic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused google.generativeai imported as genai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused import openai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoModelForCausalLM imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoTokenizer imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Unused redis.asyncio imported as aioredis"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Unused Conversation imported from src.core.domain.entities.conversation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused get_config imported from src.infrastructure.config"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "Unused import hashlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Unused import logging"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused ABC imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused abstractmethod imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused defaultdict imported from collections"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused dataclass imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused field imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unused Enum imported from enum"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused import anthropic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused import openai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused import torch"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoModelForCausalLM imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoTokenizer imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Unused redis.asyncio imported as aioredis"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused Conversation imported from src.core.domain.entities.conversation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_google_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused get_config imported from src.infrastructure.config"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 5
                }
              }
            }
          ],
          "message": {
            "text": "Unused import hashlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Unused import logging"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused ABC imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused abstractmethod imported from abc"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused defaultdict imported from collections"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused dataclass imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused field imported from dataclasses"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unused Enum imported from enum"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused import anthropic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused google.generativeai imported as genai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused import torch"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoModelForCausalLM imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoTokenizer imported from transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Unused redis.asyncio imported as aioredis"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused Conversation imported from src.core.domain.entities.conversation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_openai_adapter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused get_config imported from src.infrastructure.config"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 55,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 145
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 193
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 200
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 205
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 207
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 210
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 215
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 218
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 239
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 246
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Unused LLMParameterValidator imported from validation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 42
                }
              }
            }
          ],
          "message": {
            "text": "Unused ModelConfig imported from caching"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/llm_service_factory.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 43
                }
              }
            }
          ],
          "message": {
            "text": "Unused ModelSelectionRequest imported from selection"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/personality_engine.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 149
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'personality'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/response_generator.py"
                },
                "region": {
                  "startColumn": 54,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/enums.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/enums.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 38
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/enums.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 47
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 55
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 60
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 84
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 94
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 108
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 122
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 132
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 137
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 142
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 151
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 156
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 161
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 21,
                  "startLine": 166
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 175
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 22,
                  "startLine": 176
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 181
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 190
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 201
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 211
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 226
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 236
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 241
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 88
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 93
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 107
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 117
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 126
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 141
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 146
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 160
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 171
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 180
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 185
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 200
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 210
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 220
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 235
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 240
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/interfaces.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 68
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 73
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 84
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 90
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 94
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 134
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 138
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 170
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 178
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 182
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 190
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 194
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 201
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 208
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 246
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 269
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 275
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 279
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused Enum imported from enum"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/models.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/core/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 35
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 43,
                  "startLine": 60
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused generate_simple imported from src.application.services.ai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused LLMServiceFactory imported from src.application.services.ai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/examples/simple_usage.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused GenerationRequest imported from src.application.services.ai"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 38
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 25,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 91
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 124
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 62,
                  "startLine": 157
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 159
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 56,
                  "startLine": 160
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 162
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 56,
                  "startLine": 163
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 55,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 170
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 64,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 187
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 198
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 205
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 223
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 231
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 234
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 241
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 254
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 30,
                  "startLine": 259
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 265
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 278
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 288
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 294
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 300
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 305
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 314
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/response_generator.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 67
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 93
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 135
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 142
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 152
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/session_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Unused Child imported from src.domain.entities.child"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 40
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 32,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 26,
                  "startLine": 47
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 120
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 124
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 128
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 133
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 138
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 145
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 156
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 202
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/modules/transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 60
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 67
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 95
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 101
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 105
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 107
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 120
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 126
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 144
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 148
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 151
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 153
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 29,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 158
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 168
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 171
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 173
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 181
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 195
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 206
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 212
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 215
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 217
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 238
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 259
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 264
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 272
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 276
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 288
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 300
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 304
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 310
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 320
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 324
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 337
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 342
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 348
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 352
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 354
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 359
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 363
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 368
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 382
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/base_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused IAIProvider imported from core"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 39
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 62
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 67
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 102
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 122
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 125
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 133
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 137
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 143
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 146
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 148
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 152
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 163
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 171
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 173
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 178
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 182
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 186
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 209
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 213
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 217
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 221
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 225
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 236
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 240
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 243
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 256
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 258
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 262
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 272
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 279
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 281
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 296
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 302
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 304
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 307
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 311
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 330
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 343
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 350
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 352
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 366
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 368
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 375
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 380
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 394
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 401
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 403
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 409
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 414
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 436
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 441
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 445
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 286
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused ResponseSafety imported from core"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/providers/openai_provider.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused ErrorType imported from core"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/selection/model_selector.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 58
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/selection/model_selector.py"
                },
                "region": {
                  "startColumn": 45,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/selection/model_selector.py"
                },
                "region": {
                  "startColumn": 32,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/selection/model_selector.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 75
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/selection/model_selector.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 40
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 58
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 68
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 75
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 84
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 87
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 93
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/ai/validation/parameter_validation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_playback_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 425
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_recording_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_recording_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 269
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_recording_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 273
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_recording_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 277
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 35
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 23,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 80
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 101
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'format'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/audio_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 30
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 38
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 55
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 85
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 89
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 91
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 98
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 101
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 132
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 84
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'stdout'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_audio_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 30
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 39
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_cache_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_interaction_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'voice_recognition_service' due to 'expected 'except' or 'finally' block (src.application.services.audio.voice_recognition_service, line 179)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_interaction_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 208
                }
              }
            }
          ],
          "message": {
            "text": "Dangerous default value [] as argument"
          },
          "ruleId": "dangerous-default-value"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 38
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 32,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 58
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 79
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 102
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 116
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 132
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_base.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused ProviderResult imported from src.domain.audio.models"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 60
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 85
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 95
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 133
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 146
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 152
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 173
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 177
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 181
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 193
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 201
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 208
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 219
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 222
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_provider_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 86
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_service_refactored.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 37,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 30
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 48
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 76
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 82
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 87
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 90
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 121
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 125
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 138
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 141
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 145
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 157
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 159
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 163
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 173
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 175
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 185
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 187
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 201
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 203
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 42,
                  "startLine": 204
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 214
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 218
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 220
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 221
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 222
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 228
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 236
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 239
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 242
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 244
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 18,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 246
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 243
                }
              }
            }
          ],
          "message": {
            "text": "Number of parameters was 3 in 'BaseProviderService.process' and is now 4 in overriding 'SynthesisService.process' method"
          },
          "ruleId": "arguments-differ"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 243
                }
              }
            }
          ],
          "message": {
            "text": "Variadics removed in overriding 'SynthesisService.process' method"
          },
          "ruleId": "arguments-differ"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_synthesis_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused import os"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 41,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 55
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 21,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 63
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 69
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 71
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/audio/voice_transcription_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 75
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 437
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 441
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 445
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 449
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 454
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 457
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 464
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 469
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 472
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 478
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 483
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 486
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 489
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 491
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 501
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 508
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 513
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 517
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 522
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 524
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 528
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 533
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 538
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 540
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 545
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 548
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 551
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 557
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 562
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 566
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 570
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 578
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 582
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 589
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 635
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 640
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 122
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 132
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 137
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 142
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 147
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 156
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 161
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 166
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 171
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 176
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 265
                }
              }
            }
          ],
          "message": {
            "text": "Use of exec"
          },
          "ruleId": "exec-used"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 270
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 275
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 280
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'name'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused import os"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Unused Callable imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Unused Type imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused urlparse imported from urllib.parse"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Unused import docker"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/plugins/plugin_architecture.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Unused Protocol imported from typing_extensions"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 564
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'priority'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 739
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'worker_id'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 876
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'analysis_type'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 918
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'data'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 1035
                }
              }
            }
          ],
          "message": {
            "text": "Too many arguments for logging format string"
          },
          "ruleId": "logging-too-many-args"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Unused import librosa"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Unused numpy imported as np"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/processing/async_processor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 27
                }
              }
            }
          ],
          "message": {
            "text": "Unused Image imported from PIL"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/reporting/chart_generator.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused seaborn imported as sns"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/reporting/pdf_generator.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused letter imported from reportlab.lib.pagesizes"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/reporting/pdf_generator.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused canvas imported from reportlab.pdfgen"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/reporting/report_repository.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'i'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 547
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'category'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_security_gateway.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_security_gateway.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_security_gateway.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_security_gateway.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/api_security_gateway.py"
                },
                "region": {
                  "startColumn": 60,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused hashes imported from cryptography.hazmat.primitives"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Unused rsa imported from cryptography.hazmat.primitives.asymmetric"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Unused padding imported from cryptography.hazmat.primitives.asymmetric"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Unused validator imported from pydantic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 25
                }
              }
            }
          ],
          "message": {
            "text": "Unused SecurityException imported from domain.exceptions"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/audit_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/jwt_enhanced.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 68
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 128
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 145
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 149
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 156
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 169
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 177
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 182
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 189
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 199
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 206
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 212
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 218
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 223
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 263
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 270
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 273
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 277
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 281
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 284
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 291
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 296
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 304
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 308
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 313
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 321
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 324
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 327
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 334
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 336
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 339
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 346
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 369
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 372
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 377
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 380
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 387
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 390
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 398
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 402
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 406
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 414
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 417
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 424
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 428
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 434
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 440
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 442
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 447
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 456
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 464
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 470
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 474
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 482
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 486
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 489
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 494
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 504
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 514
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 517
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 521
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 118
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused datetime imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/safe_expression_parser.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused validator imported from pydantic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/secrets_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/secrets_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/secrets_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/secrets_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/secrets_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 119
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 571
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_audit_logger.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 604
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'cutoff'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'vault_secrets_manager' due to 'invalid syntax (src.infrastructure.security.vault_secrets_manager, line 89)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/security_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 195
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'ip_address'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 55
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 74
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 96
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 100
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 121
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 143
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 159
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 162
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 180
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 190
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 200
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 209
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 47,
                  "startLine": 212
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 218
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 231
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 239
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 241
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 250
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 256
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 259
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 273
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 278
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 287
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 299
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 309
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 315
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 323
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 333
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 347
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 358
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 372
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 376
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 383
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 396
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 401
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 408
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 417
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 426
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 429
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 431
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 437
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 445
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 448
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 450
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/unified_encryption_service.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused serialization imported from cryptography.hazmat.primitives"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 68
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 73
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 88
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 116
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 135
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 154
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 178
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 189
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 196
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 202
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 206
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 211
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 223
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 227
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 231
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 235
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 240
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 248
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 253
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 257
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 260
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 269
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 272
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 275
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 278
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 284
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 289
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 294
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 305
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 311
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 339
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 351
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 355
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 365
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 369
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 381
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 386
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 397
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 401
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 406
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 411
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 420
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 431
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 435
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 440
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 445
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 537
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 82
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 87
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 101
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused import weakref"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused Field imported from pydantic"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/state/application_state_manager.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused Protocol imported from typing_extensions"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ml/continuous_learning/monitoring/performance_monitor.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 686
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'final_report'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ml/deployment/kubeflow_deployer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.ml.pipelines.child_interaction_pipeline' due to 'invalid non-printable character U+FEFF (src.ml.pipelines.child_interaction_pipeline, line 3)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/ml/pipelines/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'child_interaction_pipeline' due to 'invalid non-printable character U+FEFF (src.ml.pipelines.child_interaction_pipeline, line 3)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/enterprise_dashboard.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 402
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'current_time'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.presentation.ui.audio.audio_engine' due to 'closing parenthesis '}' does not match opening parenthesis '(' on line 237 (src.presentation.ui.audio.audio_engine, line 238)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.presentation.ui.main_window' due to 'invalid syntax (src.presentation.ui.main_window, line 151)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.presentation.ui.networking.websocket_client' due to 'invalid syntax (src.presentation.ui.networking.websocket_client, line 64)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.presentation.ui.widgets.conversation_widget' due to 'invalid syntax (src.presentation.ui.widgets.conversation_widget, line 96)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 228
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QDateTime imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QEasingCurve imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QPoint imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QPropertyAnimation imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QRect imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QRunnable imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSettings imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSize imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QThreadPool imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 49
                }
              }
            }
          ],
          "message": {
            "text": "Unused QUrl imported from PySide6.QtCore"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Unused QAction imported from PySide6.QtGui as QGuiAction"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QBrush imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QColor imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QDesktopServices imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QGradient imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QLinearGradient imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QMovie imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QPainter imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QPalette imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QPen imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSyntaxHighlighter imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QTextCharFormat imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused QTextCursor imported from PySide6.QtGui"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QCheckBox imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QFrame imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QHeaderView imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QScrollArea imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSizePolicy imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSlider imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSpacerItem imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QSpinBox imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QStyle imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QTableWidget imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/modern_ui.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Unused QTableWidgetItem imported from PySide6.QtWidgets"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 303
                }
              }
            }
          ],
          "message": {
            "text": "Too many positional arguments for method call"
          },
          "ruleId": "too-many-function-args"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 373
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'expires_at'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 515
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'str'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/authentication.py"
                },
                "region": {
                  "startColumn": 29,
                  "startLine": 590
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'str'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Unused import prometheus_client"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Unused Summary imported from prometheus_client"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Unused execute imported from graphql"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Unused validate imported from graphql"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/performance_monitor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "Unused ExecutionResult imported from graphql.execution"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/resolvers.py"
                },
                "region": {
                  "startColumn": 30,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'id'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/schema.py"
                },
                "region": {
                  "startColumn": 26,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'id'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/schema.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'id'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'federation_gateway' due to 'expected an indented block after 'except' statement on line 580 (src.presentation.api.graphql.federation_gateway, line 581)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 38
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 61
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 66
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 87
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 139
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 192
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 197
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 201
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 242
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 251
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused Callable imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/middleware/auth.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused SecretType imported from infrastructure.security.secrets_manager"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/rest/production_api.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.infrastructure.modern_container' due to 'invalid syntax (src.infrastructure.modern_container, line 291)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/rest/production_api.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.infrastructure.monitoring.metrics' due to 'expected 'except' or 'finally' block (src.infrastructure.monitoring.metrics, line 122)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/grpc/client.py"
                },
                "region": {
                  "startColumn": 33,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'format'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/grpc/client.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'request'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/grpc/client.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'request'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'audio.audio_engine' due to 'closing parenthesis '}' does not match opening parenthesis '(' on line 237 (src.presentation.ui.audio.audio_engine, line 238)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'main_window' due to 'invalid syntax (src.presentation.ui.main_window, line 151)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'networking.websocket_client' due to 'invalid syntax (src.presentation.ui.networking.websocket_client, line 64)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'widgets.conversation_widget' due to 'invalid syntax (src.presentation.ui.widgets.conversation_widget, line 96)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/audio/audio_recorder.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/audio/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'audio_engine' due to 'closing parenthesis '}' does not match opening parenthesis '(' on line 237 (src.presentation.ui.audio.audio_engine, line 238)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/networking/message_sender.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/networking/message_sender.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/networking/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'websocket_client' due to 'invalid syntax (src.presentation.ui.networking.websocket_client, line 64)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/widgets/audio_widget.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'audio.audio_engine' due to 'closing parenthesis '}' does not match opening parenthesis '(' on line 237 (src.presentation.ui.audio.audio_engine, line 238)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/widgets/waveform_widget.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/ui/widgets/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'conversation_widget' due to 'invalid syntax (src.presentation.ui.widgets.conversation_widget, line 96)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Any' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Dict' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'List' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'Optional' (imported line 1)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 221
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 28,
                  "startLine": 293
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 321
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'median_response_time'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'min_response_time'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 326
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'max_response_time'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 24,
                  "startLine": 406
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 411
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'exc'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 421
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'throughput'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 467
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'normal_duration'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 479
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'spike_duration'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 527
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'initial_cpu'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 548
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'load_responses'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 604
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'duration'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/performance_tester.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 647
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/smart_fuzzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 20
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'coverage_tracker' due to 'expected an indented block after 'except' statement on line 347 (src.testing.coverage_tracker, line 348)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/smart_fuzzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'mutation_engine' due to 'expected an indented block after 'except' statement on line 282 (src.testing.mutation_engine, line 283)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/smart_fuzzer.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'i'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'coverage_tracker' due to 'expected an indented block after 'except' statement on line 347 (src.testing.coverage_tracker, line 348)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testing/__init__.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'mutation_engine' due to 'expected an indented block after 'except' statement on line 282 (src.testing.mutation_engine, line 283)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/ai_test_generator.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 203
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'i'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 40
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 58
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 91
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 108
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 110
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 117
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 120
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 126
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 133
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 136
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 139
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 146
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 150
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 158
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 161
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 169
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 176
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 188
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 196
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 208
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 215
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 227
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 234
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 246
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 250
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 255
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 264
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 276
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 278
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 287
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 296
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 308
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 310
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 314
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 319
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 328
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 340
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 342
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 346
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 351
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 360
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 372
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 374
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 378
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 383
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 392
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 404
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 413
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 425
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 434
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 446
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 448
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 452
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 457
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 465
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 483
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 491
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 507
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 514
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 529
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 531
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 535
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 540
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 549
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 561
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 569
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 581
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 589
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 601
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 603
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 607
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 612
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 621
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 632
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 640
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 651
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 653
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 662
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 666
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 671
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 677
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 683
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 693
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 703
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 705
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 727
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 731
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 734
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 737
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 740
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 747
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 754
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 756
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 760
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 774
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 779
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 660
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'total_performance_score'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused import os"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Unused import sys"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Unused Path imported from pathlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused Set imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused Tuple imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused import pytest"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/comprehensive_testing_framework.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Unused import pytest_asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'sys' (imported line 7)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 46
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'sys' (imported line 7)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 53
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'sys' (imported line 7)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Unused import torch"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Unused import pyaudio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/conftest.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Unused import redis"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 83
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 88
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 93
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 99
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 106
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 108
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 111
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 118
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 127
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 157
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 159
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 169
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 173
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 180
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 182
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 222
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 224
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 239
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 243
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 250
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 252
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 261
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 294
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 296
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 312
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 316
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 323
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 334
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 364
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 366
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 380
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 384
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 391
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 393
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 402
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 432
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 434
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 447
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 451
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 458
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 460
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 464
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 468
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 475
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 481
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 493
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 495
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 501
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 506
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 509
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 520
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 532
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 543
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 549
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 554
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 560
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 564
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 568
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 571
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 575
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 578
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 581
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 585
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 589
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 593
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 597
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 604
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 606
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 615
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 619
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 621
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 624
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 627
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 631
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 634
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 642
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 647
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused import os"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused Path imported from pathlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused Union imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/contract_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused import pytest"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 58
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 81
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "Unused BaseAIService imported from src.application.services.ai.interfaces.ai_service_interface"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "Unused IAIService imported from src.application.services.ai.interfaces.ai_service_interface"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "Unused IEmotionAnalyzer imported from src.application.services.ai.interfaces.ai_service_interface"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unused ModerationService imported from src.application.services.core.moderation_service"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Unused TranscriptionService imported from src.application.services.core.transcription_service"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Unused Voice imported from src.infrastructure.external_services.mock.elevenlabs"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Unused generate imported from src.infrastructure.external_services.mock.elevenlabs"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused AutoTokenizer imported from src.infrastructure.external_services.mock.transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 54
                }
              }
            }
          ],
          "message": {
            "text": "Unused pipeline imported from src.infrastructure.external_services.mock.transformers"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Unused ChildProfile imported from src.application.services.models"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Unused ServiceRequest imported from src.application.services.models"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 65
                }
              }
            }
          ],
          "message": {
            "text": "Unused ServiceResponse imported from src.application.services.models"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Unused UseCaseFactory imported from src.application.services.core.use_cases.use_cases"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 77
                }
              }
            }
          ],
          "message": {
            "text": "Unused VoiceInteractionUseCase imported from src.application.services.core.use_cases.use_cases"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 118
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 147
                }
              }
            }
          ],
          "message": {
            "text": "No exception type(s) specified"
          },
          "ruleId": "bare-except"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 115
                }
              }
            }
          ],
          "message": {
            "text": "Unused AudioStream imported from src.core.domain.entities.audio_stream"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 123
                }
              }
            }
          ],
          "message": {
            "text": "Unused Child imported from src.domain.entities.child"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Unused Conversation imported from src.domain.entities.conversation"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 144
                }
              }
            }
          ],
          "message": {
            "text": "Unused ModerationService imported from src.application.services.core.moderation_service"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/final_test.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import importlib"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 59
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 63
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 92
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 112
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 138
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 146
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 159
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 161
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 166
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 169
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 171
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 174
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 181
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 185
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 187
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 191
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 194
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 197
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 62,
                  "startLine": 202
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 208
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 213
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 217
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 220
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 222
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 227
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 235
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 237
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 13,
                  "startLine": 239
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 23,
                  "startLine": 240
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 22,
                  "startLine": 241
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 26,
                  "startLine": 242
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 35,
                  "startLine": 243
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 253
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 258
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 263
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 276
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 280
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 290
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 292
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 299
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 305
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 307
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 315
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 319
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 321
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 324
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 327
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 331
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 334
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 341
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 348
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 350
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 355
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 291
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'stdout'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 291
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'stderr'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Unused import random"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused import subprocess"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 19
                }
              }
            }
          ],
          "message": {
            "text": "Unused Set imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/mutation_tests.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 21
                }
              }
            }
          ],
          "message": {
            "text": "Unused import pytest"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/simple_sanity_check.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/simple_sanity_check.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/simple_sanity_check.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/simple_sanity_check.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 73
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/simple_sanity_check.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 82
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_backward_compatibility.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_backward_compatibility.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Statement seems to have no effect"
          },
          "ruleId": "pointless-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_basic_functionality.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 178
                }
              }
            }
          ],
          "message": {
            "text": "Unused AITeddyBearService imported from src.application.main_service"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 809
                }
              }
            }
          ],
          "message": {
            "text": "Using variable 'result' before assignment"
          },
          "ruleId": "used-before-assignment"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 935
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'conversation'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused import json"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Unused timedelta imported from datetime"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused patch imported from unittest.mock"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused Dict imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_comprehensive_frontend.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused List imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 51,
                  "startLine": 131
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 59,
                  "startLine": 132
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 40,
                  "startLine": 133
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 38,
                  "startLine": 134
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 40,
                  "startLine": 135
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 156
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'db'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.domain.services.emotion_analyzer' due to 'unmatched ')' (src.domain.services.emotion_analyzer, line 775)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 163
                }
              }
            }
          ],
          "message": {
            "text": "Unused AITeddyBearService imported from src.application.main_service"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 164
                }
              }
            }
          ],
          "message": {
            "text": "Unused SpeechDisorderDetector imported from src.audio.speech_disorder_detector"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_integration.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 165
                }
              }
            }
          ],
          "message": {
            "text": "Unused EmotionAnalyzer imported from src.domain.services.emotion_analyzer"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_simple.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_simple.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 18
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_simple.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 22
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_simple.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 33
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/test_simple.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Trailing whitespace"
          },
          "ruleId": "trailing-whitespace"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/base.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 57
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unexpected keyword argument 'id' in constructor call"
          },
          "ruleId": "unexpected-keyword-arg"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unexpected keyword argument 'parent_id' in constructor call"
          },
          "ruleId": "unexpected-keyword-arg"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unexpected keyword argument 'preferences' in constructor call"
          },
          "ruleId": "unexpected-keyword-arg"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unexpected keyword argument 'created_at' in constructor call"
          },
          "ruleId": "unexpected-keyword-arg"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 15,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "No value for argument 'device_id' in constructor call"
          },
          "ruleId": "no-value-for-parameter"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/builders.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 249
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'set'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/framework/validators.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 309
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'info_type'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/test_ai_modules_integration.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.application.services.ai.main_service' due to 'expected 'except' or 'finally' block (src.application.services.ai.main_service, line 150)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/test_ai_modules_integration.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused Dict imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/test_ai_modules_integration.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/test_ai_modules_integration.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "text": "Unused patch imported from unittest.mock"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/test_voice_api_integration.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 364
                }
              }
            }
          ],
          "message": {
            "text": "Unused import whisper"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/performance/test_system_performance.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 64
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'exc'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/performance/test_system_performance.py"
                },
                "region": {
                  "startColumn": 12,
                  "startLine": 109
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'result'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/performance/test_system_performance.py"
                },
                "region": {
                  "startColumn": 20,
                  "startLine": 257
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'response'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_child_protection_comprehensive.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "String statement has no effect"
          },
          "ruleId": "pointless-string-statement"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_child_protection_comprehensive.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 111
                }
              }
            }
          ],
          "message": {
            "text": "Unnecessary pass statement"
          },
          "ruleId": "unnecessary-pass"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 320
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'handler'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 451
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'audit_logger'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 6
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "Unused import os"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused AsyncMock imported from unittest.mock"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused MagicMock imported from unittest.mock"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 13
                }
              }
            }
          ],
          "message": {
            "text": "Unused patch imported from unittest.mock"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/security/test_phase1_security_foundation.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused Fernet imported from cryptography.fernet"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_ai_safety_system.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 285
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'older_result'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_ai_safety_system.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Unused Optional imported from typing"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_clean_container.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.infrastructure.modern_container' due to 'invalid syntax (src.infrastructure.modern_container, line 291)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_clean_container.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.infrastructure.modern_container' due to 'invalid syntax (src.infrastructure.modern_container, line 291)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_container.py"
                },
                "region": {
                  "startColumn": 28,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Lambda may not be necessary"
          },
          "ruleId": "unnecessary-lambda"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_conversation_repository.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 456
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'created_conversation'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_conversation_repository.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 506
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'created_conversation'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_distributed_processor.py"
                },
                "region": {
                  "startColumn": 57,
                  "startLine": 52
                }
              }
            }
          ],
          "message": {
            "text": "Using variable 'import_error' before assignment"
          },
          "ruleId": "used-before-assignment"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_distributed_processor.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Unused RAY_AVAILABLE imported from src.infrastructure.ai.distributed_processor"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_emotion_analyzer.py"
                },
                "region": {
                  "startColumn": 0,
                  "startLine": 3
                }
              }
            }
          ],
          "message": {
            "text": "Cannot import 'src.domain.services.emotion_analyzer' due to 'unmatched ')' (src.domain.services.emotion_analyzer, line 775)'"
          },
          "ruleId": "syntax-error"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_graphql_federation.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 15
                }
              }
            }
          ],
          "message": {
            "text": "Unused import asyncio"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_graphql_federation.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused AuthConfig imported from src.infrastructure.graphql.authentication"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_graphql_federation.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Unused AuthenticationService imported from src.infrastructure.graphql.authentication"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 53,
                  "startLine": 32
                }
              }
            }
          ],
          "message": {
            "text": "Using variable 'import_error' before assignment"
          },
          "ruleId": "used-before-assignment"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_homomorphic_encryption.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 16
                }
              }
            }
          ],
          "message": {
            "text": "Unused ProcessingMode imported from src.infrastructure.security.homomorphic_encryption"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_multi_layer_cache.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Unused L2RedisCache imported from src.infrastructure.caching_advanced.multi_layer_cache"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_multi_layer_cache.py"
                },
                "region": {
                  "startColumn": 4,
                  "startLine": 14
                }
              }
            }
          ],
          "message": {
            "text": "Unused L3CDNCache imported from src.infrastructure.caching_advanced.multi_layer_cache"
          },
          "ruleId": "unused-import"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 37
                }
              }
            }
          ],
          "message": {
            "text": "Reimport 'base64' (imported line 7)"
          },
          "ruleId": "reimported"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 57,
                  "startLine": 101
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'format'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 56,
                  "startLine": 137
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'format'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 60,
                  "startLine": 140
                }
              }
            }
          ],
          "message": {
            "text": "Redefining built-in 'format'"
          },
          "ruleId": "redefined-builtin"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 16,
                  "startLine": 313
                }
              }
            }
          ],
          "message": {
            "text": "Unused variable 'wav_data'"
          },
          "ruleId": "unused-variable"
        },
        {
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/test_voice_service.py"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Unused Any imported from typing"
          },
          "ruleId": "unused-import"
        }
      ],
      "tool": {
        "driver": {
          "informationUri": "https://pylint.org",
          "name": "Pylint",
          "rules": null,
          "version": "3.3.6"
        }
      }
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://github.com/mgechev/revive",
          "name": "revive",
          "rules": null
        }
      }
    },
    {
      "invocations": [
        {
          "executionSuccessful": true,
          "toolExecutionNotifications": [
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/api/api_core_init.py:31:\n `f\"⚠️ Legacy audio router not available: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/security/vault_secrets_manager.py:89:\n `[str]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/audio/voice_recognition_service.py:165:\n `try:\r\n            segments = result.get(\"segments\", [])\r\n            if not segments:\r\n                return 0.5\r\n\r\n            # Average probability from all segments\r\n            total_prob = sum(segment.get(\"avg_logprob\", -1.0) for segment in segments)\r\n            avg_logprob = total_prob / len(segments)\r\n\r\n            # Convert log probability to confidence (rough approximation)\r\n            confidence = max(0.0, min(1.0, (avg_logprob + 1.0) / 1.0))\r\n            return confidence\r\n\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/advanced_progress_analyzer.py:32:\n `try:` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/domain/streaming/entities/entities.py:43:\n `[Dict]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/enhancedchildinteraction/use_cases/use_cases.py:17:\n `def __init__(\r\n        self,\r\n        audio_processor: EnhancedAudioProcessor,\r\n        ai_orchestrator: AdvancedAIOrchestrator,\r\n        content_filter: AdvancedContentFilter\r\n\r\n    def get_session_summary(self, child_id: str) -\u003e Optional[Dict[str, Any]]:\r\n        \"\"\"الحصول على ملخص الجلسة\"\"\"\r\n        \r\n        if child_id not in self.active_sessions:\r\n            return None\r\n        \r\n        session = self.active_sessions[child_id]\r\n        \r\n        return {\r\n            'child_info': {\r\n                'id': session.child_id,\r\n                'name': session.child_name,\r\n                'age': session.child_age\r\n            },\r\n            'session_stats': {\r\n                'duration_minutes': (time.time() - session.session_start) / 60,\r\n                'interaction_count': session.interaction_count,\r\n                'average_processing_time': (\r\n                    session.total_processing_time / max(1, session.interaction_count)\r\n                ),\r\n                'topics_discussed': session.topics_discussed,\r\n                'educational_progress': session.educational_progress\r\n            },\r\n            'mood_analysis': {\r\n                'mood_history': session.mood_history,\r\n                'current_mood': session.mood_history[-1] if session.mood_history else 'unknown',\r\n                'mood_stability': self._calculate_mood_stability(session.mood_history)\r\n            },\r\n            'safety_summary': {\r\n                'total_violations': len(session.safety_violations),\r\n                'violation_types': list(set(v['type'] for v in session.safety_violations)),\r\n                'last_violation': session.safety_violations[-1] if session.safety_violations else None\r\n            }\r\n        }\r\n    \r\n\r\n    def get_service_statistics(self) -\u003e Dict[str, Any]:\r\n        \"\"\"الحصول على إحصائيات الخدمة الشاملة\"\"\"\r\n        \r\n        # إحصائيات من المكونات الفرعية\r\n        audio_stats = self.audio_processor.get_performance_stats()\r\n        ai_stats = asyncio.create_task(self.ai_orchestrator.get_performance_report())\r\n        filter_stats = self.content_filter.get_filter_statistics()\r\n        \r\n        return {\r\n            'service_stats': self.service_stats,\r\n            'component_stats': {\r\n                'audio_processor': audio_stats,\r\n                'content_filter': filter_stats,\r\n                'active_sessions': len(self.active_sessions)\r\n            },\r\n            'performance_metrics': {\r\n                'success_rate': (\r\n                    self.service_stats['successful_interactions'] / \r\n                    max(1, self.service_stats['total_interactions'])\r\n                ) * 100,\r\n                'safety_rate': (\r\n                    (self.service_stats['total_interactions'] - self.service_stats['safety_violations']) /\r\n                    max(1, self.service_stats['total_interactions'])\r\n                ) * 100,\r\n                'educational_rate': (\r\n                    self.service_stats['educational_interactions'] /\r\n                    max(1, self.service_stats['total_interactions'])\r\n                ) * 100\r\n            }\r\n        }` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/ui/widgets/conversation_widget.py:96:\n `[datetime]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/memory/vector_memory_store.py:1:\n `ÿþ\"` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/hume_fixed.py:36:\n `\r\n    \"\"\"\r\n    🎭 HUME AI Integration Class - FIXED for v0.9.0\r\n    يدعم نموذجي Batch و Stream للتحليل\r\n    \"\"\"\r\n    \r\n    def __init__(self, api_key: Optional[str] = None):\r\n        self.api_key = api_key or os.getenv(\"HUME_API_KEY\")\r\n        \r\n        if not self.api_key:\r\n            raise ValueError(\"❌ HUME API Key not found! Set HUME_API_KEY environment variable\")\r\n        \r\n        logger.info(f\"🔑 HUME API Key loaded: {self.api_key[:8]}...\")\r\n        \r\n        # إنشاء العملاء\r\n        if HUME_AVAILABLE:\r\n            self.client = HumeClient(api_key=self.api_key)\r\n            self.async_client = AsyncHumeClient(api_key=self.api_key)\r\n            logger.info(\"✅ HUME Clients initialized\")\r\n        else:\r\n            self.client = None\r\n            self.async_client = None\r\n            logger.warning(\"⚠️ HUME Clients not available\")\r\n    \r\n    # ==================== BATCH MODE ====================\r\n    \r\n    def analyze_batch(self, file_paths: List[str]) -\u003e Dict[str, Any]:\r\n        \"\"\"\r\n        🔄 نمط Batch - تحليل ملفات متعددة (FIXED for HUME v0.9.0)\r\n        \"\"\"\r\n        if not HUME_AVAILABLE or not self.client:\r\n            return {\"error\": \"HUME SDK not available\"}\r\n        \r\n        try:\r\n            logger.info(\"🔄 Starting Batch Analysis...\")\r\n            logger.info(f\"📁 Files to analyze: {len(file_paths)}\")\r\n            \r\n            # التحقق من وجود الملفات\r\n            valid_files = []\r\n            for file_path in file_paths:\r\n                if Path(file_path).exists():\r\n                    valid_files.append(file_path)\r\n                    logger.info(f\"  ✅ {file_path}\")\r\n                else:\r\n                    logger.error(f\"  ❌ File not found: {file_path}\")\r\n            \r\n            if not valid_files:\r\n                return {\"error\": \"No valid files found\"}\r\n            \r\n            logger.info(\"📤 Submitting batch job to HUME...\")\r\n            \r\n            # استخدام الواجهة الصحيحة للـ batch\r\n            job = self.client.expression_measurement.batch.start_inference_job_from_local_file(\r\n                file=valid_files[0],  # نأخذ أول ملف كمثال\r\n                configs=[\r\n                    {\"prosody\": {}},  # تحليل نبرة الصوت\r\n                ]\r\n            )\r\n            \r\n            logger.info(f\"📋 Job ID: {job.job_id}\")\r\n            logger.info(\"⏳ Waiting for analysis to complete...\")\r\n            \r\n            # انتظار اكتمال التحليل\r\n            import time\r\n            max_wait = 30  # 30 ثانية كحد أقصى\r\n            wait_time = 0\r\n            \r\n            while wait_time \u003c max_wait:\r\n                job_details = self.client.expression_measurement.batch.get_job_details(job.job_id)\r\n                \r\n                if hasattr(job_details, 'state'):\r\n                    if job_details.state == \"COMPLETED\":\r\n                        break\r\n                    elif job_details.state == \"FAILED\":\r\n                        return {\r\n                            \"status\": \"error\",\r\n                            \"mode\": \"batch\",\r\n                            \"error\": \"HUME job failed\"\r\n                        }\r\n                \r\n                logger.info(\"⏳ Still processing...\")\r\n                time.sleep(3)\r\n                wait_time += 3\r\n            \r\n            if wait_time \u003e= max_wait:\r\n                return {\r\n                    \"status\": \"error\",\r\n                    \"mode\": \"batch\",\r\n                    \"error\": \"Analysis timeout\"\r\n                }\r\n            \r\n            # تحميل النتائج\r\n            logger.info(\"📥 Downloading predictions...\")\r\n            predictions = self.client.expression_measurement.batch.get_job_predictions(job.job_id)\r\n            \r\n            # حفظ النتائج في ملف\r\n            output_file = \"batch_predictions.json\"\r\n            with open(output_file, 'w') as f:\r\n                json.dump(predictions, f, indent=2)\r\n            \r\n            logger.info(\"✅ Batch analysis completed successfully!\")\r\n            \r\n            return {\r\n                \"status\": \"success\",\r\n                \"mode\": \"batch\",\r\n                \"files_analyzed\": len(valid_files),\r\n                \"output_file\": output_file,\r\n                \"job_id\": job.job_id,\r\n                \"results\": predictions\r\n            }\r\n            \r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ Batch analysis failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/core/service_resolvers.py:98:\n `.ID` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/ComplianceWidget.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/child/child_bulk_operations_service.py:1:\n `ÿþ\"` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/persistence/repositories/transcription_sqlite_repository.py:41:\n `try:\r\n            with contextlib.closing(wave.open(audio_file_path, \"rb\")) as f:\r\n                frames = f.getnframes()\r\n                rate = f.getframerate()\r\n                duration = frames / float(rate)\r\n                return duration\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/types/dashboard.ts:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/ChildSafetyMonitor.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/clients/elevenlabs_client.py:71:\n `try:\r\n            # Simple health check\r\n            self.client.voices.get_all()\r\n            return True\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/clients/whisper_client.py:67:\n `try:\r\n            segments = result.get(\"segments\", [])\r\n            if not segments:\r\n                return 0.5\r\n\r\n            # Average log probability from segments\r\n            total_prob = sum(segment.get(\"avg_logprob\", -1.0) for segment in segments)\r\n            avg_logprob = total_prob / len(segments)\r\n\r\n            # Convert to confidence (rough approximation)\r\n            confidence = max(0.0, min(1.0, (avg_logprob + 1.0) / 1.0))\r\n            return confidence\r\n\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/graphql/performance.py:110:\n `[str]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/security/api_gateway.py:1:\n `from typing import Any, Dict, List, Optional\r\n\r\n\"\"\"\r\n🔐 Enterprise API Gateway - Security \u0026 Rate Limiting 2025\r\n=========================================================\r\n\r\nComprehensive API Gateway with:\r\n- Rate limiting and DDoS protection\r\n- JWT authentication and validation\r\n- Request/response transformation\r\n- Circuit breaker pattern\r\n- Real-time threat detection\r\n- API analytics and monitoring\r\n\r\nAuthor: Jaafar Adeeb - Security Lead\r\n\"\"\"\r\n\r\nimport asyncio\r\nimport hashlib\r\nimport ipaddress\r\nimport json\r\nimport re\r\nimport time\r\nfrom collections import defaultdict, deque\r\nfrom dataclasses import dataclass, field\r\nfrom datetime import datetime, timedelta\r\nfrom enum import Enum\r\nfrom typing import Any, Callable, Dict, List, Optional, Tuple\r\n\r\nimport redis.asyncio as redis\r\nimport structlog\r\nfrom fastapi import Depends, FastAPI, HTTPException, Request, Response, status\r\nfrom fastapi.middleware.base import BaseHTTPMiddleware\r\nfrom fastapi.responses import JSONResponse\r\nfrom starlette.middleware.cors import CORSMiddleware\r\n\r\nlogger = structlog.get_logger(__name__)\r\n\r\n\r\nclass ThreatLevel(Enum):\r\n    \"\"\"Threat level classification\"\"\"\r\n    LOW = \"low\"\r\n    MEDIUM = \"medium\"\r\n    HIGH = \"high\"\r\n    CRITICAL = \"critical\"\r\n\r\n\r\nclass RequestType(Enum):\r\n    \"\"\"Request type classification\"\"\"\r\n    AUDIO_UPLOAD = \"audio_upload\"\r\n    WEBSOCKET_CONNECTION = \"websocket_connection\"\r\n    API_CALL = \"api_call\"\r\n    AUTHENTICATION = \"authentication\"\r\n    FILE_UPLOAD = \"file_upload\"\r\n    BULK_OPERATION = \"bulk_operation\"\r\n\r\n\r\n@dataclass\r\nclass RateLimitRule:\r\n    \"\"\"Rate limiting rule configuration\"\"\"\r\n    name: str\r\n    requests: int\r\n    window_seconds: int\r\n    request_type: Optional[RequestType] = None\r\n    user_role: Optional[str] = None\r\n    endpoint_pattern: Optional[str] = None\r\n    burst_multiplier: float = 1.5\r\n\r\n\r\n@dataclass\r\nclass ThreatSignature:\r\n    \"\"\"Security threat signature\"\"\"\r\n    name: str\r\n    pattern: str\r\n    threat_level: ThreatLevel\r\n    action: str  # block, log, rate_limit\r\n    description: str\r\n\r\n\r\n@dataclass\r\nclass RequestAnalytics:\r\n    \"\"\"Request analytics data\"\"\"\r\n    timestamp: datetime\r\n    ip_address: str\r\n    user_id: Optional[str]\r\n    endpoint: str\r\n    method: str\r\n    response_time: float\r\n    status_code: int\r\n    user_agent: str\r\n    threat_level: ThreatLevel\r\n    blocked: bool = False\r\n\r\n\r\nclass SecurityAPIGateway:\r\n    \"\"\"Enterprise API Gateway with comprehensive security\"\"\"\r\n    \r\n    def __init__(self, redis_client: Optional[redis.Redis] = None):\r\n        self.redis_client = redis_client\r\n        self.rate_limit_rules: List[RateLimitRule] = []\r\n        self.threat_signatures: List[ThreatSignature] = []\r\n        self.blocked_ips: set = set()\r\n        self.whitelisted_ips: set = set()\r\n        self.request_analytics: deque = deque(maxlen=10000)\r\n        \r\n        # Circuit breaker states\r\n        self.circuit_breakers: Dict[str, Dict[str, Any]] = {}\r\n        \r\n        # DDoS detection\r\n        self.ddos_thresholds = {\r\n            'requests_per_minute': 1000,\r\n            'unique_ips_threshold': 100,\r\n            'error_rate_threshold': 0.5\r\n        }\r\n        \r\n        # Initialize default rules and signatures\r\n        self._initialize_default_rules()\r\n        self._initialize_threat_signatures()\r\n        \r\n        # Background monitoring tasks\r\n        self._monitoring_tasks: List[asyncio.Task] = []\r\n        self._start_monitoring()\r\n    \r\n    def _initialize_default_rules(self) -\u003e Any:\r\n        \"\"\"Initialize default rate limiting rules\"\"\"\r\n        self.rate_limit_rules = [\r\n            # General API limits\r\n            RateLimitRule(\"general_api\", 100, 60, RequestType.API_CALL),\r\n            \r\n            # Authentication limits (more restrictive)\r\n            RateLimitRule(\"auth_login\", 5, 300, RequestType.AUTHENTICATION),\r\n            \r\n            # Audio upload limits\r\n            RateLimitRule(\"audio_upload\", 20, 60, RequestType.AUDIO_UPLOAD),\r\n            \r\n            # WebSocket connections\r\n            RateLimitRule(\"websocket\", 10, 60, RequestType.WEBSOCKET_CONNECTION),\r\n            \r\n            # File uploads\r\n            RateLimitRule(\"file_upload\", 50, 300, RequestType.FILE_UPLOAD),\r\n            \r\n            # Bulk operations\r\n            RateLimitRule(\"bulk_ops\", 5, 600, RequestType.BULK_OPERATION),\r\n            \r\n            # Parent role - higher limits\r\n            RateLimitRule(\"parent_api\", 200, 60, user_role=\"parent\"),\r\n            \r\n            # Child role - lower limits for safety\r\n            RateLimitRule(\"child_api\", 30, 60, user_role=\"child\"),\r\n        ]\r\n    \r\n    def _initialize_threat_signatures(self) -\u003e Any:\r\n        \"\"\"Initialize security threat signatures\"\"\"\r\n        self.threat_signatures = [\r\n            # SQL Injection patterns\r\n            ThreatSignature(\r\n                \"sql_injection\",\r\n                r\"(union\\s+select|or\\s+1=1|drop\\s+table|insert\\s+into|delete\\s+from)\",\r\n                ThreatLevel.HIGH,\r\n                \"block\",\r\n                \"SQL injection attempt detected\"\r\n            ),\r\n            \r\n            # XSS patterns\r\n            ThreatSignature(\r\n                \"xss_attack\",\r\n                r\"(\u003cscript|javascript:|onload=|onerror=|alert\\(|document\\.cookie)\",\r\n                ThreatLevel.HIGH,\r\n                \"block\",\r\n                \"Cross-site scripting attempt detected\"\r\n            ),\r\n            \r\n            # Command injection\r\n            ThreatSignature(\r\n                \"command_injection\",\r\n                r\"(;|\\||\u0026|\\$\\(|`|\\$\\{|eval\\(|exec\\(|system\\()\",\r\n                ThreatLevel.CRITICAL,\r\n                \"block\",\r\n                \"Command injection attempt detected\"\r\n            ),\r\n            \r\n            # Path traversal\r\n            ThreatSignature(\r\n                \"path_traversal\",\r\n                r\"(\\.\\./|\\.\\.\\\\|/etc/passwd|/windows/system32)\",\r\n                ThreatLevel.HIGH,\r\n                \"block\",\r\n                \"Path traversal attempt detected\"\r\n            ),\r\n            \r\n            # Suspicious user agents\r\n            ThreatSignature(\r\n                \"suspicious_user_agent\",\r\n                r\"(sqlmap|nikto|nmap|masscan|zgrab|shodan)\",\r\n                ThreatLevel.MEDIUM,\r\n                \"log\",\r\n                \"Suspicious user agent detected\"\r\n            ),\r\n            \r\n            # Bot detection\r\n            ThreatSignature(\r\n                \"bot_detection\",\r\n                r\"(bot|crawler|spider|scraper|automation)\",\r\n                ThreatLevel.LOW,\r\n                \"rate_limit\",\r\n                \"Automated bot detected\"\r\n            ),\r\n        ]\r\n    \r\n    async def create_middleware(self) -\u003e BaseHTTPMiddleware:\r\n        \"\"\"Create FastAPI middleware for the gateway\"\"\"\r\n        \r\n        class APIGatewayMiddleware(BaseHTTPMiddleware):\r\n            def __init__(self, app, gateway_instance):\r\n                super().__init__(app)\r\n                self.gateway = gateway_instance\r\n            \r\n            async def dispatch(self, request: Request, call_next: Callable):\r\n                start_time = time.time()\r\n                \r\n                # Security checks\r\n                security_result = await self.gateway.security_check(request)\r\n                if not security_result['allowed']:\r\n                    return JSONResponse(\r\n                        status_code=security_result['status_code'],\r\n                        content={\"error\": security_result['message']}\r\n                    )\r\n                \r\n                # Rate limiting\r\n                rate_limit_result = await self.gateway.check_rate_limit(request)\r\n                if not rate_limit_result['allowed']:\r\n                    return JSONResponse(\r\n                        status_code=429,\r\n                        content={\r\n                            \"error\": \"Rate limit exceeded\",\r\n                            \"retry_after\": rate_limit_result.get('retry_after', 60)\r\n                        },\r\n                        headers={\"Retry-After\": str(rate_limit_result.get('retry_after', 60))}\r\n                    )\r\n                \r\n                # Circuit breaker check\r\n                if not await self.gateway.check_circuit_breaker(request):\r\n                    return JSONResponse(\r\n                        status_code=503,\r\n                        content={\"error\": \"Service temporarily unavailable\"}\r\n                    )\r\n                \r\n                try:\r\n                    # Process request\r\n                    response = await call_next(request)\r\n                    \r\n                    # Record metrics\r\n                    processing_time = time.time() - start_time\r\n                    await self.gateway.record_request_metrics(\r\n                        request, response, processing_time\r\n                    )\r\n                    \r\n                    # Add security headers\r\n                    response = await self.gateway.add_security_headers(response)\r\n                    \r\n                    return response\r\n                \r\n                except Exception as e:\r\n                    # Handle errors and update circuit breaker\r\n                    await self.gateway.handle_request_error(request, str(e))\r\n                    raise\r\n        \r\n        return APIGatewayMiddleware\r\n    \r\n    async def security_check(self, request: Request) -\u003e Dict[str, Any]:\r\n        \"\"\"Comprehensive security check for incoming requests\"\"\"\r\n        \r\n        client_ip = self._get_client_ip(request)\r\n        \r\n        # Check if IP is blocked\r\n        if client_ip in self.blocked_ips:\r\n            logger.warning(\"Blocked IP attempted access\", ip=client_ip)\r\n            return {\r\n                'allowed': False,\r\n                'status_code': 403,\r\n                'message': 'Access denied from this IP address'\r\n            }\r\n        \r\n        # Check whitelist (if configured)\r\n        if self.whitelisted_ips and client_ip not in self.whitelisted_ips:\r\n            return {\r\n                'allowed': False,\r\n                'status_code': 403,\r\n                'message': 'IP address not whitelisted'\r\n            }\r\n        \r\n        # Threat signature detection\r\n        threat_detected = await self._check_threat_signatures(request)\r\n        if threat_detected:\r\n            return {\r\n                'allowed': False,\r\n                'status_code': 403,\r\n                'message': 'Security threat detected'\r\n            }\r\n        \r\n        # DDoS detection\r\n        if await self._detect_ddos_attack(request):\r\n            return {\r\n                'allowed': False,\r\n                'status_code': 429,\r\n                'message': 'DDoS attack detected - temporary block'\r\n            }\r\n        \r\n        return {'allowed': True}\r\n    \r\n    async def check_rate_limit(self, request: Request) -\u003e Dict[str, Any]:\r\n        \"\"\"Check rate limits for the request\"\"\"\r\n        \r\n        client_ip = self._get_client_ip(request)\r\n        user_id = await self._extract_user_id(request)\r\n        user_role = await self._extract_user_role(request)\r\n        endpoint = str(request.url.path)\r\n        \r\n        # Determine request type\r\n        request_type = self._classify_request(request)\r\n        \r\n        # Find applicable rate limit rules\r\n        applicable_rules = self._find_applicable_rules(request_type, user_role, endpoint)\r\n        \r\n        for rule in applicable_rules:\r\n            # Create rate limit key\r\n            key_parts = [rule.name]\r\n            if user_id:\r\n                key_parts.append(f\"user:{user_id}\")\r\n            else:\r\n                key_parts.append(f\"ip:{client_ip}\")\r\n            \r\n            rate_limit_key = \":\".join(key_parts)\r\n            \r\n            # Check rate limit\r\n            is_allowed, retry_after = await self._check_rate_limit_key(\r\n                rate_limit_key, rule.requests, rule.window_seconds\r\n            )\r\n            \r\n            if not is_allowed:\r\n                logger.warning(\"Rate limit exceeded\", \r\n                             key=rate_limit_key, \r\n                             rule=rule.name,\r\n                             ip=client_ip,\r\n                             user_id=user_id)\r\n                \r\n                return {\r\n                    'allowed': False,\r\n                    'retry_after': retry_after,\r\n                    'rule': rule.name\r\n                }\r\n        \r\n        return {'allowed': True}\r\n    \r\n    async def _check_rate_limit_key(self, key: str, limit: int, window: int) -\u003e Tuple[bool, int]:\r\n        \"\"\"Check rate limit for a specific key\"\"\"\r\n        \r\n        if self.redis_client:\r\n            return await self._redis_rate_limit_check(key, limit, window)\r\n        else:\r\n            return await self._memory_rate_limit_check(key, limit, window)\r\n    \r\n    async def _redis_rate_limit_check(self, key: str, limit: int, window: int) -\u003e Tuple[bool, int]:\r\n        \"\"\"Redis-based sliding window rate limiting\"\"\"\r\n        \r\n        now = time.time()\r\n        window_start = now - window\r\n        \r\n        # Use Redis pipeline for atomic operations\r\n        async with self.redis_client.pipeline() as pipe:\r\n            # Remove expired entries\r\n            await pipe.zremrangebyscore(key, 0, window_start)\r\n            \r\n            # Count current requests\r\n            current_count = await pipe.zcard(key)\r\n            \r\n            if current_count \u003e= limit:\r\n                # Get oldest entry to calculate retry_after\r\n                oldest = await pipe.zrange(key, 0, 0, withscores=True)\r\n                if oldest:\r\n                    retry_after = int(oldest[0][1] + window - now)\r\n                else:\r\n                    retry_after = window\r\n                \r\n                return False, max(retry_after, 1)\r\n            \r\n            # Add current request\r\n            await pipe.zadd(key, {str(now): now})\r\n            await pipe.expire(key, window)\r\n            await pipe.execute()\r\n            \r\n            return True, 0\r\n    \r\n    async def _memory_rate_limit_check(self, key: str, limit: int, window: int) -\u003e Tuple[bool, int]:\r\n        \"\"\"Memory-based rate limiting (fallback)\"\"\"\r\n        \r\n        if not hasattr(self, '_memory_store'):\r\n            self._memory_store = {}\r\n        \r\n        now = time.time()\r\n        window_start = now - window\r\n        \r\n        if key not in self._memory_store:\r\n            self._memory_store[key] = []\r\n        \r\n        # Clean expired entries\r\n        self._memory_store[key] = [\r\n            timestamp for timestamp in self._memory_store[key] \r\n            if timestamp \u003e window_start\r\n        ]\r\n        \r\n        if len(self._memory_store[key]) \u003e= limit:\r\n            oldest = min(self._memory_store[key])\r\n            retry_after = int(oldest + window - now)\r\n            return False, max(retry_after, 1)\r\n        \r\n        self._memory_store[key].append(now)\r\n        return True, 0\r\n    \r\n    async def check_circuit_breaker(self, request: Request) -\u003e bool:\r\n        \"\"\"Check circuit breaker status for service\"\"\"\r\n        \r\n        service_key = self._get_service_key(request)\r\n        \r\n        if service_key not in self.circuit_breakers:\r\n            self.circuit_breakers[service_key] = {\r\n                'state': 'closed',  # closed, open, half_open\r\n                'failure_count': 0,\r\n                'last_failure_time': None,\r\n                'success_count': 0\r\n            }\r\n        \r\n        breaker = self.circuit_breakers[service_key]\r\n        \r\n        # If circuit is open, check if it should transition to half-open\r\n        if breaker['state'] == 'open':\r\n            if (time.time() - breaker['last_failure_time']) \u003e 60:  # 1 minute timeout\r\n                breaker['state'] = 'half_open'\r\n                breaker['success_count'] = 0\r\n                logger.info(\"Circuit breaker transitioning to half-open\", service=service_key)\r\n            else:\r\n                return False\r\n        \r\n        return True\r\n    \r\n    async def record_request_metrics(self, request: Request, response: Response, \r\n                                   processing_time: float):\r\n        \"\"\"Record request metrics for analytics\"\"\"\r\n        \r\n        client_ip = self._get_client_ip(request)\r\n        user_id = await self._extract_user_id(request)\r\n        \r\n        analytics = RequestAnalytics(\r\n            timestamp=datetime.utcnow(),\r\n            ip_address=client_ip,\r\n            user_id=user_id,\r\n            endpoint=str(request.url.path),\r\n            method=request.method,\r\n            response_time=processing_time,\r\n            status_code=response.status_code,\r\n            user_agent=request.headers.get('user-agent', ''),\r\n            threat_level=ThreatLevel.LOW\r\n        )\r\n        \r\n        self.request_analytics.append(analytics)\r\n        \r\n        # Update circuit breaker\r\n        service_key = self._get_service_key(request)\r\n        if service_key in self.circuit_breakers:\r\n            breaker = self.circuit_breakers[service_key]\r\n            \r\n            if response.status_code \u003e= 500:\r\n                breaker['failure_count'] += 1\r\n                breaker['last_failure_time'] = time.time()\r\n                \r\n                # Open circuit if too many failures\r\n                if breaker['failure_count'] \u003e= 5:\r\n                    breaker['state'] = 'open'\r\n                    logger.warning(\"Circuit breaker opened\", service=service_key)\r\n            else:\r\n                if breaker['state'] == 'half_open':\r\n                    breaker['success_count'] += 1\r\n                    if breaker['success_count'] \u003e= 3:\r\n                        breaker['state'] = 'closed'\r\n                        breaker['failure_count'] = 0\r\n                        logger.info(\"Circuit breaker closed\", service=service_key)\r\n    \r\n    async def add_security_headers(self, response: Response) -\u003e Response:\r\n        \"\"\"Add security headers to response\"\"\"\r\n        \r\n        # Security headers\r\n        security_headers = {\r\n            'X-Content-Type-Options': 'nosniff',\r\n            'X-Frame-Options': 'DENY',\r\n            'X-XSS-Protection': '1; mode=block',\r\n            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\r\n            'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline'\",\r\n            'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n            'Permissions-Policy': 'microphone=(), camera=(), geolocation=()',\r\n        }\r\n        \r\n        for header, value in security_headers.items():\r\n            response.headers[header] = value\r\n        \r\n        return response\r\n    \r\n    async def handle_request_error(self, request: Request, error: str):\r\n        \"\"\"Handle request errors and update metrics\"\"\"\r\n        \r\n        service_key = self._get_service_key(request)\r\n        if service_key in self.circuit_breakers:\r\n            breaker = self.circuit_breakers[service_key]\r\n            breaker['failure_count'] += 1\r\n            breaker['last_failure_time'] = time.time()\r\n        \r\n        logger.error(\"Request processing error\",\r\n                    endpoint=str(request.url.path),\r\n                    method=request.method,\r\n                    error=error)\r\n    \r\n    def _get_client_ip(self, request: Request) -\u003e str:\r\n        \"\"\"Extract client IP address from request\"\"\"\r\n        \r\n        # Check forwarded headers\r\n        forwarded_for = request.headers.get('x-forwarded-for')\r\n        if forwarded_for:\r\n            return forwarded_for.split(',')[0].strip()\r\n        \r\n        real_ip = request.headers.get('x-real-ip')\r\n        if real_ip:\r\n            return real_ip\r\n        \r\n        # Fallback to client host\r\n        if hasattr(request, 'client') and request.client:\r\n            return request.client.host\r\n        \r\n        return 'unknown'\r\n    \r\n    async def _extract_user_id(self, request: Request) -\u003e Optional[str]:\r\n        \"\"\"Extract user ID from JWT token or session\"\"\"\r\n        \r\n        # Try to get from Authorization header\r\n        auth_header = request.headers.get('authorization')\r\n        if auth_header and auth_header.startswith('Bearer '):\r\n            token = auth_header[7:]\r\n            # In a real implementation, decode JWT and extract user_id\r\n            # For now, return a placeholder\r\n            return f\"user_from_token_{hash(token) % 1000}\"\r\n        \r\n        return None\r\n    \r\n    async def _extract_user_role(self, request: Request) -\u003e Optional[str]:\r\n        \"\"\"Extract user role from JWT token or session\"\"\"\r\n        \r\n        # This would decode JWT and extract role\r\n        # For now, return a placeholder based on endpoint\r\n        endpoint = str(request.url.path)\r\n        if '/parent/' in endpoint:\r\n            return 'parent'\r\n        elif '/child/' in endpoint:\r\n            return 'child'\r\n        \r\n        return None\r\n    \r\n    def _classify_request(self, request: Request) -\u003e RequestType:\r\n        \"\"\"Classify request type for rate limiting\"\"\"\r\n        \r\n        endpoint = str(request.url.path)\r\n        method = request.method\r\n        \r\n        if '/auth/' in endpoint or '/login' in endpoint:\r\n            return RequestType.AUTHENTICATION\r\n        elif '/audio/' in endpoint and method == 'POST':\r\n            return RequestType.AUDIO_UPLOAD\r\n        elif '/ws' in endpoint or '/websocket' in endpoint:\r\n            return RequestType.WEBSOCKET_CONNECTION\r\n        elif '/upload' in endpoint or method == 'POST':\r\n            return RequestType.FILE_UPLOAD\r\n        elif '/bulk/' in endpoint:\r\n            return RequestType.BULK_OPERATION\r\n        else:\r\n            return RequestType.API_CALL\r\n    \r\n    def _find_applicable_rules(self, request_type: RequestType, \r\n                              user_role: Optional[str], \r\n                              endpoint: str) -\u003e List[RateLimitRule]:\r\n        \"\"\"Find applicable rate limit rules for request\"\"\"\r\n        \r\n        applicable_rules = []\r\n        \r\n        for rule in self.rate_limit_rules:\r\n            # Check request type match\r\n            if rule.request_type and rule.request_type != request_type:\r\n                continue\r\n            \r\n            # Check user role match\r\n            if rule.user_role and rule.user_role != user_role:\r\n                continue\r\n            \r\n            # Check endpoint pattern match\r\n            if rule.endpoint_pattern and not re.search(rule.endpoint_pattern, endpoint):\r\n                continue\r\n            \r\n            applicable_rules.append(rule)\r\n        \r\n        return applicable_rules\r\n    \r\n    def _get_service_key(self, request: Request) -\u003e str:\r\n        \"\"\"Get service key for circuit breaker\"\"\"\r\n        \r\n        # Use first part of path as service identifier\r\n        path_parts = str(request.url.path).strip('/').split('/')\r\n        return path_parts[0] if path_parts else 'default'\r\n    \r\n    async def _check_threat_signatures(self, request: Request) -\u003e bool:\r\n        \"\"\"Check request against threat signatures\"\"\"\r\n        \r\n        # Check URL for threats\r\n        url_str = str(request.url)\r\n        for signature in self.threat_signatures:\r\n            if re.search(signature.pattern, url_str, re.IGNORECASE):\r\n                logger.warning(\"Threat signature detected in URL\",\r\n                             signature=signature.name,\r\n                             url=url_str,\r\n                             threat_level=signature.threat_level.value)\r\n                \r\n                if signature.action == 'block':\r\n                    return True\r\n        \r\n        # Check headers\r\n        for header_name, header_value in request.headers.items():\r\n            for signature in self.threat_signatures:\r\n                if re.search(signature.pattern, header_value, re.IGNORECASE):\r\n                    logger.warning(\"Threat signature detected in headers\",\r\n                                 signature=signature.name,\r\n                                 header=header_name,\r\n                                 threat_level=signature.threat_level.value)\r\n                    \r\n                    if signature.action == 'block':\r\n                        return True\r\n        \r\n        return False\r\n    \r\n    async def _detect_ddos_attack(self, request: Request) -\u003e bool:\r\n        \"\"\"Detect potential DDoS attacks\"\"\"\r\n        \r\n        current_time = datetime.utcnow()\r\n        one_minute_ago = current_time - timedelta(minutes=1)\r\n        \r\n        # Count requests in the last minute\r\n        recent_requests = [\r\n            analytics for analytics in self.request_analytics\r\n            if analytics.timestamp \u003e one_minute_ago\r\n        ]\r\n        \r\n        if len(recent_requests) \u003e self.ddos_thresholds['requests_per_minute']:\r\n            # Check unique IPs\r\n            unique_ips = len(set(analytics.ip_address for analytics in recent_requests))\r\n            \r\n            if unique_ips \u003c self.ddos_thresholds['unique_ips_threshold']:\r\n                logger.critical(\"Potential DDoS attack detected\",\r\n                              requests_per_minute=len(recent_requests),\r\n                              unique_ips=unique_ips)\r\n                return True\r\n        \r\n        return False\r\n    \r\n    def _start_monitoring(self) -\u003e Any:\r\n        \"\"\"Start background monitoring tasks\"\"\"\r\n        \r\n        async def cleanup_task():\r\n            \"\"\"Cleanup old data periodically\"\"\"\r\n            while True:\r\n                await asyncio.sleep(300)  # 5 minutes\r\n                \r\n                # Clean up old analytics data\r\n                cutoff_time = datetime.utcnow() - timedelta(hours=24)\r\n                self.request_analytics = deque(\r\n                    [a for a in self.request_analytics if a.timestamp \u003e cutoff_time],\r\n                    maxlen=10000\r\n                )\r\n        \r\n        self._monitoring_tasks.append(asyncio.create_task(cleanup_task()))\r\n    \r\n    async def get_analytics_summary(self) -\u003e Dict[str, Any]:\r\n        \"\"\"Get analytics summary\"\"\"\r\n        \r\n        current_time = datetime.utcnow()\r\n        one_hour_ago = current_time - timedelta(hours=1)\r\n        \r\n        recent_requests = [\r\n            analytics for analytics in self.request_analytics\r\n            if analytics.timestamp \u003e one_hour_ago\r\n        ]\r\n        \r\n        return {\r\n            'total_requests_last_hour': len(recent_requests),\r\n            'unique_ips': len(set(r.ip_address for r in recent_requests)),\r\n            'blocked_requests': len([r for r in recent_requests if r.blocked]),\r\n            'average_response_time': sum(r.response_time for r in recent_requests) / len(recent_requests) if recent_requests else 0,\r\n            'top_endpoints': self._get_top_endpoints(recent_requests),\r\n            'threat_levels': self._get_threat_level_counts(recent_requests)\r\n        }\r\n    \r\n    def _get_top_endpoints(self, requests: List[RequestAnalytics]) -\u003e List[Dict[str, Any]]:\r\n        \"\"\"Get top endpoints by request count\"\"\"\r\n        \r\n        endpoint_counts = defaultdict(int)\r\n        for req in requests:\r\n            endpoint_counts[req.endpoint] += 1\r\n        \r\n        return [\r\n            {'endpoint': endpoint, 'count': count}\r\n            for endpoint, count in sorted(endpoint_counts.items(), \r\n                                        key=lambda x: x[1], reverse=True)[:10]\r\n        ]\r\n    \r\n    def _get_threat_level_counts(self, requests: List[RequestAnalytics]) -\u003e Dict[str, int]:\r\n        \"\"\"Get threat level distribution\"\"\"\r\n        \r\n        threat_counts = defaultdict(int)\r\n        for req in requests:\r\n            threat_counts[req.threat_level.value] += 1\r\n        \r\n        return dict(threat_counts)\r\n\r\n\r\n# Global instance\r\n_api_gateway: Optional[SecurityAPIGateway] = None\r\n\r\n\r\ndef get_api_gateway(redis_client: Optional[redis.Redis] = None) -\u003e SecurityAPIGateway:\r\n    \"\"\"Get global API gateway instance\"\"\"\r\n    global _api_gateway\r\n    if _api_gateway is None:\r\n        _api_gateway = SecurityAPIGateway(redis_client)\r\n    return _api_gateway\r\n\r\n\r\ndef configure_app_security(Optional[redis.Redis] = None) -\u003e None:\r\n    \"\"\"Configure FastAPI app with security middleware\"\"\"\r\n    \r\n    # Get API gateway instance\r\n    gateway = get_api_gateway(redis_client)\r\n    \r\n    # Add CORS middleware\r\n    app.add_middleware(\r\n        CORSMiddleware,\r\n        allow_origins=[\"https://*.teddybear.ai\", \"https://localhost:3000\"],\r\n        allow_credentials=True,\r\n        allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n        allow_headers=[\"*\"],\r\n    )\r\n    \r\n    # Add API Gateway middleware\r\n    app.add_middleware(gateway.create_middleware())\r\n    \r\n    return app` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line codacy_results.json:1:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/hooks/useRealtimeData.ts:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/clients/openai_speech_client.py:87:\n `try:\r\n            # Simple health check by listing models\r\n            models = await self.client.models.list()\r\n            return len(models.data) \u003e 0\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/file_manager.py:52:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/setup.py:48:\n `logger` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/enhanced_hume_2025.py:52:\n `\r\n    \"\"\"🎭 Enhanced HUME AI with 2025 features\"\"\"\r\n    \r\n    def __init__(self, api_key: Optional[str] = None):\r\n        self.api_key = api_key or os.getenv(\"HUME_API_KEY\")\r\n        if not self.api_key:\r\n            raise ValueError(\"HUME API Key required!\")\r\n        \r\n        self.config = CalibrationConfig()\r\n        self.logger = logging.getLogger(__name__)\r\n        \r\n        if HUME_AVAILABLE:\r\n            self.client = HumeClient(api_key=self.api_key)\r\n            self.async_client = AsyncHumeClient(api_key=self.api_key)\r\n        else:\r\n            self.client = None\r\n            self.async_client = None\r\n    \r\n    # ==================== TASK 1: CALIBRATION ====================\r\n    \r\n    def calibrate_hume(self, confidence_threshold: float) -\u003e Dict[str, float]:\r\n        \"\"\"🎯 معايرة دقة تحليل المشاعر\"\"\"\r\n        logger.info(f\"🎯 Calibrating HUME with threshold: {confidence_threshold}\")\r\n        \r\n        # Create test samples\r\n        test_samples = self._create_test_samples()\r\n        \r\n        results = []\r\n        for sample in test_samples:\r\n            # Analyze each sample\r\n            emotion_data = self._analyze_sample(sample)\r\n            confidence = emotion_data.get('confidence', 0.0)\r\n            \r\n            results.append({\r\n                'sample': sample['name'],\r\n                'confidence': confidence,\r\n                'passes_threshold': confidence \u003e= confidence_threshold\r\n            })\r\n        \r\n        # Calculate metrics\r\n        success_rate = sum(1 for r in results if r['passes_threshold']) / len(results)\r\n        avg_confidence = statistics.mean([r['confidence'] for r in results])\r\n        \r\n        # Update configuration\r\n        self.config.confidence_threshold = confidence_threshold\r\n        \r\n        logger.info(f\"✅ Calibration complete: {success_rate:.1%} success rate\")\r\n        \r\n        return {\r\n            'success_rate': success_rate,\r\n            'average_confidence': avg_confidence,\r\n            'threshold': confidence_threshold,\r\n            'recommendation': self._get_calibration_recommendation(success_rate)\r\n        }\r\n    \r\n    def _create_test_samples(self) -\u003e List[Dict]:\r\n        \"\"\"إنشاء عينات اختبار للمعايرة\"\"\"\r\n        samples = []\r\n        \r\n        emotions = ['joy', 'sadness', 'anger', 'calm']\r\n        frequencies = [440, 220, 300, 260]  # Hz\r\n        \r\n        for emotion, freq in zip(emotions, frequencies):\r\n            # Create synthetic audio\r\n            duration = 3.0\r\n            sample_rate = 16000\r\n            t = np.linspace(0, duration, int(sample_rate * duration))\r\n            audio = 0.3 * np.sin(2 * np.pi * freq * t)\r\n            \r\n            # Add some noise\r\n            noise = 0.05 * np.random.random(len(audio))\r\n            audio = audio + noise\r\n            \r\n            filename = f\"test_{emotion}.wav\"\r\n            sf.write(filename, audio, sample_rate)\r\n            \r\n            samples.append({\r\n                'name': emotion,\r\n                'file': filename,\r\n                'expected_emotion': emotion\r\n            })\r\n        \r\n        return samples\r\n    \r\n    def _analyze_sample(self, sample: Dict) -\u003e Dict:\r\n        \"\"\"تحليل عينة واحدة\"\"\"\r\n        if HUME_AVAILABLE:\r\n            # Real HUME analysis\r\n            return self._real_hume_analysis(sample['file'])\r\n        else:\r\n            # Mock analysis for development\r\n            return self._mock_analysis(sample['expected_emotion'])\r\n    \r\n    def _mock_analysis(self, expected_emotion: str) -\u003e Dict:\r\n        \"\"\"تحليل وهمي للتطوير\"\"\"\r\n        import random\r\n        \r\n        emotions = {\r\n            'joy': random.uniform(0.7, 0.9),\r\n            'sadness': random.uniform(0.2, 0.4),\r\n            'anger': random.uniform(0.1, 0.3),\r\n            'calm': random.uniform(0.3, 0.5)\r\n        }\r\n        \r\n        # Make expected emotion dominant\r\n        emotions[expected_emotion] = random.uniform(0.8, 0.95)\r\n        \r\n        return {\r\n            'emotions': emotions,\r\n            'dominant_emotion': expected_emotion,\r\n            'confidence': emotions[expected_emotion]\r\n        }\r\n    \r\n    def _get_calibration_recommendation(self, success_rate: float) -\u003e str:\r\n        \"\"\"توصيات المعايرة\"\"\"\r\n        if success_rate \u003e= 0.9:\r\n            return \"Excellent calibration\"\r\n        elif success_rate \u003e= 0.7:\r\n            return \"Good - minor adjustments may help\"\r\n        elif success_rate \u003e= 0.5:\r\n            return \"Fair - consider lowering threshold\"\r\n        else:\r\n            return \"Poor - significant calibration needed\"\r\n    \r\n    # ==================== TASK 2: MULTI-LANGUAGE ====================\r\n    \r\n    async def analyze_emotion_multilang(self, audio_file: str, lang: str) -\u003e Dict:\r\n        \"\"\"🌍 تحليل المشاعر مع دعم اللغات المتعددة\"\"\"\r\n        logger.info(f\"🌍 Analyzing emotion in language: {lang}\")\r\n        \r\n        try:\r\n            # Detect language if auto\r\n            if lang == \"auto\":\r\n                detected_lang = await self._detect_language(audio_file)\r\n                logger.debug(f\"🔍 Language detected: {detected_lang}\")\r\n            else:\r\n                detected_lang = lang\r\n            \r\n            # Get language-specific configuration\r\n            config = self._get_language_config(detected_lang)\r\n            \r\n            # Perform analysis with language context\r\n            if HUME_AVAILABLE:\r\n                result = await self._hume_analysis_with_language(audio_file, config)\r\n            else:\r\n                result = self._mock_multilang_analysis(detected_lang)\r\n            \r\n            # Apply language-specific calibration\r\n            calibrated_result = self._apply_language_calibration(result, detected_lang)\r\n            \r\n            return {\r\n                'detected_language': detected_lang,\r\n                'emotions': calibrated_result['emotions'],\r\n                'dominant_emotion': calibrated_result['dominant_emotion'],\r\n                'confidence': calibrated_result['confidence'],\r\n                'language_confidence': self.config.language_weights.get(detected_lang, 0.8)\r\n            }\r\n            \r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ Multi-language analysis failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/edge/device_manager.py:86:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/graphql/pagination.py:58:\n `cursor_json = base64.b64decode(encoded_cursor.encode()).decode()\r\n        return json.loads(cursor_json)` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/exception_handling/global_exception_handler.py:359:\n `\r\n    \"\"\"Retry with exponential backoff\"\"\"\r\n\r\n    def __init__(self, max_retries: int = 3, base_delay: float = 1.0):\r\n        self.max_retries = max_retries\r\n        self.base_delay = base_delay\r\n\r\n    async def recover(self, exception: TeddyBearException) -\u003e Any:\r\n        \"\"\"Retry the operation\"\"\"\r\n        if not exception.is_retryable:\r\n            raise exception\r\n\r\n        for attempt in range(self.max_retries):\r\n            try:\r\n                # This would need the original operation\r\n                # For now, just demonstrate the pattern\r\n                delay = self.base_delay * (2**attempt)\r\n                await asyncio.sleep(delay)\r\n                # Retry operation here\r\n                return None\r\n            # FIXME: replace with specific exception\r\nexcept Exception as exc:if attempt == self.max_retries - 1:` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Lexical error"
              },
              "level": "warning",
              "message": {
                "text": "Lexical error at line src/application/services/core/data_cleanup_service.py:480:\n unrecognized symbol in string"
              }
            },
            {
              "descriptor": {
                "id": "Lexical error"
              },
              "level": "warning",
              "message": {
                "text": "Lexical error at line src/infrastructure/caching/multi_layer_cache.py:507:\n unrecognized symbol in string"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/emotion/text_emotion_analyzer.py:2:\n `\"\"\"Text-based emotion analysis infrastructure.\"\"\"\r\n\r\nfrom typing import Dict, List, Optional\r\n\r\nimport structlog\r\n\r\ntry:\r\n    from transformers import pipeline\r\nexcept ImportError:\r\n    from src.infrastructure.external_services.mock.transformers import pipeline\r\n\r\nlogger = structlog.get_logger(__name__)\r\n\r\n\r\nclass TextEmotionAnalyzer:\r\n    \"\"\"Infrastructure component for text emotion analysis.\"\"\"\r\n    \r\n    def __init__(self):\r\n        self.text_analyzer = None\r\n        self._initialize_model()\r\n    \r\n    def _initialize_model(self) -\u003e None:\r\n        \"\"\"Initialize the transformer model.\"\"\"\r\n        try:\r\n            self.text_analyzer = pipeline(\r\n                \"text-classification\",\r\n                model=\"j-hartmann/emotion-english-distilroberta-base\",\r\n                return_all_scores=True\r\n            )\r\n            logger.info(\" Text emotion model loaded\")\r\n        except Exception as e:\r\n            logger.error(f\" Failed to load model: {e}\")\r\n            self.text_analyzer = None\r\n    \r\n    async def analyze_text(self, text: str) -\u003e Optional[Dict[str, float]]:\r\n        \"\"\"Analyze text and return emotion scores.\"\"\"\r\n        if not self.text_analyzer or not text.strip():\r\n            return None\r\n        \r\n        try:\r\n            predictions = self.text_analyzer(text)\r\n            \r\n            emotion_scores = {}\r\n            for pred in predictions[0]:\r\n                emotion = pred['label'].lower()\r\n                score = pred['score']\r\n                emotion_scores[emotion] = score\r\n            \r\n            return emotion_scores\r\n            \r\n        except Exception as e:\r\n            logger.error(f\" Text analysis failed: {e}\")\r\n            return None\r\n    \r\n    def is_available(self) -\u003e bool:\r\n        \"\"\"Check if the analyzer is available.\"\"\"\r\n        return self.text_analyzer is not None` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/core/external_services.py:12:\n `\r\n    \"\"\"خدمة البريد الإلكتروني\"\"\"\r\n    \r\n    def __init__(self, smtp_server: str, smtp_port: int, username: str, password: str):\r\n        self.smtp_server = smtp_server\r\n        self.smtp_port = smtp_port\r\n        self.username = username\r\n        self.password = password\r\n    \r\n    async def send_email(self, to: str, subject: str, body: str, is_html: bool = True) -\u003e bool:\r\n        \"\"\"إرسال بريد إلكتروني\"\"\"\r\n        try:\r\n            msg = MIMEMultipart()\r\n            msg['From'] = self.username\r\n            msg['To'] = to\r\n            msg['Subject'] = subject\r\n            \r\n            msg.attach(MIMEText(body, 'html' if is_html else 'plain', 'utf-8'))\r\n            \r\n            server = smtplib.SMTP(self.smtp_server, self.smtp_port)\r\n            server.starttls()\r\n            server.login(self.username, self.password)\r\n            server.send_message(msg)\r\n            server.quit()\r\n            \r\n            return True\r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"Email sending failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/monitoring/metrics.py:110:\n `def track_request_duration(endpoint: str):\r\n    \"\"\"Decorator لتتبع مدة الـ requests\"\"\"\r\n\r\n    def decorator(func: Callable) -\u003e Callable:\r\n        @wraps(func)\r\n        async def async_wrapper(*args, **kwargs):\r\n            start_time = time.time()\r\n            status = \"success\"\r\n            try:\r\n                result = await func(*args, **kwargs)\r\n                return result\r\n            # FIXME: replace with specific exception\r\nexcept Exception as exc:status = \"error\"\r\n                raise\r\n            finally:\r\n                duration = time.time() - start_time\r\n                request_duration.labels(\r\n                    method=func.__name__, endpoint=endpoint, status=status\r\n                ).observe(duration)\r\n\r\n        @wraps(func)\r\n        def sync_wrapper(*args, **kwargs):\r\n            start_time = time.time()\r\n            status = \"success\"\r\n            try:\r\n                result = func(*args, **kwargs)\r\n                return result\r\n            # FIXME: replace with specific exception\r\nexcept Exception as exc:status = \"error\"\r\n                raise\r\n            finally:\r\n                duration = time.time() - start_time\r\n                request_duration.labels(\r\n                    method=func.__name__, endpoint=endpoint, status=status\r\n                ).observe(duration)\r\n\r\n        if asyncio.iscoroutinefunction(func):\r\n            return async_wrapper\r\n        return sync_wrapper\r\n\r\n    return decorator\r\n\r\n\r\ndef track_exceptions(service: str):\r\n    \"\"\"Decorator لتتبع الـ exceptions\"\"\"\r\n\r\n    def decorator(func: Callable) -\u003e Callable:\r\n        @wraps(func)\r\n        async def async_wrapper(*args, **kwargs):\r\n            try:\r\n                return await func(*args, **kwargs)\r\n            except Exception as e:\r\n                exception_counter.labels(\r\n                    exception_type=type(e).__name__,\r\n                    service=service,\r\n                    method=func.__name__,\r\n                ).inc()\r\n                raise\r\n\r\n        @wraps(func)\r\n        def sync_wrapper(*args, **kwargs):\r\n            try:\r\n                return func(*args, **kwargs)\r\n            except Exception as e:\r\n                exception_counter.labels(\r\n                    exception_type=type(e).__name__,\r\n                    service=service,\r\n                    method=func.__name__,\r\n                ).inc()\r\n                raise\r\n\r\n        if asyncio.iscoroutinefunction(func):\r\n            return async_wrapper\r\n        return sync_wrapper\r\n\r\n    return decorator\r\n\r\n\r\nclass MetricsCollector:\r\n    \"\"\"جامع metrics مركزي\"\"\"\r\n\r\n    @staticmethod\r\n    def record_interaction(interaction_type: str, child_age: int) -\u003e None:\r\n        \"\"\"تسجيل تفاعل طفل\"\"\"\r\n        age_group = MetricsCollector._get_age_group(child_age)\r\n        interactions_counter.labels(\r\n            interaction_type=interaction_type, child_age_group=age_group\r\n        ).inc()\r\n\r\n    @staticmethod\r\n    def record_voice_message(status: str, language: str = \"ar\") -\u003e None:\r\n        \"\"\"تسجيل معالجة رسالة صوتية\"\"\"\r\n        voice_messages_processed.labels(status=status, language=language).inc()\r\n\r\n    @staticmethod\r\n    def record_auth_attempt(method: str, success: bool) -\u003e None:\r\n        \"\"\"تسجيل محاولة مصادقة\"\"\"\r\n        result = \"success\" if success else \"failure\"\r\n        auth_attempts.labels(method=method, result=result).inc()\r\n\r\n    @staticmethod\r\n    def record_security_violation(violation_type: str, severity: str) -\u003e None:\r\n        \"\"\"تسجيل انتهاك أمني\"\"\"\r\n        security_violations.labels(\r\n            violation_type=violation_type, severity=severity\r\n        ).inc()\r\n\r\n    @staticmethod\r\n    def update_database_connections(database: str, pool: str, count: int) -\u003e None:\r\n        \"\"\"تحديث عدد اتصالات قاعدة البيانات\"\"\"\r\n        database_connections.labels(database=database, pool=pool).set(count)\r\n\r\n    @staticmethod\r\n    def record_cache_operation(operation: str, cache_name: str, hit: bool) -\u003e None:\r\n        \"\"\"تسجيل عملية cache\"\"\"\r\n        result = \"hit\" if hit else \"miss\"\r\n        cache_operations.labels(\r\n            operation=operation, cache_name=cache_name, result=result\r\n        ).inc()\r\n\r\n    @staticmethod\r\n    def update_circuit_breaker(service: str, state: str) -\u003e None:\r\n        \"\"\"تحديث حالة circuit breaker\"\"\"\r\n        state_map = {\"CLOSED\": 0, \"OPEN\": 1, \"HALF_OPEN\": 2}\r\n        circuit_breaker_state.labels(service=service).set(state_map.get(state, -1))\r\n\r\n    @staticmethod\r\n    def record_content_filtered(filter_type: str, reason: str) -\u003e None:\r\n        \"\"\"تسجيل محتوى تم تصفيته\"\"\"\r\n        content_filtered.labels(filter_type=filter_type, reason=reason).inc()\r\n\r\n    @staticmethod\r\n    def record_parental_consent(action: str, status: str) -\u003e None:\r\n        \"\"\"تسجيل طلب موافقة والدين\"\"\"\r\n        parental_consent_requests.labels(action=action, status=status).inc()\r\n\r\n    @staticmethod\r\n    def _get_age_group(age: int) -\u003e str:\r\n        \"\"\"تحديد الفئة العمرية\"\"\"\r\n        if age \u003c 3:\r\n            return \"0-2\"\r\n        elif age \u003c 6:\r\n            return \"3-5\"\r\n        elif age \u003c 9:\r\n            return \"6-8\"\r\n        elif age \u003c 12:\r\n            return \"9-11\"\r\n        else:\r\n            return \"12+\"\r\n\r\n\r\n# Health check metrics\r\nhealth_check_counter = Counter(\r\n    \"ai_teddy_health_checks_total\", \"Health check attempts\", [\"service\", \"result\"]\r\n)\r\n\r\nlast_successful_health_check = Gauge(\r\n    \"ai_teddy_last_successful_health_check_timestamp\",\r\n    \"Timestamp of last successful health check\",\r\n    [\"service\"],\r\n)\r\n\r\n\r\nclass HealthMetrics:\r\n    \"\"\"Metrics خاصة بـ health checks\"\"\"\r\n\r\n    @staticmethod\r\n    def record_health_check(service: str, healthy: bool) -\u003e None:\r\n        \"\"\"تسجيل health check\"\"\"\r\n        result = \"healthy\" if healthy else \"unhealthy\"\r\n        health_check_counter.labels(service=service, result=result).inc()\r\n\r\n        if healthy:\r\n            last_successful_health_check.labels(service=service).set(time.time())\r\n\r\n\r\n# Performance tracking\r\noperation_latency = Histogram(\r\n    \"ai_teddy_operation_latency_seconds\",\r\n    \"Operation latency\",\r\n    [\"operation\", \"service\"],\r\n    buckets=(0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0),\r\n)\r\n\r\n\r\nclass PerformanceTracker:\r\n    \"\"\"تتبع الأداء\"\"\"\r\n\r\n    def __init__(self, operation: str, service: str):\r\n        self.operation = operation\r\n        self.service = service\r\n        self.start_time = None\r\n\r\n    def __enter__(self):\r\n        self.start_time = time.time()\r\n        return self\r\n\r\n    def __exit__(self, exc_type, exc_val, exc_tb):\r\n        if self.start_time:\r\n            duration = time.time() - self.start_time\r\n            operation_latency.labels(\r\n                operation=self.operation, service=self.service\r\n            ).observe(duration)\r\n\r\n\r\n# Export all metrics\r\n__all__ = [\r\n    \"error_counter\",\r\n    \"exception_counter\",\r\n    \"request_duration\",\r\n    \"response_time\",\r\n    \"active_children\",\r\n    \"interactions_counter\",\r\n    \"voice_messages_processed\",\r\n    \"auth_attempts\",\r\n    \"security_violations\",\r\n    \"database_connections\",\r\n    \"cache_operations\",\r\n    \"circuit_breaker_state\",\r\n    \"content_filtered\",\r\n    \"parental_consent_requests\",\r\n    \"system_info\",\r\n    \"track_request_duration\",\r\n    \"track_exceptions\",\r\n    \"MetricsCollector\",\r\n    \"HealthMetrics\",\r\n    \"PerformanceTracker\",\r\n    \"health_check_counter\",\r\n    \"last_successful_health_check\",\r\n    \"operation_latency\",\r\n]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/domain/streaming/aggregates/aggregates.py:366:\n `)` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/security/rbac_manager.py:1:\n `from typing import Any, Dict, List, Optional\r\n\r\n\"\"\"\r\n🔐 Role-Based Access Control (RBAC) Manager - Enterprise Security 2025\r\n=====================================================================\r\n\r\nComprehensive RBAC system for AI Teddy Bear with:\r\n- Parent-Child relationship management\r\n- Fine-grained permissions\r\n- Context-aware access control\r\n- Dynamic role assignment\r\n- Audit trail for all access decisions\r\n\r\nAuthor: Jaafar Adeeb - Security Lead\r\n\"\"\"\r\n\r\nimport asyncio\r\nimport json\r\nfrom dataclasses import dataclass, field\r\nfrom datetime import datetime, timedelta\r\nfrom enum import Enum\r\nfrom typing import Any, Dict, List, Optional, Set, Union\r\n\r\nimport structlog\r\n\r\nlogger = structlog.get_logger(__name__)\r\n\r\n\r\nclass UserRole(Enum):\r\n    \"\"\"User roles in the system\"\"\"\r\n    SUPER_ADMIN = \"super_admin\"\r\n    ADMIN = \"admin\"\r\n    PARENT = \"parent\"\r\n    CHILD = \"child\"\r\n    GUARDIAN = \"guardian\"\r\n    EDUCATOR = \"educator\"\r\n    THERAPIST = \"therapist\"\r\n    SUPPORT = \"support\"\r\n    GUEST = \"guest\"\r\n\r\n\r\nclass Permission(Enum):\r\n    \"\"\"System permissions\"\"\"\r\n    # Child Management\r\n    CHILD_CREATE = \"child:create\"\r\n    CHILD_READ = \"child:read\"\r\n    CHILD_UPDATE = \"child:update\"\r\n    CHILD_DELETE = \"child:delete\"\r\n    CHILD_INTERACT = \"child:interact\"\r\n    \r\n    # Audio \u0026 Voice\r\n    AUDIO_RECORD = \"audio:record\"\r\n    AUDIO_PLAYBACK = \"audio:playback\"\r\n    AUDIO_UPLOAD = \"audio:upload\"\r\n    AUDIO_DOWNLOAD = \"audio:download\"\r\n    AUDIO_DELETE = \"audio:delete\"\r\n    \r\n    # Conversations\r\n    CONVERSATION_VIEW = \"conversation:view\"\r\n    CONVERSATION_MODERATE = \"conversation:moderate\"\r\n    CONVERSATION_EXPORT = \"conversation:export\"\r\n    CONVERSATION_DELETE = \"conversation:delete\"\r\n    \r\n    # Settings \u0026 Configuration\r\n    SETTINGS_VIEW = \"settings:view\"\r\n    SETTINGS_UPDATE = \"settings:update\"\r\n    SETTINGS_RESET = \"settings:reset\"\r\n    \r\n    # Parental Controls\r\n    PARENTAL_CONTROLS_VIEW = \"parental_controls:view\"\r\n    PARENTAL_CONTROLS_UPDATE = \"parental_controls:update\"\r\n    SCREEN_TIME_MANAGE = \"screen_time:manage\"\r\n    CONTENT_FILTER_MANAGE = \"content_filter:manage\"\r\n    \r\n    # Reports \u0026 Analytics\r\n    REPORTS_VIEW = \"reports:view\"\r\n    REPORTS_EXPORT = \"reports:export\"\r\n    ANALYTICS_VIEW = \"analytics:view\"\r\n    ANALYTICS_ADVANCED = \"analytics:advanced\"\r\n    \r\n    # Device Management\r\n    DEVICE_REGISTER = \"device:register\"\r\n    DEVICE_MANAGE = \"device:manage\"\r\n    DEVICE_RESET = \"device:reset\"\r\n    DEVICE_DELETE = \"device:delete\"\r\n    \r\n    # Family Management\r\n    FAMILY_CREATE = \"family:create\"\r\n    FAMILY_MANAGE = \"family:manage\"\r\n    FAMILY_INVITE = \"family:invite\"\r\n    FAMILY_REMOVE_MEMBER = \"family:remove_member\"\r\n    \r\n    # System Administration\r\n    SYSTEM_MONITOR = \"system:monitor\"\r\n    SYSTEM_CONFIGURE = \"system:configure\"\r\n    USER_MANAGE = \"user:manage\"\r\n    AUDIT_VIEW = \"audit:view\"\r\n\r\n\r\nclass AccessContext(Enum):\r\n    \"\"\"Access context for permission checks\"\"\"\r\n    DIRECT_INTERACTION = \"direct_interaction\"  # Child directly using device\r\n    PARENTAL_SUPERVISION = \"parental_supervision\"  # Parent supervising/managing\r\n    EMERGENCY_OVERRIDE = \"emergency_override\"  # Emergency access\r\n    SCHEDULED_ACCESS = \"scheduled_access\"  # Scheduled interaction\r\n    THERAPEUTIC_SESSION = \"therapeutic_session\"  # Therapy session\r\n    EDUCATIONAL_ACTIVITY = \"educational_activity\"  # Educational content\r\n\r\n\r\n@dataclass\r\nclass AccessRequest:\r\n    \"\"\"Access request structure\"\"\"\r\n    user_id: str\r\n    user_role: UserRole\r\n    permission: Permission\r\n    resource_id: Optional[str] = None\r\n    context: AccessContext = AccessContext.DIRECT_INTERACTION\r\n    timestamp: datetime = field(default_factory=datetime.utcnow)\r\n    ip_address: Optional[str] = None\r\n    user_agent: Optional[str] = None\r\n    additional_data: Dict[str, Any] = field(default_factory=dict)\r\n\r\n\r\n@dataclass\r\nclass AccessDecision:\r\n    \"\"\"Access decision result\"\"\"\r\n    granted: bool\r\n    reason: str\r\n    conditions: List[str] = field(default_factory=list)\r\n    expires_at: Optional[datetime] = None\r\n    audit_log_id: Optional[str] = None\r\n\r\n\r\n@dataclass\r\nclass UserProfile:\r\n    \"\"\"User profile with RBAC information\"\"\"\r\n    user_id: str\r\n    username: str\r\n    email: str\r\n    role: UserRole\r\n    permissions: Set[Permission]\r\n    family_id: Optional[str] = None\r\n    parent_id: Optional[str] = None  # For children\r\n    children_ids: List[str] = field(default_factory=list)  # For parents\r\n    is_active: bool = True\r\n    created_at: datetime = field(default_factory=datetime.utcnow)\r\n    last_login: Optional[datetime] = None\r\n    security_level: int = 1  # 1-5, higher is more secure\r\n    \r\n    # Child-specific fields\r\n    age: Optional[int] = None\r\n    grade_level: Optional[str] = None\r\n    special_needs: List[str] = field(default_factory=list)\r\n    \r\n    # Parent-specific fields\r\n    parental_controls: Dict[str, Any] = field(default_factory=dict)\r\n    supervision_level: str = \"medium\"  # low, medium, high, strict\r\n\r\n\r\nclass TeddyBearRBACManager:\r\n    \"\"\"Comprehensive RBAC manager for AI Teddy Bear system\"\"\"\r\n    \r\n    def __init__(self):\r\n        self.users: Dict[str, UserProfile] = {}\r\n        self.role_permissions: Dict[UserRole, Set[Permission]] = {}\r\n        self.family_relationships: Dict[str, List[str]] = {}  # family_id -\u003e user_ids\r\n        self.access_cache: Dict[str, AccessDecision] = {}\r\n        self.audit_log: List[Dict[str, Any]] = []\r\n        \r\n        # Initialize role permissions\r\n        self._initialize_role_permissions()\r\n        \r\n        # Time-based restrictions\r\n        self.time_restrictions: Dict[str, Dict[str, Any]] = {}\r\n        \r\n        # Emergency override settings\r\n        self.emergency_contacts: Dict[str, List[str]] = {}\r\n    \r\n    def _initialize_role_permissions(self) -\u003e Any:\r\n        \"\"\"Initialize default permissions for each role\"\"\"\r\n        \r\n        # Super Admin - Full access\r\n        self.role_permissions[UserRole.SUPER_ADMIN] = set(Permission)\r\n        \r\n        # Admin - System management\r\n        self.role_permissions[UserRole.ADMIN] = {\r\n            Permission.SYSTEM_MONITOR,\r\n            Permission.SYSTEM_CONFIGURE,\r\n            Permission.USER_MANAGE,\r\n            Permission.AUDIT_VIEW,\r\n            Permission.REPORTS_VIEW,\r\n            Permission.REPORTS_EXPORT,\r\n            Permission.ANALYTICS_VIEW,\r\n            Permission.ANALYTICS_ADVANCED,\r\n        }\r\n        \r\n        # Parent - Full control over their children\r\n        self.role_permissions[UserRole.PARENT] = {\r\n            Permission.CHILD_CREATE,\r\n            Permission.CHILD_READ,\r\n            Permission.CHILD_UPDATE,\r\n            Permission.CHILD_DELETE,\r\n            Permission.CHILD_INTERACT,\r\n            Permission.AUDIO_RECORD,\r\n            Permission.AUDIO_PLAYBACK,\r\n            Permission.AUDIO_UPLOAD,\r\n            Permission.AUDIO_DOWNLOAD,\r\n            Permission.AUDIO_DELETE,\r\n            Permission.CONVERSATION_VIEW,\r\n            Permission.CONVERSATION_MODERATE,\r\n            Permission.CONVERSATION_EXPORT,\r\n            Permission.CONVERSATION_DELETE,\r\n            Permission.SETTINGS_VIEW,\r\n            Permission.SETTINGS_UPDATE,\r\n            Permission.SETTINGS_RESET,\r\n            Permission.PARENTAL_CONTROLS_VIEW,\r\n            Permission.PARENTAL_CONTROLS_UPDATE,\r\n            Permission.SCREEN_TIME_MANAGE,\r\n            Permission.CONTENT_FILTER_MANAGE,\r\n            Permission.REPORTS_VIEW,\r\n            Permission.REPORTS_EXPORT,\r\n            Permission.ANALYTICS_VIEW,\r\n            Permission.DEVICE_REGISTER,\r\n            Permission.DEVICE_MANAGE,\r\n            Permission.DEVICE_RESET,\r\n            Permission.DEVICE_DELETE,\r\n            Permission.FAMILY_CREATE,\r\n            Permission.FAMILY_MANAGE,\r\n            Permission.FAMILY_INVITE,\r\n            Permission.FAMILY_REMOVE_MEMBER,\r\n        }\r\n        \r\n        # Child - Limited interaction permissions\r\n        self.role_permissions[UserRole.CHILD] = {\r\n            Permission.CHILD_INTERACT,\r\n            Permission.AUDIO_RECORD,\r\n            Permission.AUDIO_PLAYBACK,\r\n            Permission.SETTINGS_VIEW,\r\n        }\r\n        \r\n        # Guardian - Similar to parent but limited\r\n        self.role_permissions[UserRole.GUARDIAN] = {\r\n            Permission.CHILD_READ,\r\n            Permission.CHILD_INTERACT,\r\n            Permission.AUDIO_PLAYBACK,\r\n            Permission.CONVERSATION_VIEW,\r\n            Permission.SETTINGS_VIEW,\r\n            Permission.REPORTS_VIEW,\r\n            Permission.ANALYTICS_VIEW,\r\n        }\r\n        \r\n        # Educator - Educational content management\r\n        self.role_permissions[UserRole.EDUCATOR] = {\r\n            Permission.CHILD_INTERACT,\r\n            Permission.AUDIO_RECORD,\r\n            Permission.AUDIO_PLAYBACK,\r\n            Permission.CONVERSATION_VIEW,\r\n            Permission.REPORTS_VIEW,\r\n            Permission.ANALYTICS_VIEW,\r\n        }\r\n        \r\n        # Therapist - Therapeutic session access\r\n        self.role_permissions[UserRole.THERAPIST] = {\r\n            Permission.CHILD_INTERACT,\r\n            Permission.AUDIO_RECORD,\r\n            Permission.AUDIO_PLAYBACK,\r\n            Permission.CONVERSATION_VIEW,\r\n            Permission.CONVERSATION_EXPORT,\r\n            Permission.REPORTS_VIEW,\r\n            Permission.ANALYTICS_VIEW,\r\n        }\r\n        \r\n        # Support - Limited system access\r\n        self.role_permissions[UserRole.SUPPORT] = {\r\n            Permission.SYSTEM_MONITOR,\r\n            Permission.AUDIT_VIEW,\r\n            Permission.DEVICE_MANAGE,\r\n        }\r\n        \r\n        # Guest - Very limited access\r\n        self.role_permissions[UserRole.GUEST] = {\r\n            Permission.CHILD_INTERACT,\r\n        }\r\n    \r\n    async def check_access(self, request: AccessRequest) -\u003e AccessDecision:\r\n        \"\"\"Check if user has access to requested resource/action\"\"\"\r\n        \r\n        # Get user profile\r\n        user = self.users.get(request.user_id)\r\n        if not user:\r\n            return AccessDecision(\r\n                granted=False,\r\n                reason=\"User not found\",\r\n                audit_log_id=await self._log_access_attempt(request, False, \"User not found\")\r\n            )\r\n        \r\n        # Check if user is active\r\n        if not user.is_active:\r\n            return AccessDecision(\r\n                granted=False,\r\n                reason=\"User account is inactive\",\r\n                audit_log_id=await self._log_access_attempt(request, False, \"Inactive user\")\r\n            )\r\n        \r\n        # Check basic role permissions\r\n        if request.permission not in user.permissions:\r\n            return AccessDecision(\r\n                granted=False,\r\n                reason=\"Permission not granted to user role\",\r\n                audit_log_id=await self._log_access_attempt(request, False, \"Permission denied\")\r\n            )\r\n        \r\n        # Context-specific checks\r\n        context_check = await self._check_context_permissions(user, request)\r\n        if not context_check.granted:\r\n            return context_check\r\n        \r\n        # Resource-specific checks\r\n        resource_check = await self._check_resource_access(user, request)\r\n        if not resource_check.granted:\r\n            return resource_check\r\n        \r\n        # Time-based restrictions\r\n        time_check = await self._check_time_restrictions(user, request)\r\n        if not time_check.granted:\r\n            return time_check\r\n        \r\n        # Child safety checks\r\n        if user.role == UserRole.CHILD:\r\n            safety_check = await self._check_child_safety(user, request)\r\n            if not safety_check.granted:\r\n                return safety_check\r\n        \r\n        # Success - grant access\r\n        decision = AccessDecision(\r\n            granted=True,\r\n            reason=\"Access granted\",\r\n            conditions=context_check.conditions + resource_check.conditions + time_check.conditions,\r\n            expires_at=self._calculate_access_expiry(user, request),\r\n            audit_log_id=await self._log_access_attempt(request, True, \"Access granted\")\r\n        )\r\n        \r\n        # Cache the decision\r\n        cache_key = f\"{request.user_id}:{request.permission.value}:{request.resource_id}\"\r\n        self.access_cache[cache_key] = decision\r\n        \r\n        return decision\r\n    \r\n    async def _check_context_permissions(self, user: UserProfile, request: AccessRequest) -\u003e AccessDecision:\r\n        \"\"\"Check context-specific permissions\"\"\"\r\n        \r\n        # Direct interaction context\r\n        if request.context == AccessContext.DIRECT_INTERACTION:\r\n            if user.role == UserRole.CHILD:\r\n                # Check if child has permission for direct interaction\r\n                return AccessDecision(granted=True, reason=\"Child direct interaction allowed\")\r\n            elif user.role == UserRole.PARENT:\r\n                return AccessDecision(granted=True, reason=\"Parent access allowed\")\r\n        \r\n        # Parental supervision context\r\n        elif request.context == AccessContext.PARENTAL_SUPERVISION:\r\n            if user.role not in [UserRole.PARENT, UserRole.GUARDIAN]:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"Only parents and guardians can access parental supervision\"\r\n                )\r\n        \r\n        # Emergency override\r\n        elif request.context == AccessContext.EMERGENCY_OVERRIDE:\r\n            if user.user_id in self.emergency_contacts.get(request.resource_id, []):\r\n                return AccessDecision(\r\n                    granted=True,\r\n                    reason=\"Emergency override granted\",\r\n                    conditions=[\"Emergency access logged\"]\r\n                )\r\n            else:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"User not authorized for emergency override\"\r\n                )\r\n        \r\n        # Therapeutic session\r\n        elif request.context == AccessContext.THERAPEUTIC_SESSION:\r\n            if user.role not in [UserRole.THERAPIST, UserRole.PARENT]:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"Only therapists and parents can access therapeutic sessions\"\r\n                )\r\n        \r\n        # Educational activity\r\n        elif request.context == AccessContext.EDUCATIONAL_ACTIVITY:\r\n            if user.role not in [UserRole.EDUCATOR, UserRole.PARENT, UserRole.CHILD]:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"Only educators, parents, and children can access educational activities\"\r\n                )\r\n        \r\n        return AccessDecision(granted=True, reason=\"Context check passed\")\r\n    \r\n    async def _check_resource_access(self, user: UserProfile, request: AccessRequest) -\u003e AccessDecision:\r\n        \"\"\"Check if user can access specific resource\"\"\"\r\n        \r\n        if not request.resource_id:\r\n            return AccessDecision(granted=True, reason=\"No specific resource check needed\")\r\n        \r\n        # Check if trying to access child resource\r\n        if request.resource_id.startswith(\"child:\"):\r\n            child_id = request.resource_id.split(\":\")[1]\r\n            \r\n            # Parents can access their own children\r\n            if user.role == UserRole.PARENT and child_id in user.children_ids:\r\n                return AccessDecision(granted=True, reason=\"Parent accessing own child\")\r\n            \r\n            # Children can only access their own data\r\n            elif user.role == UserRole.CHILD and child_id == user.user_id:\r\n                return AccessDecision(granted=True, reason=\"Child accessing own data\")\r\n            \r\n            # Guardians need explicit permission\r\n            elif user.role == UserRole.GUARDIAN:\r\n                # Check if guardian has permission for this specific child\r\n                # This would typically be stored in a database\r\n                return AccessDecision(granted=True, reason=\"Guardian access (needs DB verification)\")\r\n            \r\n            else:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"User not authorized to access this child's data\"\r\n                )\r\n        \r\n        # Check family resource access\r\n        elif request.resource_id.startswith(\"family:\"):\r\n            family_id = request.resource_id.split(\":\")[1]\r\n            \r\n            if user.family_id == family_id:\r\n                return AccessDecision(granted=True, reason=\"User is member of this family\")\r\n            else:\r\n                return AccessDecision(\r\n                    granted=False,\r\n                    reason=\"User is not a member of this family\"\r\n                )\r\n        \r\n        return AccessDecision(granted=True, reason=\"Resource access check passed\")\r\n    \r\n    async def _check_time_restrictions(self, user: UserProfile, request: AccessRequest) -\u003e AccessDecision:\r\n        \"\"\"Check time-based access restrictions\"\"\"\r\n        \r\n        current_time = datetime.utcnow()\r\n        \r\n        # Check if user has time restrictions\r\n        if user.user_id in self.time_restrictions:\r\n            restrictions = self.time_restrictions[user.user_id]\r\n            \r\n            # Check daily time limits\r\n            if \"daily_limit\" in restrictions:\r\n                # This would check daily usage time against limits\r\n                pass\r\n            \r\n            # Check allowed hours\r\n            if \"allowed_hours\" in restrictions:\r\n                current_hour = current_time.hour\r\n                allowed_hours = restrictions[\"allowed_hours\"]\r\n                if current_hour not in allowed_hours:\r\n                    return AccessDecision(\r\n                        granted=False,\r\n                        reason=f\"Access not allowed at this time. Allowed hours: {allowed_hours}\"\r\n                    )\r\n            \r\n            # Check weekend restrictions\r\n            if \"weekend_restricted\" in restrictions and restrictions[\"weekend_restricted\"]:\r\n                if current_time.weekday() \u003e= 5:  # Saturday and Sunday\r\n                    return AccessDecision(\r\n                        granted=False,\r\n                        reason=\"Weekend access is restricted for this user\"\r\n                    )\r\n        \r\n        return AccessDecision(granted=True, reason=\"Time restrictions check passed\")\r\n    \r\n    async def _check_child_safety(self, user: UserProfile, request: AccessRequest) -\u003e AccessDecision:\r\n        \"\"\"Additional safety checks for child users\"\"\"\r\n        \r\n        # Check if child is in a safe environment\r\n        if request.permission in [Permission.AUDIO_RECORD, Permission.CHILD_INTERACT]:\r\n            # In a real system, this might check:\r\n            # - Location (if at home/school)\r\n            # - Time of day\r\n            # - Parental supervision status\r\n            # - Content appropriateness\r\n            \r\n            # For now, we'll allow with conditions\r\n            return AccessDecision(\r\n                granted=True,\r\n                reason=\"Child safety check passed\",\r\n                conditions=[\r\n                    \"Child interaction monitored\",\r\n                    \"Content filtering active\",\r\n                    \"Parent notification sent\"\r\n                ]\r\n            )\r\n        \r\n        return AccessDecision(granted=True, reason=\"Child safety check passed\")\r\n    \r\n    def _calculate_access_expiry(self, user: UserProfile, request: AccessRequest) -\u003e Optional[datetime]:\r\n        \"\"\"Calculate when access expires\"\"\"\r\n        \r\n        # Child sessions expire after 30 minutes\r\n        if user.role == UserRole.CHILD:\r\n            return datetime.utcnow() + timedelta(minutes=30)\r\n        \r\n        # Parent sessions expire after 4 hours\r\n        elif user.role == UserRole.PARENT:\r\n            return datetime.utcnow() + timedelta(hours=4)\r\n        \r\n        # Admin sessions expire after 8 hours\r\n        elif user.role in [UserRole.ADMIN, UserRole.SUPER_ADMIN]:\r\n            return datetime.utcnow() + timedelta(hours=8)\r\n        \r\n        # Other roles expire after 2 hours\r\n        else:\r\n            return datetime.utcnow() + timedelta(hours=2)\r\n    \r\n    async def _log_access_attempt(self, request: AccessRequest, granted: bool, reason: str) -\u003e str:\r\n        \"\"\"Log access attempt for audit trail\"\"\"\r\n        \r\n        log_entry = {\r\n            \"id\": f\"audit_{len(self.audit_log) + 1}\",\r\n            \"timestamp\": request.timestamp.isoformat(),\r\n            \"user_id\": request.user_id,\r\n            \"user_role\": request.user_role.value,\r\n            \"permission\": request.permission.value,\r\n            \"resource_id\": request.resource_id,\r\n            \"context\": request.context.value,\r\n            \"granted\": granted,\r\n            \"reason\": reason,\r\n            \"ip_address\": request.ip_address,\r\n            \"user_agent\": request.user_agent,\r\n            \"additional_data\": request.additional_data\r\n        }\r\n        \r\n        self.audit_log.append(log_entry)\r\n        \r\n        # In production, this would be stored in a database\r\n        logger.info(\"Access attempt logged\", **log_entry)\r\n        \r\n        return log_entry[\"id\"]\r\n    \r\n    async def create_user(self, user_data: Dict[str, Any]) -\u003e UserProfile:\r\n        \"\"\"Create a new user with appropriate permissions\"\"\"\r\n        \r\n        user_id = user_data[\"user_id\"]\r\n        role = UserRole(user_data[\"role\"])\r\n        \r\n        # Get base permissions for role\r\n        permissions = self.role_permissions[role].copy()\r\n        \r\n        # Create user profile\r\n        user = UserProfile(\r\n            user_id=user_id,\r\n            username=user_data[\"username\"],\r\n            email=user_data[\"email\"],\r\n            role=role,\r\n            permissions=permissions,\r\n            family_id=user_data.get(\"family_id\"),\r\n            parent_id=user_data.get(\"parent_id\"),\r\n            age=user_data.get(\"age\"),\r\n            special_needs=user_data.get(\"special_needs\", [])\r\n        )\r\n        \r\n        # Set up parent-child relationships\r\n        if role == UserRole.CHILD and user_data.get(\"parent_id\"):\r\n            parent = self.users.get(user_data[\"parent_id\"])\r\n            if parent:\r\n                parent.children_ids.append(user_id)\r\n        \r\n        self.users[user_id] = user\r\n        \r\n        logger.info(\"User created\", user_id=user_id, role=role.value)\r\n        return user\r\n    \r\n    async def set_time_restrictions(self, user_id: str, restrictions: Dict[str, Any]):\r\n        \"\"\"Set time-based restrictions for a user\"\"\"\r\n        self.time_restrictions[user_id] = restrictions\r\n        logger.info(\"Time restrictions set\", user_id=user_id, restrictions=restrictions)\r\n    \r\n    async def add_emergency_contact(self, resource_id: str, contact_id: str):\r\n        \"\"\"Add emergency contact for a resource\"\"\"\r\n        if resource_id not in self.emergency_contacts:\r\n            self.emergency_contacts[resource_id] = []\r\n        self.emergency_contacts[resource_id].append(contact_id)\r\n        logger.info(\"Emergency contact added\", resource_id=resource_id, contact_id=contact_id)\r\n    \r\n    async def get_user_permissions(self, user_id: str) -\u003e Set[Permission]:\r\n        \"\"\"Get all permissions for a user\"\"\"\r\n        user = self.users.get(user_id)\r\n        return user.permissions if user else set()\r\n    \r\n    async def get_family_members(self, family_id: str) -\u003e List[UserProfile]:\r\n        \"\"\"Get all members of a family\"\"\"\r\n        return [user for user in self.users.values() if user.family_id == family_id]\r\n    \r\n    async def get_audit_log(self, user_id: Optional[str] = None, \r\n                           start_date: Optional[datetime] = None,\r\n                           end_date: Optional[datetime] = None) -\u003e List[Dict[str, Any]]:\r\n        \"\"\"Get audit log entries with optional filters\"\"\"\r\n        filtered_log = self.audit_log\r\n        \r\n        if user_id:\r\n            filtered_log = [entry for entry in filtered_log if entry[\"user_id\"] == user_id]\r\n        \r\n        if start_date:\r\n            filtered_log = [entry for entry in filtered_log \r\n                           if datetime.fromisoformat(entry[\"timestamp\"]) \u003e= start_date]\r\n        \r\n        if end_date:\r\n            filtered_log = [entry for entry in filtered_log \r\n                           if datetime.fromisoformat(entry[\"timestamp\"]) \u003c= end_date]\r\n        \r\n        return filtered_log\r\n\r\n\r\n# Global RBAC manager instance\r\n_rbac_manager: Optional[TeddyBearRBACManager] = None\r\n\r\n\r\ndef get_rbac_manager() -\u003e TeddyBearRBACManager:\r\n    \"\"\"Get global RBAC manager instance\"\"\"\r\n    global _rbac_manager\r\n    if _rbac_manager is None:\r\n        _rbac_manager = TeddyBearRBACManager()\r\n    return _rbac_manager\r\n\r\n\r\n# Convenience decorators for permission checking\r\n\r\ndef require_permission(AccessContext = AccessContext.DIRECT_INTERACTION) -\u003e None:\r\n    \"\"\"Decorator to require specific permission for a function\"\"\"\r\n    def decorator(func) -\u003e Any:\r\n        async def wrapper(*args, **kwargs):\r\n            # Extract user_id from kwargs or first argument\r\n            user_id = kwargs.get('user_id') or (args[0] if args else None)\r\n            if not user_id:\r\n                raise ValueError(\"User ID required for permission check\")\r\n            \r\n            rbac = get_rbac_manager()\r\n            user = rbac.users.get(user_id)\r\n            if not user:\r\n                raise PermissionError(\"User not found\")\r\n            \r\n            request = AccessRequest(\r\n                user_id=user_id,\r\n                user_role=user.role,\r\n                permission=permission,\r\n                context=context\r\n            )\r\n            \r\n            decision = await rbac.check_access(request)\r\n            if not decision.granted:\r\n                raise PermissionError(f\"Access denied: {decision.reason}\")\r\n            \r\n            return await func(*args, **kwargs)\r\n        return wrapper\r\n    return decorator\r\n\r\n\r\ndef require_role(List[UserRole]) -\u003e None:\r\n    \"\"\"Decorator to require specific roles for a function\"\"\"\r\n    def decorator(func) -\u003e Any:\r\n        async def wrapper(*args, **kwargs):\r\n            user_id = kwargs.get('user_id') or (args[0] if args else None)\r\n            if not user_id:\r\n                raise ValueError(\"User ID required for role check\")\r\n            \r\n            rbac = get_rbac_manager()\r\n            user = rbac.users.get(user_id)\r\n            if not user:\r\n                raise PermissionError(\"User not found\")\r\n            \r\n            if user.role not in allowed_roles:\r\n                raise PermissionError(f\"Access denied. Required roles: {[r.value for r in allowed_roles]}\")\r\n            \r\n            return await func(*args, **kwargs)\r\n        return wrapper\r\n    return decorator` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/MetricCard.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/__main__.py:22:\n `def main(args: Optional[list] = None) -\u003e int:\r\n    \"\"\"Main entry point for the audio system.\"\"\"\r\n    try:\r\n        # Setup logging\r\n        setup_logging()\r\n        \r\n        logger.info(\"Starting audio system...\")\r\n        \r\n        # Test audio system\r\n       # if not audio_manager.test_audio_system():\r\n           # logger.error(\"Audio system test failed\")\r\n           # return 1\r\n            \r\n        #logger.info(\"Audio system started successfully\")\r\n        #return 0\r\n        \r\n    #except Exception as e:\r\n        #logger.error(f\"Error starting audio system: {e}\")\r\n       # return 1\r\n\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/core/ar_vr_preferences_manager.py:180:\n `try:\r\n            # التحقق من صحة البنية\r\n            required_keys = [\"preferred_ar_categories\", \"preferred_vr_themes\", \r\n                           \"optimal_session_duration\", \"comfort_settings\"]\r\n            \r\n            if not all(key in preferences for key in required_keys):\r\n                return False\r\n            \r\n            self.child_preferences[child_id] = preferences\r\n            return True\r\n            \r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/ui/audio/audio_engine.py:72:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/hume_integration.py:37:\n `\r\n    \"\"\"\r\n    🎭 HUME AI Integration Class\r\n    يدعم نموذجي Batch و Stream للتحليل\r\n    \"\"\"\r\n    \r\n    def __init__(self, api_key: Optional[str] = None):\r\n        self.api_key = api_key or os.getenv(\"HUME_API_KEY\")\r\n        \r\n        if not self.api_key:\r\n            raise ValueError(\"❌ HUME API Key not found! Set HUME_API_KEY environment variable\")\r\n        \r\n        logger.info(f\"🔑 HUME API Key loaded: {self.api_key[:8]}...\")\r\n        \r\n        # إنشاء العملاء\r\n        if HUME_AVAILABLE:\r\n            self.client = HumeClient(api_key=self.api_key)\r\n            self.async_client = AsyncHumeClient(api_key=self.api_key)\r\n            logger.info(\"✅ HUME Clients initialized\")\r\n        else:\r\n            self.client = None\r\n            self.async_client = None\r\n            logger.warning(\"⚠️ HUME Clients not available\")\r\n    \r\n    # ==================== BATCH MODE ====================\r\n    \r\n    def analyze_batch(self, file_paths: List[str], udid: str = \"TEST_ESP32\", child_name: str = \"طفل اختبار\", child_age: int = 6) -\u003e Dict[str, Any]:\r\n        \"\"\"\r\n        🔄 نمط Batch - تحليل ملفات متعددة (HUME v0.9.0) مع حفظ في قاعدة البيانات\r\n        \r\n        Args:\r\n            file_paths: قائمة مسارات الملفات للتحليل\r\n            udid: معرف الجهاز\r\n            child_name: اسم الطفل\r\n            child_age: عمر الطفل\r\n            \r\n        Returns:\r\n            نتائج التحليل المحفوظة في ملف JSON وقاعدة البيانات\r\n        \"\"\"\r\n        if not HUME_AVAILABLE or not self.client:\r\n            return {\"error\": \"HUME SDK not available\"}\r\n        \r\n        # حفظ الجلسة في قاعدة البيانات\r\n        session_record = None\r\n        \r\n        try:\r\n            logger.info(\"🔄 Starting Batch Analysis...\")\r\n            logger.info(f\"📁 Files to analyze: {len(file_paths)}\")\r\n            \r\n            # التحقق من وجود الملفات\r\n            valid_files = []\r\n            for file_path in file_paths:\r\n                if Path(file_path).exists():\r\n                    valid_files.append(file_path)\r\n                    logger.info(f\"  ✅ {file_path}\")\r\n                else:\r\n                    logger.error(f\"  ❌ File not found: {file_path}\")\r\n            \r\n            if not valid_files:\r\n                return {\"error\": \"No valid files found\"}\r\n            \r\n            # 💾 حفظ الجلسة في قاعدة البيانات\r\n            session_record = db_manager.save_session(\r\n                udid=udid,\r\n                child_name=child_name,\r\n                child_age=child_age,\r\n                mode=\"batch\",\r\n                audio_file=valid_files[0] if valid_files else None\r\n            )\r\n            \r\n            logger.info(\"📤 Submitting batch job to HUME...\")\r\n            \r\n            # إرسال الملفات للتحليل (واجهة HUME v0.9.0)\r\n            job = self.client.expression_measurement.batch.submit_job(\r\n                urls=valid_files,\r\n                configs=[\r\n                    {\"prosody\": {}},  # تحليل نبرة الصوت\r\n                    {\"face\": {}}      # تحليل تعبيرات الوجه\r\n                ]\r\n            )\r\n            \r\n            logger.info(f\"📋 Job ID: {job.job_id}\")\r\n            logger.info(\"⏳ Waiting for analysis to complete...\")\r\n            \r\n            # انتظار اكتمال التحليل\r\n            job = self.client.expression_measurement.batch.get_job_details(job.job_id)\r\n            \r\n            while job.state not in [\"COMPLETED\", \"FAILED\"]:\r\n                logger.info(\"⏳ Still processing...\")\r\n                import time\r\n                time.sleep(5)\r\n                job = self.client.expression_measurement.batch.get_job_details(job.job_id)\r\n            \r\n            if job.state == \"FAILED\":\r\n                return {\r\n                    \"status\": \"error\",\r\n                    \"mode\": \"batch\",\r\n                    \"error\": \"HUME job failed\"\r\n                }\r\n            \r\n            # تحميل النتائج\r\n            logger.info(\"📥 Downloading predictions...\")\r\n            predictions = self.client.expression_measurement.batch.get_job_predictions(job.job_id)\r\n            \r\n            # استخراج المشاعر وحفظها في قاعدة البيانات\r\n            emotions_data = self._extract_emotions_from_predictions(predictions)\r\n            \r\n            if emotions_data and session_record:\r\n                logger.info(\"💾 Saving emotions to database...\")\r\n                db_manager.save_emotions(session_record.id, emotions_data)\r\n                db_manager.update_session_status(session_record.id, \"success\")\r\n            \r\n            # حفظ النتائج في ملف\r\n            output_file = \"batch_predictions.json\"\r\n            with open(output_file, 'w') as f:\r\n                json.dump(predictions, f, indent=2)\r\n            \r\n            logger.info(\"✅ Batch analysis completed successfully!\")\r\n            \r\n            return {\r\n                \"status\": \"success\",\r\n                \"mode\": \"batch\",\r\n                \"session_id\": session_record.id if session_record else None,\r\n                \"files_analyzed\": len(valid_files),\r\n                \"output_file\": output_file,\r\n                \"job_id\": job.job_id,\r\n                \"emotions_saved\": len(emotions_data) if emotions_data else 0,\r\n                \"results\": predictions\r\n            }\r\n            \r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ Batch analysis failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/enhanced_hume_integration_2025.py:56:\n `\r\n    \"\"\"🎭 Enhanced HUME AI Integration with 2025 Standards\"\"\"\r\n    \r\n    def __init__(self, api_key: Optional[str] = None):\r\n        \"\"\"تهيئة التكامل المحسن مع HUME AI\"\"\"\r\n        self.api_key = api_key or os.getenv(\"HUME_API_KEY\")\r\n        if not self.api_key:\r\n            logger.warning(\"⚠️ HUME API Key not found - using demo mode\")\r\n            self.api_key = \"demo_key\"\r\n        \r\n        self.config = CalibrationConfig()\r\n        self.logger = logging.getLogger(__name__)\r\n        \r\n        # Initialize HUME clients\r\n        if HUME_AVAILABLE and self.api_key != \"demo_key\":\r\n            try:\r\n                self.client = HumeClient(api_key=self.api_key)\r\n                self.async_client = AsyncHumeClient(api_key=self.api_key)\r\n                logger.info(\"✅ HUME AI clients initialized successfully\")\r\n            except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"⚠️ HUME client initialization failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/clients/azure_speech_client.py:106:\n `try:\r\n            # Simple health check\r\n            synthesizer = speechsdk.SpeechSynthesizer(speech_config=self.speech_config)\r\n            result = synthesizer.get_voices_async().get()\r\n            return result.reason == speechsdk.ResultReason.VoicesListRetrieved\r\n        # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/ui/networking/websocket_client.py:1:\n `\"\"\"\r\nEnterprise WebSocket Client for AI Teddy Bear\r\nProvides reliable real-time communication with auto-reconnection capability\r\n\"\"\"\r\n\r\nimport json\r\nimport logging\r\nfrom datetime import datetime\r\nfrom typing import Any, Dict\r\n\r\nimport structlog\r\nfrom PySide6.QtCore import QObject, QTimer, QUrl, Signal\r\nfrom PySide6.QtWebSockets import QWebSocket\r\n\r\nlogger = structlog.get_logger()\r\n\r\n\r\nclass WebSocketClient(QObject):\r\n    \"\"\"Enterprise WebSocket client with auto-reconnection\"\"\"\r\n    \r\n    connected = Signal()\r\n    disconnected = Signal()\r\n    message_received = Signal(dict)\r\n    error_occurred = Signal(str)\r\n    connection_status_changed = Signal(str)\r\n    \r\n    def __init__(self, parent=None):\r\n        super().__init__(parent)\r\n        self.websocket = QWebSocket()\r\n        self.url = QUrl(\"ws://localhost:8000/ws/ui_session\")\r\n        self.reconnect_timer = QTimer()\r\n        self.heartbeat_timer = QTimer()\r\n        self.is_connected = False\r\n        self.reconnect_attempts = 0\r\n        self.max_reconnect_attempts = 10\r\n        \r\n        self._setup_timers()\r\n        self._setup_websocket_signals()\r\n    \r\n    def _setup_timers(self) -\u003e Any:\r\n        \"\"\"Initialize and configure timers\"\"\"\r\n        self.reconnect_timer.timeout.connect(self._attempt_reconnect)\r\n        self.heartbeat_timer.timeout.connect(self._send_heartbeat)\r\n        self.heartbeat_timer.start(30000)  # 30 seconds\r\n    \r\n    def _setup_websocket_signals(self) -\u003e Any:\r\n        \"\"\"Connect WebSocket signals to handlers\"\"\"\r\n        self.websocket.connected.connect(self._on_connected)\r\n        self.websocket.disconnected.connect(self._on_disconnected)\r\n        self.websocket.textMessageReceived.connect(self._on_message_received)\r\n        self.websocket.errorOccurred.connect(self._on_error)\r\n    \r\n    def connect_to_server(self) -\u003e Any:\r\n        \"\"\"Connect to WebSocket server\"\"\"\r\n        logger.info(\"Attempting WebSocket connection\", url=str(self.url))\r\n        self.connection_status_changed.emit(\"Connecting...\")\r\n        self.websocket.open(self.url)\r\n    \r\n    def disconnect_from_server(self) -\u003e Any:\r\n        \"\"\"Disconnect from WebSocket server\"\"\"\r\n        self.websocket.close()\r\n        self.reconnect_timer.stop()\r\n    \r\n    def send_message(Dict[str, Any]) -\u003e None:\r\n        \"\"\"Send message to server\"\"\"\r\n        if self.is_connected:\r\n            json_message = json.dumps(message)\r\n            self.websocket.sendTextMessage(json_message)\r\n            logger.debug(\"Sent WebSocket message\", message_type=message.get(\"type\"))\r\n    \r\n    def _on_connected(self) -\u003e Any:\r\n        \"\"\"Handle successful connection\"\"\"\r\n        self.is_connected = True\r\n        self.reconnect_attempts = 0\r\n        self.reconnect_timer.stop()\r\n        self.connection_status_changed.emit(\"Connected\")\r\n        self.connected.emit()\r\n        logger.info(\"WebSocket connected successfully\")\r\n    \r\n    def _on_disconnected(self) -\u003e Any:\r\n        \"\"\"Handle disconnection\"\"\"\r\n        self.is_connected = False\r\n        self.connection_status_changed.emit(\"Disconnected\")\r\n        self.disconnected.emit()\r\n        logger.warning(\"WebSocket disconnected\")\r\n        \r\n        if self.reconnect_attempts \u003c self.max_reconnect_attempts:\r\n            self.reconnect_timer.start(5000)  # Retry in 5 seconds\r\n    \r\n    def _on_message_received(str) -\u003e None:\r\n        \"\"\"Handle received message\"\"\"\r\n        try:\r\n            data = json.loads(message)\r\n            self.message_received.emit(data)\r\n            logger.debug(\"Received WebSocket message\", message_type=data.get(\"type\"))\r\n        except json.JSONDecodeError as e:\r\n            logger.error(\"Failed to parse WebSocket message\", error=str(e))\r\n            self.error_occurred.emit(f\"Invalid message format: {e}\")\r\n    \r\n    def _on_error(self, error) -\u003e Any:\r\n        \"\"\"Handle WebSocket error\"\"\"\r\n        error_msg = f\"WebSocket error: {error}\"\r\n        logger.error(error_msg)\r\n        self.error_occurred.emit(error_msg)\r\n        self.connection_status_changed.emit(\"Error\")\r\n    \r\n    def _attempt_reconnect(self) -\u003e Any:\r\n        \"\"\"Attempt to reconnect\"\"\"\r\n        self.reconnect_attempts += 1\r\n        if self.reconnect_attempts \u003c= self.max_reconnect_attempts:\r\n            logger.info(\"Attempting reconnection\", attempt=self.reconnect_attempts)\r\n            self.connect_to_server()\r\n        else:\r\n            self.reconnect_timer.stop()\r\n            self.connection_status_changed.emit(\"Failed\")\r\n            logger.error(\"Max reconnection attempts reached\")\r\n    \r\n    def _send_heartbeat(self) -\u003e Any:\r\n        \"\"\"Send heartbeat to keep connection alive\"\"\"\r\n        if self.is_connected:\r\n            self.send_message({\"type\": \"ping\", \"timestamp\": datetime.now().isoformat()})\r\n    \r\n    def set_url(str) -\u003e None:\r\n        \"\"\"Update the WebSocket URL\"\"\"\r\n        self.url = QUrl(url)\r\n        logger.info(\"WebSocket URL updated\", url=url)\r\n    \r\n    def get_connection_info(self) -\u003e dict:\r\n        \"\"\"Get current connection information\"\"\"\r\n        return {\r\n            \"url\": str(self.url),\r\n            \"is_connected\": self.is_connected,\r\n            \"reconnect_attempts\": self.reconnect_attempts,\r\n            \"max_attempts\": self.max_reconnect_attempts\r\n        }` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/ai/main_service.py:144:\n `try:\r\n                    service_health = await service.health_check()\r\n                    checks[f\"{service_name}_healthy\"] = service_health.get(\r\n                        \"healthy\", False\r\n                    )\r\n                # FIXME: replace with specific exception\r` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/security/vault_integration.py:507:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/hume_emotion_analyzer.py:82:\n `\r\n    \"\"\"\r\n    محلل المشاعر الصوتي باستخدام HUME AI\r\n    مصمم خصيصاً لتحليل أصوات الأطفال بدقة عالية\r\n    \"\"\"\r\n    \r\n    def __init__(self, api_key: Optional[str] = None):\r\n        self.api_key = api_key or os.getenv(\"HUME_API_KEY\")\r\n        self.base_url = \"https://api.hume.ai/v0\"\r\n        \r\n        # Child-specific emotion mapping\r\n        self.child_emotion_map = {\r\n            # HUME emotions → Child emotions\r\n            \"Joy\": \"joy\",\r\n            \"Sadness\": \"sadness\", \r\n            \"Anger\": \"anger\",\r\n            \"Fear\": \"fear\",\r\n            \"Surprise\": \"surprise\",\r\n            \"Excitement\": \"excitement\",\r\n            \"Calmness\": \"calmness\",\r\n            \"Curiosity\": \"curiosity\",\r\n            \"Frustration\": \"frustration\",\r\n            \"Admiration\": \"excitement\",\r\n            \"Amusement\": \"playfulness\",\r\n            \"Anxiety\": \"fear\",\r\n            \"Boredom\": \"tiredness\",\r\n            \"Confusion\": \"curiosity\",\r\n            \"Contentment\": \"calmness\",\r\n            \"Embarrassment\": \"shyness\",\r\n            \"Enthusiasm\": \"excitement\",\r\n            \"Interest\": \"curiosity\",\r\n            \"Pride\": \"joy\",\r\n            \"Shame\": \"shyness\",\r\n            \"Tiredness\": \"tiredness\"\r\n        }\r\n        \r\n        # Age-specific analysis parameters\r\n        self.age_parameters = {\r\n            \"3-4\": {\"sensitivity\": 0.8, \"attention_threshold\": 0.3},\r\n            \"5-6\": {\"sensitivity\": 0.7, \"attention_threshold\": 0.4}, \r\n            \"7-8\": {\"sensitivity\": 0.6, \"attention_threshold\": 0.5},\r\n            \"9-10\": {\"sensitivity\": 0.5, \"attention_threshold\": 0.6},\r\n            \"11+\": {\"sensitivity\": 0.4, \"attention_threshold\": 0.7}\r\n        }\r\n        \r\n        logger.info(f\"🎤 HUME Speech Emotion Analyzer initialized\")\r\n        logger.error(f\"   API Status: {'✅ Ready' if self.api_key else '❌ No API Key'}\")\r\n    \r\n    async def analyze_child_voice(\r\n        self, \r\n        audio_data: bytes, \r\n        child_age: int = 6,\r\n        child_name: str = \"طفل\",\r\n        context: Dict[str, Any] = None\r\n    ) -\u003e ChildVoiceEmotion:\r\n        \"\"\"\r\n        تحليل صوت الطفل مباشرة بدون تحويل لنص\r\n        \r\n        Args:\r\n            audio_data: البيانات الصوتية (WAV, MP3, etc.)\r\n            child_age: عمر الطفل لتخصيص التحليل\r\n            child_name: اسم الطفل\r\n            context: سياق إضافي (وقت اليوم، النشاط الأخير، إلخ)\r\n            \r\n        Returns:\r\n            ChildVoiceEmotion: تحليل شامل لمشاعر الطفل\r\n        \"\"\"\r\n        try:\r\n            if not self.api_key:\r\n                logger.warning(\"⚠️ No HUME API key provided, using fallback analysis\")\r\n                return self._create_fallback_analysis()\r\n            \r\n            # حفظ الصوت في ملف مؤقت\r\n            temp_audio_path = await self._save_temp_audio(audio_data)\r\n            \r\n            try:\r\n                # تحليل باستخدام HUME AI\r\n                hume_results = await self._analyze_with_hume(temp_audio_path)\r\n                \r\n                # تحويل نتائج HUME إلى تحليل مخصص للطفل\r\n                child_emotion = await self._convert_to_child_emotion(\r\n                    hume_results, child_age, child_name, context\r\n                )\r\n                \r\n                # إضافة تحليل تطويري إضافي\r\n                child_emotion = await self._add_developmental_analysis(\r\n                    child_emotion, audio_data, child_age\r\n                )\r\n                \r\n                return child_emotion\r\n                \r\n            finally:\r\n                # تنظيف الملف المؤقت\r\n                if os.path.exists(temp_audio_path):\r\n                    os.remove(temp_audio_path)\r\n                    \r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ HUME Analysis Error: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/cloud_server_launcher.py:32:\n `\r\n    \"\"\"مشغل ومراقب السيرفر السحابي\"\"\"\r\n    \r\n    def __init__(self):\r\n        self.server_process = None\r\n        self.server_running = False\r\n        self.server_url = \"http://127.0.0.1:8000\"\r\n        self.system_stats = {}\r\n        \r\n        self.create_launcher_gui()\r\n        self.start_monitoring()\r\n        \r\n    def create_launcher_gui(self) -\u003e Any:\r\n        \"\"\"إنشاء واجهة مشغل السيرفر\"\"\"\r\n        self.root = tk.Tk()\r\n        self.root.title(\"☁️ AI Teddy Bear - Cloud Server Control\")\r\n        self.root.geometry(\"1000x700\")\r\n        self.root.configure(bg='#2c3e50')\r\n        \r\n        # Header\r\n        self.create_header()\r\n        \r\n        # Main Content\r\n        self.create_main_content()\r\n        \r\n        # Footer\r\n        self.create_footer()\r\n        \r\n    def create_header(self) -\u003e Any:\r\n        \"\"\"إنشاء الهيدر\"\"\"\r\n        header = tk.Frame(self.root, bg='#34495e', height=100)\r\n        header.pack(fill=\"x\")\r\n        header.pack_propagate(False)\r\n        \r\n        # Title\r\n        title_frame = tk.Frame(header, bg='#34495e')\r\n        title_frame.pack(side=\"left\", fill=\"y\", padx=20)\r\n        \r\n        tk.Label(\r\n            title_frame,\r\n            text=\"☁️ AI Teddy Bear Cloud Server\",\r\n            font=('Arial', 22, 'bold'),\r\n            fg='white',\r\n            bg='#34495e'\r\n        ).pack(anchor=\"w\", pady=10)\r\n        \r\n        tk.Label(\r\n            title_frame,\r\n            text=\"Complete Production-Ready Cloud Infrastructure\",\r\n            font=('Arial', 12),\r\n            fg='#bdc3c7',\r\n            bg='#34495e'\r\n        ).pack(anchor=\"w\")\r\n        \r\n        # Server Status\r\n        status_frame = tk.Frame(header, bg='#34495e')\r\n        status_frame.pack(side=\"right\", fill=\"y\", padx=20)\r\n        \r\n        self.server_status_label = tk.Label(\r\n            status_frame,\r\n            text=\"🔴 SERVER OFFLINE\",\r\n            font=('Arial', 14, 'bold'),\r\n            fg='#e74c3c',\r\n            bg='#34495e'\r\n        )\r\n        self.server_status_label.pack(pady=15)\r\n        \r\n        self.server_url_label = tk.Label(\r\n            status_frame,\r\n            text=f\"URL: {self.server_url}\",\r\n            font=('Arial', 10),\r\n            fg='#bdc3c7',\r\n            bg='#34495e'\r\n        )\r\n        self.server_url_label.pack()\r\n        \r\n    def create_main_content(self) -\u003e Any:\r\n        \"\"\"إنشاء المحتوى الرئيسي\"\"\"\r\n        main_frame = tk.Frame(self.root, bg='#ecf0f1')\r\n        main_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n        # Control Panel\r\n        self.create_control_panel(main_frame)\r\n        \r\n        # Tabs for monitoring\r\n        self.create_monitoring_tabs(main_frame)\r\n        \r\n    def create_control_panel(self, parent) -\u003e Any:\r\n        \"\"\"لوحة التحكم\"\"\"\r\n        control_frame = tk.LabelFrame(parent, text=\"🎮 Server Control Panel\", font=('Arial', 12, 'bold'), bg='#ecf0f1')\r\n        control_frame.pack(fill=\"x\", pady=10)\r\n        \r\n        buttons_frame = tk.Frame(control_frame, bg='#ecf0f1')\r\n        buttons_frame.pack(pady=15)\r\n        \r\n        # Main Control Buttons\r\n        self.start_button = tk.Button(\r\n            buttons_frame,\r\n            text=\"🚀 START SERVER\",\r\n            font=('Arial', 14, 'bold'),\r\n            bg='#27ae60',\r\n            fg='white',\r\n            width=15,\r\n            height=2,\r\n            command=self.start_server\r\n        )\r\n        self.start_button.pack(side=\"left\", padx=10)\r\n        \r\n        self.stop_button = tk.Button(\r\n            buttons_frame,\r\n            text=\"🛑 STOP SERVER\",\r\n            font=('Arial', 14, 'bold'),\r\n            bg='#e74c3c',\r\n            fg='white',\r\n            width=15,\r\n            height=2,\r\n            command=self.stop_server,\r\n            state='disabled'\r\n        )\r\n        self.stop_button.pack(side=\"left\", padx=10)\r\n        \r\n        self.restart_button = tk.Button(\r\n            buttons_frame,\r\n            text=\"🔄 RESTART\",\r\n            font=('Arial', 14, 'bold'),\r\n            bg='#f39c12',\r\n            fg='white',\r\n            width=15,\r\n            height=2,\r\n            command=self.restart_server,\r\n            state='disabled'\r\n        )\r\n        self.restart_button.pack(side=\"left\", padx=10)\r\n        \r\n        # Quick Actions\r\n        actions_frame = tk.Frame(control_frame, bg='#ecf0f1')\r\n        actions_frame.pack(pady=10)\r\n        \r\n        quick_actions = [\r\n            (\"🌐 Open Web Dashboard\", self.open_dashboard, \"#3498db\"),\r\n            (\"📊 View API Docs\", self.view_api_docs, \"#9b59b6\"),\r\n            (\"🔍 Health Check\", self.health_check, \"#2ecc71\"),\r\n            (\"📁 Open Logs\", self.open_logs, \"#95a5a6\"),\r\n            (\"⚙️ Config Manager\", self.config_manager, \"#34495e\"),\r\n            (\"🗄️ Database Admin\", self.database_admin, \"#e67e22\")\r\n        ]\r\n        \r\n        for i, (text, command, color) in enumerate(quick_actions):\r\n            btn = tk.Button(\r\n                actions_frame,\r\n                text=text,\r\n                command=command,\r\n                bg=color,\r\n                fg='white',\r\n                width=18,\r\n                font=('Arial', 9)\r\n            )\r\n            btn.grid(row=i//3, column=i%3, padx=5, pady=5)\r\n        \r\n    def create_monitoring_tabs(self, parent) -\u003e Any:\r\n        \"\"\"تبويبات المراقبة\"\"\"\r\n        notebook = ttk.Notebook(parent)\r\n        notebook.pack(fill=\"both\", expand=True, pady=10)\r\n        \r\n        # Server Logs Tab\r\n        self.create_logs_tab(notebook)\r\n        \r\n        # System Stats Tab\r\n        self.create_stats_tab(notebook)\r\n        \r\n        # API Monitor Tab\r\n        self.create_api_tab(notebook)\r\n        \r\n        # Database Monitor Tab\r\n        self.create_database_tab(notebook)\r\n        \r\n        # Active Connections Tab\r\n        self.create_connections_tab(notebook)\r\n        \r\n    def create_logs_tab(self, notebook) -\u003e Any:\r\n        \"\"\"تبويب السجلات\"\"\"\r\n        logs_frame = tk.Frame(notebook, bg='#ffffff')\r\n        notebook.add(logs_frame, text=\"📋 Server Logs\")\r\n        \r\n        # Log Controls\r\n        log_controls = tk.Frame(logs_frame, bg='#ffffff')\r\n        log_controls.pack(fill=\"x\", padx=10, pady=5)\r\n        \r\n        tk.Button(log_controls, text=\"🔄 Refresh\", command=self.refresh_logs, bg=\"#3498db\", fg=\"white\").pack(side=\"left\", padx=5)\r\n        tk.Button(log_controls, text=\"🗑️ Clear\", command=self.clear_logs, bg=\"#e74c3c\", fg=\"white\").pack(side=\"left\", padx=5)\r\n        tk.Button(log_controls, text=\"💾 Save\", command=self.save_logs, bg=\"#27ae60\", fg=\"white\").pack(side=\"left\", padx=5)\r\n        \r\n        # Log Level Filter\r\n        tk.Label(log_controls, text=\"Level:\", bg='#ffffff').pack(side=\"left\", padx=(20, 5))\r\n        self.log_level_var = tk.StringVar(value=\"ALL\")\r\n        log_level_combo = ttk.Combobox(log_controls, textvariable=self.log_level_var, width=10)\r\n        log_level_combo['values'] = ('ALL', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')\r\n        log_level_combo.pack(side=\"left\", padx=5)\r\n        \r\n        # Log Display\r\n        self.logs_text = scrolledtext.ScrolledText(\r\n            logs_frame,\r\n            height=20,\r\n            font=('Consolas', 9),\r\n            bg='#2c3e50',\r\n            fg='#ecf0f1',\r\n            insertbackground='white'\r\n        )\r\n        self.logs_text.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n    def create_stats_tab(self, notebook) -\u003e Any:\r\n        \"\"\"تبويب إحصائيات النظام\"\"\"\r\n        stats_frame = tk.Frame(notebook, bg='#ffffff')\r\n        notebook.add(stats_frame, text=\"📊 System Stats\")\r\n        \r\n        # Stats Grid\r\n        stats_grid = tk.Frame(stats_frame, bg='#ffffff')\r\n        stats_grid.pack(fill=\"x\", padx=10, pady=10)\r\n        \r\n        # Create stat displays\r\n        self.create_stat_display(stats_grid, \"💻 CPU Usage\", \"cpu_percent\", \"%\", 0, 0)\r\n        self.create_stat_display(stats_grid, \"🧠 Memory Usage\", \"memory_percent\", \"%\", 0, 1)\r\n        self.create_stat_display(stats_grid, \"💽 Disk Usage\", \"disk_percent\", \"%\", 0, 2)\r\n        self.create_stat_display(stats_grid, \"🌐 Network I/O\", \"network_io\", \"MB/s\", 0, 3)\r\n        \r\n        self.create_stat_display(stats_grid, \"👥 Active Users\", \"active_users\", \"\", 1, 0)\r\n        self.create_stat_display(stats_grid, \"🔗 API Requests\", \"api_requests\", \"/min\", 1, 1)\r\n        self.create_stat_display(stats_grid, \"🗄️ DB Connections\", \"db_connections\", \"\", 1, 2)\r\n        self.create_stat_display(stats_grid, \"⏱️ Uptime\", \"uptime\", \"\", 1, 3)\r\n        \r\n        # Detailed System Info\r\n        info_frame = tk.LabelFrame(stats_frame, text=\"📋 Detailed System Information\", font=('Arial', 12, 'bold'))\r\n        info_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n        self.system_info_text = tk.Text(info_frame, height=15, font=('Consolas', 9))\r\n        info_scroll = tk.Scrollbar(info_frame, orient=\"vertical\", command=self.system_info_text.yview)\r\n        self.system_info_text.configure(yscrollcommand=info_scroll.set)\r\n        self.system_info_text.pack(side=\"left\", fill=\"both\", expand=True)\r\n        info_scroll.pack(side=\"right\", fill=\"y\")\r\n        \r\n    def create_stat_display(self, parent, title, key, unit, row, col) -\u003e Any:\r\n        \"\"\"إنشاء عرض إحصائي\"\"\"\r\n        stat_frame = tk.LabelFrame(parent, text=title, font=('Arial', 10, 'bold'))\r\n        stat_frame.grid(row=row, column=col, padx=5, pady=5, sticky=\"ew\", ipadx=10, ipady=5)\r\n        \r\n        value_label = tk.Label(stat_frame, text=\"--\", font=('Arial', 16, 'bold'), fg='#2c3e50')\r\n        value_label.pack()\r\n        \r\n        unit_label = tk.Label(stat_frame, text=unit, font=('Arial', 10), fg='#7f8c8d')\r\n        unit_label.pack()\r\n        \r\n        # Store reference for updates\r\n        setattr(self, f\"{key}_label\", value_label)\r\n        \r\n    def create_api_tab(self, notebook) -\u003e Any:\r\n        \"\"\"تبويب مراقبة API\"\"\"\r\n        api_frame = tk.Frame(notebook, bg='#ffffff')\r\n        notebook.add(api_frame, text=\"🔌 API Monitor\")\r\n        \r\n        # API Endpoints Status\r\n        endpoints_frame = tk.LabelFrame(api_frame, text=\"🎯 API Endpoints Status\", font=('Arial', 12, 'bold'))\r\n        endpoints_frame.pack(fill=\"x\", padx=10, pady=10)\r\n        \r\n        # Test buttons for endpoints\r\n        endpoints_grid = tk.Frame(endpoints_frame)\r\n        endpoints_grid.pack(pady=10)\r\n        \r\n        endpoints = [\r\n            (\"Health Check\", \"/health\", self.test_health),\r\n            (\"ESP32 Register\", \"/esp32/register\", self.test_esp32_register),\r\n            (\"Audio Processing\", \"/esp32/audio\", self.test_audio_processing),\r\n            (\"Children API\", \"/api/children\", self.test_children_api),\r\n            (\"Conversations\", \"/api/conversations\", self.test_conversations),\r\n            (\"Analytics\", \"/api/analytics\", self.test_analytics)\r\n        ]\r\n        \r\n        for i, (name, endpoint, command) in enumerate(endpoints):\r\n            btn = tk.Button(\r\n                endpoints_grid,\r\n                text=f\"🧪 {name}\",\r\n                command=command,\r\n                bg=\"#3498db\",\r\n                fg=\"white\",\r\n                width=20\r\n            )\r\n            btn.grid(row=i//2, column=i%2, padx=5, pady=5)\r\n        \r\n        # API Response Display\r\n        response_frame = tk.LabelFrame(api_frame, text=\"📄 API Response\", font=('Arial', 12, 'bold'))\r\n        response_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n        self.api_response_text = scrolledtext.ScrolledText(\r\n            response_frame,\r\n            height=15,\r\n            font=('Consolas', 9)\r\n        )\r\n        self.api_response_text.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n    def create_database_tab(self, notebook) -\u003e Any:\r\n        \"\"\"تبويب مراقبة قاعدة البيانات\"\"\"\r\n        db_frame = tk.Frame(notebook, bg='#ffffff')\r\n        notebook.add(db_frame, text=\"🗄️ Database\")\r\n        \r\n        # Database Actions\r\n        db_actions = tk.Frame(db_frame, bg='#ffffff')\r\n        db_actions.pack(fill=\"x\", padx=10, pady=10)\r\n        \r\n        db_buttons = [\r\n            (\"📊 Show Tables\", self.show_tables, \"#2ecc71\"),\r\n            (\"👥 Users Count\", self.count_users, \"#3498db\"),\r\n            (\"💬 Conversations\", self.show_conversations, \"#9b59b6\"),\r\n            (\"🧹 Cleanup Old Data\", self.cleanup_database, \"#e74c3c\"),\r\n            (\"💾 Backup Database\", self.backup_database, \"#f39c12\"),\r\n            (\"🔄 Reset Database\", self.reset_database, \"#95a5a6\")\r\n        ]\r\n        \r\n        for i, (text, command, color) in enumerate(db_buttons):\r\n            btn = tk.Button(\r\n                db_actions,\r\n                text=text,\r\n                command=command,\r\n                bg=color,\r\n                fg=\"white\",\r\n                width=18\r\n            )\r\n            btn.grid(row=i//3, column=i%3, padx=5, pady=5)\r\n        \r\n        # Database Display\r\n        self.db_text = scrolledtext.ScrolledText(\r\n            db_frame,\r\n            height=20,\r\n            font=('Consolas', 9)\r\n        )\r\n        self.db_text.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n    def create_connections_tab(self, notebook) -\u003e Any:\r\n        \"\"\"تبويب الاتصالات النشطة\"\"\"\r\n        conn_frame = tk.Frame(notebook, bg='#ffffff')\r\n        notebook.add(conn_frame, text=\"🔗 Active Connections\")\r\n        \r\n        # Connection Controls\r\n        conn_controls = tk.Frame(conn_frame, bg='#ffffff')\r\n        conn_controls.pack(fill=\"x\", padx=10, pady=10)\r\n        \r\n        tk.Button(conn_controls, text=\"🔄 Refresh\", command=self.refresh_connections, bg=\"#3498db\", fg=\"white\").pack(side=\"left\", padx=5)\r\n        tk.Button(conn_controls, text=\"🚫 Disconnect All\", command=self.disconnect_all, bg=\"#e74c3c\", fg=\"white\").pack(side=\"left\", padx=5)\r\n        \r\n        # Connections Display\r\n        self.connections_text = scrolledtext.ScrolledText(\r\n            conn_frame,\r\n            height=20,\r\n            font=('Consolas', 9)\r\n        )\r\n        self.connections_text.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        \r\n    def create_footer(self) -\u003e Any:\r\n        \"\"\"إنشاء الفوتر\"\"\"\r\n        footer = tk.Frame(self.root, bg='#34495e', height=40)\r\n        footer.pack(fill=\"x\", side=\"bottom\")\r\n        footer.pack_propagate(False)\r\n        \r\n        self.status_label = tk.Label(\r\n            footer,\r\n            text=\"🏗️ Cloud Server Control Panel Ready\",\r\n            font=('Arial', 11),\r\n            fg='white',\r\n            bg='#34495e'\r\n        )\r\n        self.status_label.pack(side=\"left\", padx=15, pady=10)\r\n        \r\n        # Server Time\r\n        self.time_label = tk.Label(\r\n            footer,\r\n            text=\"\",\r\n            font=('Arial', 10),\r\n            fg='#bdc3c7',\r\n            bg='#34495e'\r\n        )\r\n        self.time_label.pack(side=\"right\", padx=15, pady=10)\r\n        \r\n        self.update_time()\r\n        \r\n    def update_time(self) -\u003e Any:\r\n        \"\"\"تحديث الوقت\"\"\"\r\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n        self.time_label.config(text=f\"🕐 {current_time}\")\r\n        self.root.after(1000, self.update_time)\r\n        \r\n    # ======================== SERVER CONTROL ========================\r\n    \r\n    def start_server(self) -\u003e Any:\r\n        \"\"\"بدء السيرفر\"\"\"\r\n        try:\r\n            self.log(\"🚀 Starting AI Teddy Bear Cloud Server...\")\r\n            \r\n            # Start the server process\r\n            project_root = os.path.dirname(os.path.dirname(__file__))\r\n            \r\n            self.server_process = subprocess.Popen(\r\n                [sys.executable, \"-m\", \"src.main\"],\r\n                cwd=project_root,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.PIPE,\r\n                text=True,\r\n                bufsize=1,\r\n                universal_newlines=True\r\n            )\r\n            \r\n            # Update UI\r\n            self.server_running = True\r\n            self.server_status_label.config(text=\"🟢 SERVER STARTING\", fg=\"#f39c12\")\r\n            self.start_button.config(state='disabled')\r\n            self.stop_button.config(state='normal')\r\n            self.restart_button.config(state='normal')\r\n            \r\n            # Start log monitoring\r\n            self.start_log_monitoring()\r\n            \r\n            # Check if server is ready\r\n            self.check_server_ready()\r\n            \r\n        except Exception as e:\r\n            self.log(f\"❌ Failed to start server: {e}\")\r\n            messagebox.showerror(\"Error\", f\"Failed to start server: {e}\")\r\n            \r\n    def stop_server(self) -\u003e Any:\r\n        \"\"\"إيقاف السيرفر\"\"\"\r\n        try:\r\n            self.log(\"🛑 Stopping AI Teddy Bear Cloud Server...\")\r\n            \r\n            if self.server_process:\r\n                self.server_process.terminate()\r\n                self.server_process.wait(timeout=10)\r\n                \r\n            self.server_running = False\r\n            self.server_status_label.config(text=\"🔴 SERVER OFFLINE\", fg=\"#e74c3c\")\r\n            self.start_button.config(state='normal')\r\n            self.stop_button.config(state='disabled')\r\n            self.restart_button.config(state='disabled')\r\n            \r\n            self.log(\"✅ Server stopped successfully\")\r\n            \r\n        except Exception as e:\r\n            self.log(f\"❌ Error stopping server: {e}\")\r\n            \r\n    def restart_server(self) -\u003e Any:\r\n        \"\"\"إعادة تشغيل السيرفر\"\"\"\r\n        self.log(\"🔄 Restarting server...\")\r\n        self.stop_server()\r\n        time.sleep(2)\r\n        self.start_server()\r\n        \r\n    def check_server_ready(self) -\u003e Any:\r\n        \"\"\"فحص جاهزية السيرفر\"\"\"\r\n        def check() -\u003e Any:\r\n            for attempt in range(30):  # 30 seconds timeout\r\n                try:\r\n                    response = requests.get(f\"{self.server_url}/health\", timeout=2)\r\n                    if response.status_code == 200:\r\n                        self.root.after(0, self.server_ready)\r\n                        return\r\n                except FileNotFoundError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)FileNotFoundError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)ileNotFoundError as e:\r\n    logger.warning(f\"Ignoring error: {e}\")\r\n                time.sleep(1)\r\n            \r\n            self.root.after(0, self.server_failed)\r\n            \r\n        threading.Thread(target=check, daemon=True).start()\r\n        \r\n    def server_ready(self) -\u003e Any:\r\n        \"\"\"عند جاهزية السيرفر\"\"\"\r\n        self.server_status_label.config(text=\"🟢 SERVER ONLINE\", fg=\"#27ae60\")\r\n        self.log(\"✅ Server is ready and responding to requests\")\r\n        self.log(f\"🌐 Server accessible at: {self.server_url}\")\r\n        self.load_initial_data()\r\n        \r\n    def server_failed(self) -\u003e Any:\r\n        \"\"\"عند فشل السيرفر\"\"\"\r\n        self.server_status_label.config(text=\"❌ SERVER FAILED\", fg=\"#e74c3c\")\r\n        self.log(\"❌ Server failed to start or is not responding\")\r\n        \r\n    def start_log_monitoring(self) -\u003e Any:\r\n        \"\"\"بدء مراقبة السجلات\"\"\"\r\n        def monitor_logs() -\u003e Any:\r\n            if self.server_process and self.server_running:\r\n                try:\r\n                    for line in iter(self.server_process.stdout.readline, ''):\r\n                        if line and self.server_running:\r\n                            self.root.after(0, lambda l=line: self.add_loexcept Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)l.strip()))\r\n                        elif not self.server_running:\r\n         except Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)           break\r\n                except Exception as e:\r\n    logger.warning(f\"Ignoring error: {e}\")\r\n                    \r\n        threading.Thread(target=monitor_logs, daemon=True).start()\r\n        \r\n    def start_monitoring(self) -\u003e Any:\r\n        \"\"\"بدء مراقبة النظام\"\"\"\r\n        def monitor() -\u003e Any:\r\n            while True:\r\n                if self.server_running:\r\n                    self.update_system_stats()\r\n                time.sleep(5)\r\n                \r\n        threading.Thread(target=monitor, daemon=True).start()\r\n        \r\n    # ======================== MONITORING FUNCTIONS ========================\r\n    \r\n    def update_system_stats(self) -\u003e Any:\r\n        \"\"\"تحديث إحصائيات النظام\"\"\"\r\n        try:\r\n            # CPU Usage\r\n            cpu_percent = psutil.cpu_percent(interval=1)\r\n            self.root.after(0, lambda: self.cpu_percent_label.config(text=f\"{cpu_percent:.1f}\"))\r\n            \r\n            # Memory Usage\r\n            memory = psutil.virtual_memory()\r\n            self.root.after(0, lambda: self.memory_percent_label.config(text=f\"{memory.percent:.1f}\"))\r\n            \r\n            # Disk Usage\r\n            disk = psutil.disk_usage('/')\r\n            disk_percent = (disk.used / disk.total) * 100\r\n            self.root.after(0, lambda: self.disk_percent_label.config(text=f\"{disk_percent:.1f}\"))\r\n            \r\n            # Update detailed info\r\n            self.update_detailed_system_info()\r\n            \r\n        except Exception as e:\r\n            pass\r\n            \r\n    def update_detailed_system_info(self) -\u003e Any:\r\n        \"\"\"تحديث المعلومات التفصيلية\"\"\"\r\n        try:\r\n            info = f\"\"\"\r\n🖥️ System Information:\r\n{'='*50}\r\nCPU Cores: {psutil.cpu_count()} cores\r\nMemory Total: {psutil.virtual_memory().total // (1024**3)} GB\r\nMemory Available: {psutil.virtual_memory().available // (1024**3)} GB\r\nDisk Total: {psutil.disk_usage('/').total // (1024**3)} GB\r\nDisk Free: {psutil.disk_usage('/').free // (1024**3)} GB\r\n\r\n⚡ Process Information:\r\n{'='*50}\r\n\"\"\"\r\n            \r\n            # Add process info if server is running\r\n            if self.server_process:\r\n                try:\r\n                    process = psutil.Process(self.server_process.pid)\r\n                    infexcept Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)Server PID: {self.server_process.pid}\\n\"\r\n                    info += f\"Server Memory: {process.memory_info().rss // (1024**2)} MB\\n\"\r\n                except Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True) += f\"Server CPU: {process.cpu_percent():.1f}%\\n\"\r\n                except Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)Exception as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)                    info += \"Server process info unavailable\\n\"\r\n            \r\n            self.root.after(0, lambda: self.update_system_info_display(info))\r\n            \r\n        except Exception as e:\r\n            pass\r\n            \r\n    def update_system_info_display(self, info) -\u003e Any:\r\n        \"\"\"تحديث عرض معلومات النظام\"\"\"\r\n        self.system_info_text.delete(1.0, \"end\")\r\n        self.system_info_text.insert(1.0, info)\r\n        \r\n    def log(self, message) -\u003e Any:\r\n        \"\"\"إضافة رسالة للسجل\"\"\"\r\n        timestamp = datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]\r\n        log_entry = f\"[{timestamp}] {message}\"\r\n        logger.info(log_entry)\r\n        self.add_log_line(log_entry)\r\n        self.status_label.config(text=message)\r\n        \r\n    def add_log_line(self, line) -\u003e Any:\r\n        \"\"\"إضافة سطر للسجل\"\"\"\r\n        self.logs_text.insert(\"end\", line + \"\\n\")\r\n        self.logs_text.see(\"end\")\r\n        \r\n    def load_initial_data(self) -\u003e Any:\r\n        \"\"\"تحميل البيانات الأولية\"\"\"\r\n        self.refresh_connections()\r\n        self.show_tables()\r\n        \r\n    # ======================== ACTION FUNCTIONS ========================\r\n    \r\n    def open_dashboard(self) -\u003e Any:\r\n        \"\"\"فتح لوحة التحكم\"\"\"\r\n        import webbrowser\r\n        webbrowser.open(f\"{self.server_url}/dashboard\")\r\n        self.log(\"🌐 Web dashboard opened\")\r\n        \r\n    def view_api_docs(self) -\u003e Any:\r\n        \"\"\"عرض توثيق API\"\"\"\r\n        import webbrowser\r\n        webbrowser.open(f\"{self.server_url}/docs\")\r\n        self.log(\"📖 API documentation opened\")\r\n        \r\n    def health_check(self) -\u003e Any:\r\n        \"\"\"فحص صحة النظام\"\"\"\r\n        try:\r\n            response = requests.get(f\"{self.server_url}/health\", timeout=5)\r\n            if response.status_code == 200:\r\n                result = response.json()\r\n                self.log(\"✅ Health check passed\")\r\n                self.api_response_text.delete(1.0, \"end\")\r\n                self.api_response_text.insert(1.0, json.dumps(result, indent=2, ensure_ascii=False))\r\n            else:\r\n                self.log(f\"❌ Health check failed: {response.status_code}\")\r\n        except Exception as e:\r\n            self.log(f\"❌ Health check error: {e}\")\r\n            \r\n    def open_logs(self) -\u003e Any:\r\n        \"\"\"فتح مجلد السجلات\"\"\"\r\n        logs_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"logs\")\r\n        if os.path.exists(logs_dir):\r\n            os.startfile(logs_dir)\r\n            self.log(\"📁 Logs directory opened\")\r\n        else:\r\n            self.log(\"❌ Logs directory not found\")\r\n            \r\n    def config_manager(self) -\u003e Any:\r\n        \"\"\"مدير الإعدادات\"\"\"\r\n        self.log(\"⚙️ Configuration manager opened\")\r\n        # Could open a config editing dialog\r\n        \r\n    def database_admin(self) -\u003e Any:\r\n        \"\"\"إدارة قاعدة البيانات\"\"\"\r\n        self.log(\"🗄️ Database admin opened\")\r\n        # Could open a database browser\r\n        \r\n    # ======================== API TEST FUNCTIONS ========================\r\n    \r\n    def test_health(self) -\u003e Any:\r\n        self.api_test(\"GET\", \"/health\")\r\n        \r\n    def test_esp32_register(self) -\u003e Any:\r\n        data = {\r\n            \"device_id\": \"ESP32_TEST123\",\r\n            \"firmware_version\": \"2.0.0\",\r\n            \"hardware_version\": \"ESP32-S3\"\r\n        }\r\n        self.api_test(\"POST\", \"/esp32/register\", data)\r\n        \r\n    def test_audio_processing(self) -\u003e Any:\r\n        data = {\r\n            \"audio\": \"مرحبا يا دبدوب\",\r\n            \"device_id\": \"ESP32_TEST123\"\r\n        }\r\n        self.api_test(\"POST\", \"/esp32/audio\", data)\r\n        \r\n    def test_children_api(self) -\u003e Any:\r\n        self.api_test(\"GET\", \"/api/children\")\r\n        \r\n    def test_conversations(self) -\u003e Any:\r\n        self.api_test(\"GET\", \"/api/conversations\")\r\n        \r\n    def test_analytics(self) -\u003e Any:\r\n        self.api_test(\"GET\", \"/api/analytics\")\r\n        \r\n    def api_test(self, method, endpoint, data=None) -\u003e Any:\r\n        \"\"\"اختبار API\"\"\"\r\n        try:\r\n            url = f\"{self.server_url}{endpoint}\"\r\n            \r\n            if method == \"GET\":\r\n                response = requests.get(url, timeout=5)\r\n            elif method == \"POST\":\r\n                response = requests.post(url, json=data, timeout=5)\r\n                \r\n            result = {\r\n                \"status_code\": response.status_code,\r\n                \"response\": response.json() if response.content else None,\r\n                \"headers\": dict(response.headers)\r\n            }\r\n            \r\n            self.api_response_text.delete(1.0, \"end\")\r\n            self.api_response_text.insert(1.0, json.dumps(result, indent=2, ensure_ascii=False))\r\n            \r\n            self.log(f\"🧪 API test: {method} {endpoint} -\u003e {response.status_code}\")\r\n            \r\n        except Exception as e:\r\n            self.log(f\"❌ API test failed: {e}\")\r\n            self.api_response_text.delete(1.0, \"end\")\r\n            self.api_response_text.insert(1.0, f\"Error: {e}\")\r\n            \r\n    # ======================== DATABASE FUNCTIONS ========================\r\n    \r\n    def show_tables(self) -\u003e Any:\r\n        \"\"\"عرض جداول قاعدة البيانات\"\"\"\r\n        try:\r\n            response = requests.get(f\"{self.server_url}/api/admin/tables\", timeout=5)\r\n            if response.status_code == 200:\r\n                tables = response.json()\r\n                self.db_text.delete(1.0, \"end\")\r\n                self.db_text.insert(1.0, \"📊 Database Tables:\\n\" + \"=\"*50 + \"\\n\")\r\n                for table in tables:\r\n                    self.db_text.insert(\"end\", f\"• {table}\\n\")\r\n                self.log(\"📊 Database tables loaded\")\r\n        except Exception as e:\r\n            self.log(f\"❌ Failed to load tables: {e}\")\r\n            \r\n    def count_users(self) -\u003e Any:\r\n        \"\"\"عد المستخدمين\"\"\"\r\n        self.db_text.delete(1.0, \"end\")\r\n        self.db_text.insert(1.0, \"👥 User Statistics:\\n\" + \"=\"*50 + \"\\n\")\r\n        self.db_text.insert(\"end\", \"Total Children: 5\\n\")\r\n        self.db_text.insert(\"end\", \"Active Devices: 3\\n\")\r\n        self.db_text.insert(\"end\", \"Total Conversations: 1,247\\n\")\r\n        self.log(\"👥 User count displayed\")\r\n        \r\n    def show_conversations(self) -\u003e Any:\r\n        \"\"\"عرض المحادثات\"\"\"\r\n        self.db_text.delete(1.0, \"end\")\r\n        self.db_text.insert(1.0, \"💬 Recent Conversations:\\n\" + \"=\"*50 + \"\\n\")\r\n        sample_conversations = [\r\n            \"[Sara] مرحبا يا دبدوب\",\r\n            \"[Teddy] مرحبا سارة! كيف حالك اليوم؟\",\r\n            \"[Ahmed] احكي لي قصة\",\r\n            \"[Teddy] بكل سرور! كان يا ما كان...\"\r\n        ]\r\n        for conv in sample_conversations:\r\n            self.db_text.insert(\"end\", f\"{conv}\\n\")\r\n        self.log(\"💬 Conversations displayed\")\r\n        \r\n    def cleanup_database(self) -\u003e Any:\r\n        \"\"\"تنظيف قاعدة البيانات\"\"\"\r\n        result = messagebox.askyesno(\"Cleanup Database\", \"Remove old conversations and logs?\")\r\n        if result:\r\n            self.log(\"🧹 Database cleanup initiated\")\r\n            \r\n    def backup_database(self) -\u003e Any:\r\n        \"\"\"نسخ احتياطي لقاعدة البيانات\"\"\"\r\n        self.log(\"💾 Database backup started\")\r\n        \r\n    def reset_database(self) -\u003e Any:\r\n        \"\"\"إعادة تعيين قاعدة البيانات\"\"\"\r\n        result = messagebox.askyesno(\"Reset Database\", \"⚠️ This will delete ALL data! Continue?\")\r\n        if result:\r\n            self.log(\"🔄 Database reset initiated\")\r\n            \r\n    # ======================== LOG FUNCTIONS ========================\r\n    \r\n    def refresh_logs(self) -\u003e Any:\r\n        \"\"\"تحديث السجلات\"\"\"\r\n        self.log(\"🔄 Logs refreshed\")\r\n        \r\n    def clear_logs(self) -\u003e Any:\r\n        \"\"\"مسح السجلات\"\"\"\r\n        self.logs_text.delete(1.0, \"end\")\r\n        self.log(\"🗑️ Logs cleared\")\r\n        \r\n    def save_logs(self) -\u003e Any:\r\n        \"\"\"حفظ السجلات\"\"\"\r\n        logs_content = self.logs_text.get(1.0, \"end\")\r\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n        filename = f\"server_logs_{timestamp}.txt\"\r\n        \r\n        try:\r\n            with open(filename, 'w', encoding='utf-8') as f:\r\n                f.write(logs_content)\r\n            self.log(f\"💾 Logs saved to {filename}\")\r\n        except Exception as e:\r\n            self.log(f\"❌ Failed to save logs: {e}\")\r\n            \r\n    # ======================== CONNECTION FUNCTIONS ========================\r\n    \r\n    def refresh_connections(self) -\u003e Any:\r\n        \"\"\"تحديث الاتصالات\"\"\"\r\n        self.connections_text.delete(1.0, \"end\")\r\n        self.connections_text.insert(1.0, \"🔗 Active Connections:\\n\" + \"=\"*50 + \"\\n\")\r\n        \r\n        sample_connections = [\r\n            \"ESP32_ABC12345 - Sara's Teddy - 192.168.1.101 - Connected 2h ago\",\r\n            \"ESP32_DEF67890 - Ahmed's Teddy - 192.168.1.102 - Connected 45m ago\",\r\n            \"Parent_App_001 - Mobile App - 192.168.1.103 - Connected 10m ago\"\r\n        ]\r\n        \r\n        for conn in sample_connections:\r\n            self.connections_text.insert(\"end\", f\"• {conn}\\n\")\r\n            \r\n        self.log(\"🔗 Connections refreshed\")\r\n        \r\n    def disconnect_all(self) -\u003e Any:\r\n        \"\"\"قطع جميع الاتصالات\"\"\"\r\n        result = messagebox.askyesno(\"Disconnect All\", \"Disconnect all active connections?\")\r\n        if result:\r\n            self.log(\"🚫 All connections disconnected\")\r\n            self.refresh_connections()\r\n            \r\n    def run(self) -\u003e Any:\r\n        \"\"\"تشغيل مشغل السيرفر\"\"\"\r\n        try:\r\n            self.root.protocol(\"WM_DELETE_WINDOW\", self.on_closing)\r\n            self.root.mainloop()\r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")\"\\n👋 Cloud Server Launcher shutting down...\")\r\n        finally:\r\n            if self.server_running:` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/RealTimeChart.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/state_manager.py:51:\n `[dict]` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/ui/main_window.py:25:\n `\r\n    \"\"\"Main application window for AI Teddy Bear\"\"\"\r\n    \r\n    def __init__(self):\r\n        super().__init__()\r\n        self.settings = QSettings(\"AiTeddyBear\", \"EnterpriseUI\")\r\n        self._setup_components()\r\n        self._setup_ui()\r\n        self._setup_connections()\r\n        self._restore_window_state()\r\n    \r\n    def _setup_components(self) -\u003e Any:\r\n        \"\"\"Initialize core components\"\"\"\r\n        # Networking\r\n        self.websocket_client = WebSocketClient()\r\n        self.message_sender = EnterpriseMessageSender(self.websocket_client)\r\n        \r\n        # UI Components\r\n        self.audio_widget = ModernAudioWidget()\r\n        self.conversation_widget = ConversationWidget()\r\n        \r\n        # Connect message sender to widgets\r\n        self.audio_widget.set_message_sender(self.message_sender)\r\n        self.conversation_widget.set_message_sender(self.message_sender)\r\n    \r\n    def _setup_ui(self) -\u003e Any:\r\n        \"\"\"Setup the user interface\"\"\"\r\n        self.setWindowTitle(\"AI Teddy Bear - Enterprise Edition 2025\")\r\n        self.setMinimumSize(1000, 700)\r\n        \r\n        # Central widget with tabs\r\n        central_widget = QWidget()\r\n        self.setCentralWidget(central_widget)\r\n        \r\n        layout = QVBoxLayout(central_widget)\r\n        \r\n        # Connection status\r\n        self.connection_label = QLabel(\"🔴 Disconnected\")\r\n        self.connection_label.setFont(QFont(\"Arial\", 10, QFont.Bold))\r\n        layout.addWidget(self.connection_label)\r\n        \r\n        # Main tabs\r\n        self.tab_widget = QTabWidget()\r\n        self.tab_widget.addTab(self.audio_widget, \"🎤 Audio Recording\")\r\n        self.tab_widget.addTab(self.conversation_widget, \"💬 Conversation\")\r\n        \r\n        layout.addWidget(self.tab_widget)\r\n        \r\n        # Controls\r\n        controls_layout = QHBoxLayout()\r\n        \r\n        self.connect_button = QPushButton(\"🔌 Connect\")\r\n        self.connect_button.clicked.connect(self._toggle_connection)\r\n        controls_layout.addWidget(self.connect_button)\r\n        \r\n        self.status_label = QLabel(\"Ready\")\r\n        controls_layout.addWidget(self.status_label)\r\n        controls_layout.addStretch()\r\n        \r\n        layout.addLayout(controls_layout)\r\n        \r\n        # Status bar\r\n        self.status_bar = QStatusBar()\r\n        self.setStatusBar(self.status_bar)\r\n        self.status_bar.showMessage(\"AI Teddy Bear Enterprise UI Ready\")\r\n        \r\n        # Menu bar\r\n        self._create_menu_bar()\r\n        \r\n        # Apply modern styling\r\n        self._apply_modern_theme()\r\n    \r\n    def _create_menu_bar(self) -\u003e Any:\r\n        \"\"\"Create application menu bar\"\"\"\r\n        menubar = self.menuBar()\r\n        \r\n        # File menu\r\n        file_menu = menubar.addMenu(\"File\")\r\n        \r\n        connect_action = QAction(\"Connect to Server\", self)\r\n        connect_action.triggered.connect(self._toggle_connection)\r\n        file_menu.addAction(connect_action)\r\n        \r\n        file_menu.addSeparator()\r\n        \r\n        exit_action = QAction(\"Exit\", self)\r\n        exit_action.triggered.connect(self.close)\r\n        file_menu.addAction(exit_action)\r\n        \r\n        # Help menu\r\n        help_menu = menubar.addMenu(\"Help\")\r\n        \r\n        about_action = QAction(\"About\", self)\r\n        about_action.triggered.connect(self._show_about)\r\n        help_menu.addAction(about_action)\r\n    \r\n    def _setup_connections(self) -\u003e Any:\r\n        \"\"\"Setup signal-slot connections\"\"\"\r\n        # WebSocket connections\r\n        self.websocket_client.connected.connect(self._on_connected)\r\n        self.websocket_client.disconnected.connect(self._on_disconnected)\r\n        self.websocket_client.message_received.connect(self._on_message_received)\r\n        self.websocket_client.error_occurred.connect(self._on_error)\r\n        self.websocket_client.connection_status_changed.connect(self._update_connection_status)\r\n    \r\n    def _toggle_connection(self) -\u003e Any:\r\n        \"\"\"Toggle WebSocket connection\"\"\"\r\n        if self.websocket_client.is_connected:\r\n            self.websocket_client.disconnect_from_server()\r\n        else:\r\n            self.websocket_client.connect_to_server()\r\n    \r\n    def _on_connected(self) -\u003e Any:\r\n        \"\"\"Handle successful connection\"\"\"\r\n        self.connect_button.setText(\"🔌 Disconnect\")\r\n        self.status_label.setText(\"Connected to server\")\r\n        self.status_bar.showMessage(\"Connected to AI Teddy Bear server\")\r\n        logger.info(\"UI connected to server\")\r\n    \r\n    def _on_disconnected(self) -\u003e Any:\r\n        \"\"\"Handle disconnection\"\"\"\r\n        self.connect_button.setText(\"🔌 Connect\")\r\n        self.status_label.setText(\"Disconnected\")\r\n        self.status_bar.showMessage(\"Disconnected from server\")\r\n        logger.info(\"UI disconnected from server\")\r\n    \r\n    def _on_message_received(Dict[str, Any]) -\u003e None:` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/PerformanceMetrics.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/core/push_service.py:296:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/api/graphql/federation_gateway.py:581:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/executive-dashboard.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/core/domain/entities/start_teddy_system.py:83:\n `\"\\n👋 Shutting down Teddy Bear system...\")\r\n    except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ Error: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Other syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Other syntax error at line .pre-commit-config.yaml:95:\n (approximate error location; error nearby after) error calling parser: could not find expected ':' character 0 position 0 returned: 0"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/core/services/vault_secret_manager.py:172:\n `if line.startswith('VAULT_APP_TOKEN = os.getenv('ACCESS_TOKEN')=', 1)[1].strip()\r\n                                break` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/parent/rate_monitor_service.py:32:\n `class RateMonitorService:\r\n    \"\"\"\r\n    📊 خدمة مراقبة معدلات الإرسال المتقدمة\r\n\r\n    الميزات:\r\n    - مراقبة حدود الإرسال (دقيقة/ساعة/يوم/أسبوع)\r\n    - تتبع الحدود لكل ولي أمر\r\n    - منع تجاوز الحدود الأسبوعية\r\n    - تبريد زمني بين الإشعارات\r\n    - إحصائيات تفصيلية\r\n    \"\"\"\r\n\r\n    def __init__(self, config_path: str = \"config/staging_config.json\"):\r\n        self.logger = logger.bind(service=\"rate_monitor\")\r\n        self.config_path = config_path\r\n        self._load_config()\r\n        self._init_counters()\r\n        self._init_database()\r\n\r\n    def _load_config(self) -\u003e Any:\r\n        \"\"\"تحميل إعدادات المراقبة\"\"\"\r\n        try:\r\n            with open(self.config_path, \"r\", encoding=\"utf-8\") as f:\r\n                config = json.load(f)\r\n\r\n            notification_config = config.get(\"NOTIFICATION_CONFIG\", {})\r\n\r\n            self.rate_limit = RateLimit(\r\n                per_minute=notification_config.get(\"rate_limit_per_minute\", 30),\r\n                per_hour=notification_config.get(\"rate_limit_per_hour\", 100),\r\n                per_day=notification_config.get(\"rate_limit_per_day\", 1000),\r\n                per_week_per_parent=notification_config.get(\r\n                    \"max_notifications_per_parent_per_week\", 3\r\n                ),\r\n                cooldown_hours=notification_config.get(\"cooldown_period_hours\", 24),\r\n            )\r\n\r\n            self.logger.info(\"Rate limits loaded\", **asdict(self.rate_limit))\r\n\r\n        except Exception as e:\r\n            self.logger.error(\"Failed to load rate monitor config\", error=str(e))\r\n            self.rate_limit = RateLimit()\r\n\r\n    def _init_counters(self) -\u003e Any:\r\n        \"\"\"تهيئة العدادات\"\"\"\r\n        self.minute_counter = deque(maxlen=60)\r\n        self.hour_counter = deque(maxlen=3600)\r\n        self.day_counter = deque(maxlen=86400)\r\n\r\n    def _init_database(self) -\u003e Any:\r\n        \"\"\"تهيئة قاعدة بيانات المراقبة\"\"\"\r\n        try:\r\n            self.db_path = \"logs/rate_monitor.db\"\r\n            Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)\r\n\r\n            conn = sqlite3.connect(self.db_path)\r\n            cursor = conn.cursor()\r\n\r\n            cursor.execute(\r\n                \"\"\"\r\n                CREATE TABLE IF NOT EXISTS notification_stats (\r\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n                    parent_email TEXT,\r\n                    child_udid TEXT,\r\n                    notification_type TEXT,\r\n                    channel TEXT,\r\n                    success BOOLEAN,\r\n                    error_message TEXT\r\n                )\r\n            \"\"\"\r\n            )\r\n\r\n            cursor.execute(\r\n                \"\"\"\r\n                CREATE TABLE IF NOT EXISTS weekly_parent_limits (\r\n                    parent_email TEXT,\r\n                    week_start DATE,\r\n                    notifications_sent INTEGER DEFAULT 0,\r\n                    last_notification DATETIME,\r\n                    PRIMARY KEY (parent_email, week_start)\r\n                )\r\n            \"\"\"\r\n            )\r\n\r\n            conn.commit()\r\n            conn.close()\r\n\r\n            self.logger.info(\"Rate monitor database initialized\", db_path=self.db_path)\r\n\r\n        except Exception as e:\r\n            self.logger.error(\r\n                \"Failed to initialize rate monitor database\", error=str(e)\r\n            )\r\n\r\n    async def check_rate_limit(\r\n        self, parent_email: str, child_udid: str\r\n    ) -\u003e Tuple[bool, str]:\r\n        \"\"\"فحص حدود معدل الإرسال\"\"\"\r\n        try:\r\n            now = datetime.utcnow()\r\n\r\n            # فحص الحد العام للنظام\r\n            system_check = await self._check_system_limits(now)\r\n            if not system_check[0]:\r\n                return system_check\r\n\r\n            # فحص حدود ولي الأمر الأسبوعية\r\n            parent_check = await self._check_parent_weekly_limit(parent_email, now)\r\n            if not parent_check[0]:\r\n                return parent_check\r\n\r\n            return True, \"Rate limit check passed\"\r\n\r\n        except Exception as e:\r\n            self.logger.error(\"Rate limit check failed\", error=str(e))\r\n            return False, f\"Rate check error: {str(e)}\"\r\n\r\n    async def _check_system_limits(self, now: datetime) -\u003e Tuple[bool, str]:\r\n        \"\"\"فحص الحدود العامة للنظام\"\"\"\r\n        try:\r\n            cutoff_minute = now - timedelta(minutes=1)\r\n            self.minute_counter = deque(\r\n                [t for t in self.minute_counter if t \u003e cutoff_minute], maxlen=60\r\n            )\r\n\r\n            if len(self.minute_counter) \u003e= self.rate_limit.per_minute:\r\n                return (\r\n                    False,\r\n                    f\"System minute limit exceeded ({self.rate_limit.per_minute}/min)\",\r\n                )\r\n\r\n            return True, \"System limits OK\"\r\n\r\n        # FIXME: replace with specific exception\r\nexcept Exception as exc:return False, \"System limits check error\"\r\n\r\n    async def _check_parent_weekly_limit(\r\n        self, parent_email: str, now: datetime\r\n    ) -\u003e Tuple[bool, str]:\r\n        \"\"\"فحص الحد الأسبوعي لولي الأمر\"\"\"\r\n        try:\r\n            week_start = now - timedelta(days=now.weekday())\r\n            week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0)\r\n\r\n            conn = sqlite3.connect(self.db_path)\r\n            cursor = conn.cursor()\r\n\r\n            cursor.execute(\r\n                \"\"\"\r\n                SELECT notifications_sent \r\n                FROM weekly_parent_limits \r\n                WHERE parent_email = ? AND week_start = ?\r\n            \"\"\",\r\n                (parent_email, week_start.date()),\r\n            )\r\n\r\n            result = cursor.fetchone()\r\n            conn.close()\r\n\r\n            if result and result[0] \u003e= self.rate_limit.per_week_per_parent:\r\n                return (\r\n                    False,\r\n                    f\"Parent weekly limit exceeded ({result[0]}/{self.rate_limit.per_week_per_parent})\",\r\n                )\r\n\r\n            return True, \"Parent weekly limit OK\"\r\n\r\n        # FIXME: replace with specific exception\r\nexcept Exception as exc:return False, \"Parent limit check error\"\r\n\r\n    async def record_notification(\r\n        self,\r\n        parent_email: str,\r\n        child_udid: str,\r\n        channel: str,\r\n        success: bool,\r\n        error_message: str = None,\r\n    ):\r\n        \"\"\"تسجيل إرسال إشعار\"\"\"\r\n        try:\r\n            now = datetime.utcnow()\r\n            self.minute_counter.append(now)\r\n\r\n            # تسجيل في قاعدة البيانات\r\n            conn = sqlite3.connect(self.db_path)\r\n            cursor = conn.cursor()\r\n\r\n            cursor.execute(\r\n                \"\"\"\r\n                INSERT INTO notification_stats \r\n                (timestamp, parent_email, child_udid, notification_type, channel, success, error_message)\r\n                VALUES (?, ?, ?, ?, ?, ?, ?)\r\n            \"\"\",\r\n                (\r\n                    now,\r\n                    parent_email,\r\n                    child_udid,\r\n                    \"cleanup_warning\",\r\n                    channel,\r\n                    success,\r\n                    error_message,\r\n                ),\r\n            )\r\n\r\n            # تحديث الحدود الأسبوعية\r\n            if success:\r\n                week_start = now - timedelta(days=now.weekday())\r\n                week_start = week_start.replace(\r\n                    hour=0, minute=0, second=0, microsecond=0\r\n                )\r\n\r\n                cursor.execute(\r\n                    \"\"\"\r\n                    INSERT OR REPLACE INTO weekly_parent_limits \r\n                    (parent_email, week_start, notifications_sent, last_notification)\r\n                    VALUES (?, ?, \r\n                        COALESCE((SELECT notifications_sent FROM weekly_parent_limits \r\n                                 WHERE parent_email = ? AND week_start = ?), 0) + 1,\r\n                        ?)\r\n                \"\"\",\r\n                    (\r\n                        parent_email,\r\n                        week_start.date(),\r\n                        parent_email,\r\n                        week_start.date(),\r\n                        now,\r\n                    ),\r\n                )\r\n\r\n            conn.commit()\r\n            conn.close()\r\n\r\n            self.logger.info(\r\n                \"Notification recorded\", parent_email=parent_email, success=success\r\n            )\r\n\r\n        except Exception as e:\r\n            self.logger.error(\"Failed to record notification\", error=str(e))\r\n\r\n    async def get_statistics(self) -\u003e Dict:\r\n        \"\"\"الحصول على إحصائيات المعدلات\"\"\"\r\n        try:\r\n            return {\r\n                \"system\": {\r\n                    \"current_minute\": len(self.minute_counter),\r\n                    \"limits\": asdict(self.rate_limit),\r\n                },\r\n                \"timestamp\": datetime.utcnow().isoformat(),\r\n            }\r\n        except Exception as e:\r\n            self.logger.error(\"Failed to get statistics\", error=str(e))\r\n            return {\"error\": str(e)}\r\n\r\n\r\n# مثيل خدمة المراقبة العامة\r\nrate_monitor = RateMonitorService()\r\n\r\n\r\n# دوال مساعدة\r\nasync def check_notification_rate_limit(\r\n    parent_email: str, child_udid: str\r\n) -\u003e Tuple[bool, str]:\r\n    \"\"\"فحص حدود معدل الإرسال\"\"\"\r\n    return await rate_monitor.check_rate_limit(parent_email, child_udid)\r\n\r\n\r\nasync def record_notification_sent(\r\n    parent_email: str,\r\n    child_udid: str,\r\n    channel: str,\r\n    success: bool,\r\n    error_message: str = None,\r\n):\r\n    \"\"\"تسجيل إرسال إشعار\"\"\"\r\n    await rate_monitor.record_notification(\r\n        parent_email, child_udid, channel, success, error_message\r\n    )\r\n\r\n\r\nasync def get_rate_statistics() -\u003e Dict:\r\n    \"\"\"الحصول على إحصائيات المعدلات\"\"\"\r\n    return {\r\n        \"system\": {\r\n            \"current_minute\": len(rate_monitor.minute_counter),\r\n            \"limits\": asdict(rate_monitor.rate_limit),\r\n        },\r\n        \"timestamp\": datetime.utcnow().isoformat(),\r\n    }` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/ai/emotion_analysis_service.py:2:\n `\"\"\"Core emotion analysis service.\"\"\"` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/security/security.py:328:\n `def setup_security(Optional` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Lexical error"
              },
              "level": "warning",
              "message": {
                "text": "Lexical error at line src/infrastructure/modern_container.py:611:\n unrecognized symbol in string"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/adapters/edge/edge_ai_manager.py:1:\n `from typing import Any, Dict, List, Optional\r\n\r\n\"\"\"\r\nEnterprise-Grade Edge AI Manager for AI Teddy Bear Project.\r\n\r\nThis module provides advanced Edge AI capabilities for ESP32-S3 devices,\r\nenabling real-time wake word detection, emotion analysis, and safety checking\r\nwithout cloud dependency for instant response.\r\n\r\nAI Team Implementation - Task 10\r\nAuthor: AI Team Lead\r\n\"\"\"\r\n\r\nimport asyncio\r\nimport hashlib\r\nimport json\r\nimport logging\r\nimport pickle\r\nimport time\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nfrom dataclasses import asdict, dataclass\r\nfrom datetime import datetime, timedelta\r\nfrom enum import Enum\r\nfrom pathlib import Path\r\nfrom typing import Any, Dict, List, Optional, Tuple, Union\r\n\r\nimport numpy as np\r\n\r\n# TensorFlow Lite for Edge AI\r\ntry:\r\n    import tensorflow as tf\r\n    import tflite_runtime.interpreter as tflite\r\n    TF_AVAILABLE = True\r\nexcept ImportError:\r\n    TF_AVAILABLE = False\r\n    tf = None\r\n    tflite = None\r\n\r\n# Audio processing\r\ntry:\r\n    import librosa\r\n    import scipy.signal\r\n    AUDIO_PROCESSING_AVAILABLE = True\r\nexcept ImportError:\r\n    AUDIO_PROCESSING_AVAILABLE = False\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\nclass EdgeProcessingMode(Enum):\r\n    \"\"\"Edge processing modes for different scenarios.\"\"\"\r\n    ULTRA_LOW_LATENCY = \"ultra_low_latency\"  # \u003c10ms response\r\n    BALANCED = \"balanced\"                     # \u003c50ms response\r\n    HIGH_ACCURACY = \"high_accuracy\"          # \u003c100ms response\r\n    POWER_SAVE = \"power_save\"                # Minimal processing\r\n\r\n\r\nclass WakeWordModel(Enum):\r\n    \"\"\"Available wake word detection models.\"\"\"\r\n    LIGHTWEIGHT = \"wake_word_lite.tflite\"    # \u003c1MB, basic detection\r\n    STANDARD = \"wake_word.tflite\"            # ~2MB, good accuracy\r\n    ENHANCED = \"wake_word_enhanced.tflite\"   # ~5MB, high accuracy\r\n\r\n\r\nclass SafetyLevel(Enum):\r\n    \"\"\"Safety check levels for edge processing.\"\"\"\r\n    BASIC = \"basic\"           # Simple keyword filtering\r\n    STANDARD = \"standard\"     # Content analysis\r\n    ENHANCED = \"enhanced\"     # Advanced safety ML model\r\n\r\n\r\n@dataclass\r\nclass EdgeAudioFeatures:\r\n    \"\"\"Container for extracted audio features on edge.\"\"\"\r\n    mfcc: np.ndarray\r\n    spectral_centroid: float\r\n    zero_crossing_rate: float\r\n    rms_energy: float\r\n    pitch_mean: float\r\n    pitch_std: float\r\n    tempo: float\r\n    spectral_rolloff: float\r\n    extraction_time_ms: float\r\n\r\n\r\n@dataclass\r\nclass EdgeEmotionResult:\r\n    \"\"\"Result from edge emotion analysis.\"\"\"\r\n    primary_emotion: str\r\n    confidence: float\r\n    emotion_scores: Dict[str, float]\r\n    arousal: float\r\n    valence: float\r\n    processing_time_ms: float\r\n    model_version: str\r\n\r\n\r\n@dataclass\r\nclass EdgeSafetyResult:\r\n    \"\"\"Result from edge safety checking.\"\"\"\r\n    passed: bool\r\n    risk_level: str\r\n    detected_issues: List[str]\r\n    safety_score: float\r\n    processing_time_ms: float\r\n    requires_cloud_review: bool\r\n\r\n\r\n@dataclass\r\nclass EdgeProcessingResult:\r\n    \"\"\"Complete result from edge processing.\"\"\"\r\n    should_process_cloud: bool\r\n    initial_emotion: Optional[EdgeEmotionResult]\r\n    safety_check: Optional[EdgeSafetyResult]\r\n    wake_word_detected: bool\r\n    priority: int  # 1-10, higher = more urgent\r\n    confidence: float\r\n    processing_time_ms: float\r\n    edge_features: Optional[EdgeAudioFeatures]\r\n    recommendations: List[str]\r\n    device_load: float\r\n\r\n\r\n@dataclass\r\nclass EdgeModelConfig:\r\n    \"\"\"Configuration for edge AI models.\"\"\"\r\n    wake_word_model: WakeWordModel = WakeWordModel.STANDARD\r\n    emotion_model_path: str = \"emotion_lite.tflite\"\r\n    safety_model_path: str = \"safety_check.tflite\"\r\n    processing_mode: EdgeProcessingMode = EdgeProcessingMode.BALANCED\r\n    safety_level: SafetyLevel = SafetyLevel.STANDARD\r\n    enable_caching: bool = True\r\n    max_cache_size: int = 100\r\n    model_optimization: bool = True\r\n\r\n\r\nclass EdgeModelManager:\r\n    \"\"\"Manages TensorFlow Lite models for edge processing.\"\"\"\r\n    \r\n    def __init__(self, config: EdgeModelConfig):\r\n        self.config = config\r\n        self.models: Dict[str, Any] = {}\r\n        self.model_metadata: Dict[str, Dict] = {}\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n        \r\n    def load_tflite_model(self, model_path: str, model_name: str) -\u003e Optional[Any]:\r\n        \"\"\"Load TensorFlow Lite model with optimization.\"\"\"\r\n        if not TF_AVAILABLE:\r\n            self.logger.warning(f\"TensorFlow not available, using mock for {model_name}\")\r\n            return self._create_mock_model(model_name)\r\n        \r\n        try:\r\n            full_path = Path(\"models/edge\") / model_path\r\n            \r\n            if not full_path.exists():\r\n                self.logger.warning(f\"Model file not found: {full_path}, using mock\")\r\n                return self._create_mock_model(model_name)\r\n            \r\n            # Load and optimize model\r\n            interpreter = tflite.Interpreter(\r\n                model_path=str(full_path),\r\n                num_threads=2  # Optimize for ESP32-S3\r\n            )\r\n            interpreter.allocate_tensors()\r\n            \r\n            # Store model metadata\r\n            input_details = interpreter.get_input_details()\r\n            output_details = interpreter.get_output_details()\r\n            \r\n            self.model_metadata[model_name] = {\r\n                \"input_shape\": input_details[0]['shape'],\r\n                \"output_shape\": output_details[0]['shape'],\r\n                \"input_dtype\": input_details[0]['dtype'],\r\n                \"output_dtype\": output_details[0]['dtype'],\r\n                \"model_size_mb\": full_path.stat().st_size / (1024 * 1024),\r\n                \"loaded_at\": datetime.now().isoformat()\r\n            }\r\n            \r\n            self.logger.info(f\"Loaded TFLite model: {model_name}\")\r\n            return interpreter\r\n            \r\n        except Exception as e:\r\n            self.logger.error(f\"Failed to load model {model_name}: {e}\")\r\n            return self._create_mock_model(model_name)\r\n    \r\n    def _create_mock_model(self, model_name: str) -\u003e Dict[str, Any]:\r\n        \"\"\"Create mock model for testing without TensorFlow.\"\"\"\r\n        mock_model = {\r\n            \"type\": \"mock\",\r\n            \"name\": model_name,\r\n            \"input_shape\": [1, 16000] if \"wake_word\" in model_name else [1, 13],\r\n            \"output_shape\": [1, 2] if \"safety\" in model_name else [1, 7],\r\n            \"created_at\": datetime.now().isoformat()\r\n        }\r\n        \r\n        self.model_metadata[model_name] = {\r\n            \"model_type\": \"mock\",\r\n            \"input_shape\": mock_model[\"input_shape\"],\r\n            \"output_shape\": mock_model[\"output_shape\"],\r\n            \"model_size_mb\": 0.1,\r\n            \"loaded_at\": datetime.now().isoformat()\r\n        }\r\n        \r\n        return mock_model\r\n    \r\n    def get_model_info(self, model_name: str) -\u003e Dict[str, Any]:\r\n        \"\"\"Get model metadata and performance info.\"\"\"\r\n        return self.model_metadata.get(model_name, {})\r\n\r\n\r\nclass EdgeFeatureExtractor:\r\n    \"\"\"Fast audio feature extraction optimized for edge devices.\"\"\"\r\n    \r\n    def __init__(self):\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n        self.sample_rate = 16000  # Standard for voice processing\r\n    \r\n    async def extract_features(\r\n        self, \r\n        audio_data: np.ndarray,\r\n        quick_mode: bool = True\r\n    ) -\u003e EdgeAudioFeatures:\r\n        \"\"\"Extract audio features optimized for edge processing.\"\"\"\r\n        start_time = time.time()\r\n        \r\n        try:\r\n            if not AUDIO_PROCESSING_AVAILABLE:\r\n                return self._extract_basic_features(audio_data, start_time)\r\n            \r\n            # Ensure correct audio format\r\n            audio_data = self._normalize_audio(audio_data)\r\n            \r\n            if quick_mode:\r\n                return await self._extract_quick_features(audio_data, start_time)\r\n            else:\r\n                return await self._extract_full_features(audio_data, start_time)\r\n                \r\n        except Exception as e:\r\n            self.logger.error(f\"Feature extraction failed: {e}\")\r\n            return self._extract_basic_features(audio_data, start_time)\r\n    \r\n    def _normalize_audio(self, audio_data: np.ndarray) -\u003e np.ndarray:\r\n        \"\"\"Normalize audio for consistent processing.\"\"\"\r\n        # Convert to float32 and normalize\r\n        if audio_data.dtype != np.float32:\r\n            audio_data = audio_data.astype(np.float32)\r\n        \r\n        # Normalize to [-1, 1] range\r\n        if np.max(np.abs(audio_data)) \u003e 0:\r\n            audio_data = audio_data / np.max(np.abs(audio_data))\r\n        \r\n        return audio_data\r\n    \r\n    async def _extract_quick_features(\r\n        self, \r\n        audio_data: np.ndarray, \r\n        start_time: float\r\n    ) -\u003e EdgeAudioFeatures:\r\n        \"\"\"Extract minimal features for ultra-low latency.\"\"\"\r\n        # Basic energy and timing features\r\n        rms_energy = float(np.sqrt(np.mean(np.square(audio_data))))\r\n        zcr = float(np.mean(librosa.feature.zero_crossing_rate(audio_data)))\r\n        spectral_centroid = float(np.mean(librosa.feature.spectral_centroid(\r\n            y=audio_data, sr=self.sample_rate\r\n        )))\r\n        \r\n        # Simple MFCC (reduced coefficients)\r\n        mfcc = librosa.feature.mfcc(\r\n            y=audio_data, sr=self.sample_rate, n_mfcc=5, hop_length=512\r\n        )\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeAudioFeatures(\r\n            mfcc=np.mean(mfcc, axis=1),\r\n            spectral_centroid=spectral_centroid,\r\n            zero_crossing_rate=zcr,\r\n            rms_energy=rms_energy,\r\n            pitch_mean=0.0,  # Skip for speed\r\n            pitch_std=0.0,   # Skip for speed\r\n            tempo=0.0,       # Skip for speed\r\n            spectral_rolloff=0.0,  # Skip for speed\r\n            extraction_time_ms=processing_time\r\n        )\r\n    \r\n    async def _extract_full_features(\r\n        self, \r\n        audio_data: np.ndarray, \r\n        start_time: float\r\n    ) -\u003e EdgeAudioFeatures:\r\n        \"\"\"Extract comprehensive features for high accuracy.\"\"\"\r\n        # MFCC features\r\n        mfcc = librosa.feature.mfcc(\r\n            y=audio_data, sr=self.sample_rate, n_mfcc=13\r\n        )\r\n        \r\n        # Spectral features\r\n        spectral_centroid = float(np.mean(librosa.feature.spectral_centroid(\r\n            y=audio_data, sr=self.sample_rate\r\n        )))\r\n        spectral_rolloff = float(np.mean(librosa.feature.spectral_rolloff(\r\n            y=audio_data, sr=self.sample_rate\r\n        )))\r\n        \r\n        # Temporal features\r\n        zcr = float(np.mean(librosa.feature.zero_crossing_rate(audio_data)))\r\n        rms_energy = float(np.sqrt(np.mean(np.square(audio_data))))\r\n        \r\n        # Pitch features\r\n        pitches, magnitudes = librosa.piptrack(\r\n            y=audio_data, sr=self.sample_rate\r\n        )\r\n        pitch_values = pitches[pitches \u003e 0]\r\n        pitch_mean = float(np.mean(pitch_values)) if len(pitch_values) \u003e 0 else 0.0\r\n        pitch_std = float(np.std(pitch_values)) if len(pitch_values) \u003e 0 else 0.0\r\n        \r\n        # Tempo\r\n        tempo, _ = librosa.beat.beat_track(y=audio_data, sr=self.sample_rate)\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeAudioFeatures(\r\n            mfcc=np.mean(mfcc, axis=1),\r\n            spectral_centroid=spectral_centroid,\r\n            zero_crossing_rate=zcr,\r\n            rms_energy=rms_energy,\r\n            pitch_mean=pitch_mean,\r\n            pitch_std=pitch_std,\r\n            tempo=float(tempo),\r\n            spectral_rolloff=spectral_rolloff,\r\n            extraction_time_ms=processing_time\r\n        )\r\n    \r\n    def _extract_basic_features(\r\n        self, \r\n        audio_data: np.ndarray, \r\n        start_time: float\r\n    ) -\u003e EdgeAudioFeatures:\r\n        \"\"\"Basic feature extraction without librosa dependency.\"\"\"\r\n        # Simple statistical features\r\n        rms_energy = float(np.sqrt(np.mean(np.square(audio_data))))\r\n        \r\n        # Simple zero crossing rate\r\n        zcr = float(np.mean(np.diff(np.signbit(audio_data))))\r\n        \r\n        # Mock MFCC with statistical features\r\n        mfcc = np.array([\r\n            np.mean(audio_data),\r\n            np.std(audio_data),\r\n            np.max(audio_data),\r\n            np.min(audio_data),\r\n            rms_energy\r\n        ])\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeAudioFeatures(\r\n            mfcc=mfcc,\r\n            spectral_centroid=float(np.mean(np.abs(audio_data))),\r\n            zero_crossing_rate=zcr,\r\n            rms_energy=rms_energy,\r\n            pitch_mean=0.0,\r\n            pitch_std=0.0,\r\n            tempo=0.0,\r\n            spectral_rolloff=0.0,\r\n            extraction_time_ms=processing_time\r\n        )\r\n\r\n\r\nclass EdgeWakeWordDetector:\r\n    \"\"\"Optimized wake word detection for edge devices.\"\"\"\r\n    \r\n    def __init__(self, model_manager: EdgeModelManager):\r\n        self.model_manager = model_manager\r\n        self.model = None\r\n        self.wake_word_patterns = [\r\n            \"hey teddy\", \"hello teddy\", \"hi teddy\",\r\n            \"مرحبا تيدي\", \"أهلا تيدي\", \"السلام عليكم تيدي\"\r\n        ]\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n        \r\n    async def initialize(self, model_path: str):\r\n        \"\"\"Initialize wake word detection model.\"\"\"\r\n        self.model = self.model_manager.load_tflite_model(model_path, \"wake_word\")\r\n        \r\n    async def detect_wake_word(self, audio_data: np.ndarray) -\u003e Tuple[bool, float]:\r\n        \"\"\"Detect wake word in audio data.\"\"\"\r\n        start_time = time.time()\r\n        \r\n        try:\r\n            if self.model is None:\r\n                return False, 0.0\r\n            \r\n            if self.model.get(\"type\") == \"mock\":\r\n                return self._mock_wake_word_detection(audio_data, start_time)\r\n            \r\n            # Preprocess audio for model\r\n            processed_audio = self._preprocess_audio(audio_data)\r\n            \r\n            # Run inference\r\n            input_details = self.model.get_input_details()\r\n            output_details = self.model.get_output_details()\r\n            \r\n            self.model.set_tensor(input_details[0]['index'], processed_audio)\r\n            self.model.invoke()\r\n            \r\n            output_data = self.model.get_tensor(output_details[0]['index'])\r\n            confidence = float(output_data[0][1])  # Assuming binary classification\r\n            \r\n            detected = confidence \u003e 0.7  # Threshold for wake word\r\n            \r\n            processing_time = (time.time() - start_time) * 1000\r\n            self.logger.debug(f\"Wake word detection: {detected} (confidence: {confidence:.3f}, time: {processing_time:.1f}ms)\")\r\n            \r\n            return detected, confidence\r\n            \r\n        except Exception as e:\r\n            self.logger.error(f\"Wake word detection failed: {e}\")\r\n            return False, 0.0\r\n    \r\n    def _preprocess_audio(self, audio_data: np.ndarray) -\u003e np.ndarray:\r\n        \"\"\"Preprocess audio for wake word model.\"\"\"\r\n        # Ensure correct input size (typically 16000 samples for 1 second)\r\n        target_length = 16000\r\n        \r\n        if len(audio_data) \u003e target_length:\r\n            # Take the last second\r\n            audio_data = audio_data[-target_length:]\r\n        elif len(audio_data) \u003c target_length:\r\n            # Pad with zeros\r\n            audio_data = np.pad(audio_data, (0, target_length - len(audio_data)))\r\n        \r\n        # Normalize and reshape for model\r\n        audio_data = audio_data.astype(np.float32)\r\n        if np.max(np.abs(audio_data)) \u003e 0:\r\n            audio_data = audio_data / np.max(np.abs(audio_data))\r\n        \r\n        return audio_data.reshape(1, -1)\r\n    \r\n    def _mock_wake_word_detection(\r\n        self, \r\n        audio_data: np.ndarray, \r\n        start_time: float\r\n    ) -\u003e Tuple[bool, float]:\r\n        \"\"\"Mock wake word detection for testing.\"\"\"\r\n        # Simple energy-based detection\r\n        energy = np.mean(np.abs(audio_data))\r\n        \r\n        # Mock logic: higher energy = more likely to be wake word\r\n        confidence = min(energy * 10, 1.0)\r\n        detected = confidence \u003e 0.5\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return detected, confidence\r\n\r\n\r\nclass EdgeEmotionAnalyzer:\r\n    \"\"\"Real-time emotion analysis on edge devices.\"\"\"\r\n    \r\n    def __init__(self, model_manager: EdgeModelManager):\r\n        self.model_manager = model_manager\r\n        self.model = None\r\n        self.emotion_labels = [\r\n            \"happy\", \"sad\", \"angry\", \"fear\", \"surprise\", \"calm\", \"excited\"\r\n        ]\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n    \r\n    async def initialize(self, model_path: str):\r\n        \"\"\"Initialize emotion analysis model.\"\"\"\r\n        self.model = self.model_manager.load_tflite_model(model_path, \"emotion\")\r\n    \r\n    async def analyze_emotion(\r\n        self, \r\n        features: EdgeAudioFeatures\r\n    ) -\u003e EdgeEmotionResult:\r\n        \"\"\"Analyze emotion from audio features.\"\"\"\r\n        start_time = time.time()\r\n        \r\n        try:\r\n            if self.model is None:\r\n                return self._create_default_emotion_result(start_time)\r\n            \r\n            if self.model.get(\"type\") == \"mock\":\r\n                return self._mock_emotion_analysis(features, start_time)\r\n            \r\n            # Prepare input features\r\n            input_features = self._prepare_emotion_features(features)\r\n            \r\n            # Run inference\r\n            input_details = self.model.get_input_details()\r\n            output_details = self.model.get_output_details()\r\n            \r\n            self.model.set_tensor(input_details[0]['index'], input_features)\r\n            self.model.invoke()\r\n            \r\n            output_data = self.model.get_tensor(output_details[0]['index'])\r\n            emotion_scores = {\r\n                emotion: float(score) \r\n                for emotion, score in zip(self.emotion_labels, output_data[0])\r\n            }\r\n            \r\n            # Find primary emotion\r\n            primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])\r\n            \r\n            # Calculate arousal and valence\r\n            arousal, valence = self._calculate_arousal_valence(emotion_scores)\r\n            \r\n            processing_time = (time.time() - start_time) * 1000\r\n            \r\n            return EdgeEmotionResult(\r\n                primary_emotion=primary_emotion[0],\r\n                confidence=primary_emotion[1],\r\n                emotion_scores=emotion_scores,\r\n                arousal=arousal,\r\n                valence=valence,\r\n                processing_time_ms=processing_time,\r\n                model_version=\"edge_v1.0\"\r\n            )\r\n            \r\n        except Exception as e:\r\n            self.logger.error(f\"Emotion analysis failed: {e}\")\r\n            return self._create_default_emotion_result(start_time)\r\n    \r\n    def _prepare_emotion_features(self, features: EdgeAudioFeatures) -\u003e np.ndarray:\r\n        \"\"\"Prepare features for emotion model.\"\"\"\r\n        # Combine relevant features\r\n        feature_vector = np.concatenate([\r\n            features.mfcc,\r\n            [features.spectral_centroid, features.zero_crossing_rate,\r\n             features.rms_energy, features.pitch_mean, features.pitch_std]\r\n        ])\r\n        \r\n        # Normalize features\r\n        feature_vector = feature_vector.astype(np.float32)\r\n        return feature_vector.reshape(1, -1)\r\n    \r\n    def _mock_emotion_analysis(\r\n        self, \r\n        features: EdgeAudioFeatures, \r\n        start_time: float\r\n    ) -\u003e EdgeEmotionResult:\r\n        \"\"\"Mock emotion analysis for testing.\"\"\"\r\n        # Simple rule-based emotion detection\r\n        energy = features.rms_energy\r\n        pitch = features.pitch_mean\r\n        zcr = features.zero_crossing_rate\r\n        \r\n        emotion_scores = {}\r\n        \r\n        if energy \u003e 0.1 and pitch \u003e 200:\r\n            emotion_scores = {\"excited\": 0.8, \"happy\": 0.6, \"calm\": 0.2}\r\n        elif energy \u003c 0.03:\r\n            emotion_scores = {\"calm\": 0.8, \"sad\": 0.4, \"happy\": 0.3}\r\n        elif zcr \u003e 0.1:\r\n            emotion_scores = {\"angry\": 0.7, \"excited\": 0.5, \"fear\": 0.3}\r\n        else:\r\n            emotion_scores = {\"happy\": 0.6, \"calm\": 0.5, \"excited\": 0.3}\r\n        \r\n        # Fill remaining emotions\r\n        for emotion in self.emotion_labels:\r\n            if emotion not in emotion_scores:\r\n                emotion_scores[emotion] = 0.1\r\n        \r\n        primary_emotion = max(emotion_scores.items(), key=lambda x: x[1])\r\n        arousal, valence = self._calculate_arousal_valence(emotion_scores)\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeEmotionResult(\r\n            primary_emotion=primary_emotion[0],\r\n            confidence=primary_emotion[1],\r\n            emotion_scores=emotion_scores,\r\n            arousal=arousal,\r\n            valence=valence,\r\n            processing_time_ms=processing_time,\r\n            model_version=\"mock_v1.0\"\r\n        )\r\n    \r\n    def _calculate_arousal_valence(self, emotion_scores: Dict[str, float]) -\u003e Tuple[float, float]:\r\n        \"\"\"Calculate arousal and valence from emotion scores.\"\"\"\r\n        # Arousal mapping (high = excited, low = calm)\r\n        arousal_map = {\r\n            \"excited\": 0.9, \"angry\": 0.8, \"fear\": 0.7, \"surprise\": 0.6,\r\n            \"happy\": 0.5, \"sad\": 0.3, \"calm\": 0.1\r\n        }\r\n        \r\n        # Valence mapping (high = positive, low = negative)\r\n        valence_map = {\r\n            \"happy\": 0.9, \"excited\": 0.8, \"surprise\": 0.6, \"calm\": 0.5,\r\n            \"sad\": 0.2, \"fear\": 0.1, \"angry\": 0.1\r\n        }\r\n        \r\n        arousal = sum(emotion_scores[emotion] * arousal_map.get(emotion, 0.5) \r\n                     for emotion in emotion_scores)\r\n        valence = sum(emotion_scores[emotion] * valence_map.get(emotion, 0.5) \r\n                     for emotion in emotion_scores)\r\n        \r\n        return float(arousal), float(valence)\r\n    \r\n    def _create_default_emotion_result(self, start_time: float) -\u003e EdgeEmotionResult:\r\n        \"\"\"Create default emotion result when analysis fails.\"\"\"\r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeEmotionResult(\r\n            primary_emotion=\"neutral\",\r\n            confidence=0.5,\r\n            emotion_scores={\"neutral\": 0.5, \"calm\": 0.3, \"happy\": 0.2},\r\n            arousal=0.5,\r\n            valence=0.5,\r\n            processing_time_ms=processing_time,\r\n            model_version=\"fallback_v1.0\"\r\n        )\r\n\r\n\r\nclass EdgeSafetyChecker:\r\n    \"\"\"Real-time safety checking on edge devices.\"\"\"\r\n    \r\n    def __init__(self, model_manager: EdgeModelManager, safety_level: SafetyLevel):\r\n        self.model_manager = model_manager\r\n        self.safety_level = safety_level\r\n        self.model = None\r\n        self.safety_keywords = {\r\n            \"inappropriate\": [\"bad\", \"stupid\", \"hate\", \"kill\", \"hurt\"],\r\n            \"distress\": [\"help\", \"scared\", \"emergency\", \"danger\", \"stop\"],\r\n            \"violence\": [\"fight\", \"hit\", \"punch\", \"blood\", \"weapon\"]\r\n        }\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n    \r\n    async def initialize(self, model_path: str):\r\n        \"\"\"Initialize safety checking model.\"\"\"\r\n        if self.safety_level != SafetyLevel.BASIC:\r\n            self.model = self.model_manager.load_tflite_model(model_path, \"safety\")\r\n    \r\n    async def check_safety(\r\n        self, \r\n        audio_features: EdgeAudioFeatures,\r\n        transcribed_text: Optional[str] = None\r\n    ) -\u003e EdgeSafetyResult:\r\n        \"\"\"Perform safety check on audio and/or text.\"\"\"\r\n        start_time = time.time()\r\n        \r\n        try:\r\n            if self.safety_level == SafetyLevel.BASIC:\r\n                return self._basic_safety_check(transcribed_text, start_time)\r\n            elif self.model and self.model.get(\"type\") == \"mock\":\r\n                return self._mock_safety_check(audio_features, transcribed_text, start_time)\r\n            elif self.model:\r\n                return await self._ml_safety_check(audio_features, transcribed_text, start_time)\r\n            else:\r\n                return self._basic_safety_check(transcribed_text, start_time)\r\n                \r\n        except Exception as e:\r\n            self.logger.error(f\"Safety check failed: {e}\")\r\n            return self._create_safe_result(start_time)\r\n    \r\n    def _basic_safety_check(\r\n        self, \r\n        text: Optional[str], \r\n        start_time: float\r\n    ) -\u003e EdgeSafetyResult:\r\n        \"\"\"Basic keyword-based safety checking.\"\"\"\r\n        detected_issues = []\r\n        safety_score = 1.0\r\n        \r\n        if text:\r\n            text_lower = text.lower()\r\n            for category, keywords in self.safety_keywords.items():\r\n                for keyword in keywords:\r\n                    if keyword in text_lower:\r\n                        detected_issues.append(f\"{category}: {keyword}\")\r\n                        safety_score -= 0.2\r\n        \r\n        safety_score = max(0.0, safety_score)\r\n        passed = safety_score \u003e 0.6\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeSafetyResult(\r\n            passed=passed,\r\n            risk_level=\"low\" if passed else \"medium\",\r\n            detected_issues=detected_issues,\r\n            safety_score=safety_score,\r\n            processing_time_ms=processing_time,\r\n            requires_cloud_review=not passed\r\n        )\r\n    \r\n    def _mock_safety_check(\r\n        self, \r\n        audio_features: EdgeAudioFeatures,\r\n        text: Optional[str], \r\n        start_time: float\r\n    ) -\u003e EdgeSafetyResult:\r\n        \"\"\"Mock ML-based safety checking.\"\"\"\r\n        # Combine audio and text analysis\r\n        detected_issues = []\r\n        safety_score = 1.0\r\n        \r\n        # Audio-based checks\r\n        if audio_features.rms_energy \u003e 0.15:  # Very loud\r\n            detected_issues.append(\"loud_audio\")\r\n            safety_score -= 0.1\r\n        \r\n        if audio_features.zero_crossing_rate \u003e 0.15:  # Agitated speech\r\n            detected_issues.append(\"agitated_speech\")\r\n            safety_score -= 0.1\r\n        \r\n        # Text-based checks\r\n        if text:\r\n            safety_score -= self._analyze_text_safety(text, detected_issues)\r\n        \r\n        safety_score = max(0.0, safety_score)\r\n        passed = safety_score \u003e 0.7\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeSafetyResult(\r\n            passed=passed,\r\n            risk_level=self._determine_risk_level(safety_score),\r\n            detected_issues=detected_issues,\r\n            safety_score=safety_score,\r\n            processing_time_ms=processing_time,\r\n            requires_cloud_review=safety_score \u003c 0.5\r\n        )\r\n    \r\n    async def _ml_safety_check(\r\n        self, \r\n        audio_features: EdgeAudioFeatures,\r\n        text: Optional[str], \r\n        start_time: float\r\n    ) -\u003e EdgeSafetyResult:\r\n        \"\"\"ML-based safety checking using TensorFlow Lite.\"\"\"\r\n        # Prepare features for ML model\r\n        feature_vector = self._prepare_safety_features(audio_features)\r\n        \r\n        # Run inference\r\n        input_details = self.model.get_input_details()\r\n        output_details = self.model.get_output_details()\r\n        \r\n        self.model.set_tensor(input_details[0]['index'], feature_vector)\r\n        self.model.invoke()\r\n        \r\n        output_data = self.model.get_tensor(output_details[0]['index'])\r\n        safety_score = float(output_data[0][0])  # Assuming safety score output\r\n        \r\n        # Combine with text analysis if available\r\n        detected_issues = []\r\n        if text:\r\n            text_penalty = self._analyze_text_safety(text, detected_issues)\r\n            safety_score -= text_penalty\r\n        \r\n        safety_score = max(0.0, safety_score)\r\n        passed = safety_score \u003e 0.7\r\n        \r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeSafetyResult(\r\n            passed=passed,\r\n            risk_level=self._determine_risk_level(safety_score),\r\n            detected_issues=detected_issues,\r\n            safety_score=safety_score,\r\n            processing_time_ms=processing_time,\r\n            requires_cloud_review=safety_score \u003c 0.5\r\n        )\r\n    \r\n    def _prepare_safety_features(self, audio_features: EdgeAudioFeatures) -\u003e np.ndarray:\r\n        \"\"\"Prepare features for safety ML model.\"\"\"\r\n        # Select relevant features for safety analysis\r\n        feature_vector = np.array([\r\n            audio_features.rms_energy,\r\n            audio_features.zero_crossing_rate,\r\n            audio_features.pitch_mean,\r\n            audio_features.pitch_std,\r\n            audio_features.spectral_centroid\r\n        ], dtype=np.float32)\r\n        \r\n        return feature_vector.reshape(1, -1)\r\n    \r\n    def _analyze_text_safety(self, text: str, detected_issues: List[str]) -\u003e float:\r\n        \"\"\"Analyze text for safety issues.\"\"\"\r\n        text_lower = text.lower()\r\n        penalty = 0.0\r\n        \r\n        for category, keywords in self.safety_keywords.items():\r\n            for keyword in keywords:\r\n                if keyword in text_lower:\r\n                    detected_issues.append(f\"text_{category}: {keyword}\")\r\n                    penalty += 0.15\r\n        \r\n        return penalty\r\n    \r\n    def _determine_risk_level(self, safety_score: float) -\u003e str:\r\n        \"\"\"Determine risk level from safety score.\"\"\"\r\n        if safety_score \u003e 0.8:\r\n            return \"low\"\r\n        elif safety_score \u003e 0.6:\r\n            return \"medium\"\r\n        elif safety_score \u003e 0.3:\r\n            return \"high\"\r\n        else:\r\n            return \"critical\"\r\n    \r\n    def _create_safe_result(self, start_time: float) -\u003e EdgeSafetyResult:\r\n        \"\"\"Create safe result when safety check fails.\"\"\"\r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeSafetyResult(\r\n            passed=True,\r\n            risk_level=\"low\",\r\n            detected_issues=[],\r\n            safety_score=1.0,\r\n            processing_time_ms=processing_time,\r\n            requires_cloud_review=False\r\n        )\r\n\r\n\r\nclass EdgeAIManager:\r\n    \"\"\"Main Edge AI Manager for ESP32-S3 real-time processing.\"\"\"\r\n    \r\n    def __init__(self, config: Optional[EdgeModelConfig] = None):\r\n        self.config = config or EdgeModelConfig()\r\n        self.model_manager = EdgeModelManager(self.config)\r\n        self.feature_extractor = EdgeFeatureExtractor()\r\n        self.wake_word_detector = EdgeWakeWordDetector(self.model_manager)\r\n        self.emotion_analyzer = EdgeEmotionAnalyzer(self.model_manager)\r\n        self.safety_checker = EdgeSafetyChecker(self.model_manager, self.config.safety_level)\r\n        self.executor = ThreadPoolExecutor(max_workers=2)\r\n        self.logger = logging.getLogger(f\"{__name__}.{self.__class__.__name__}\")\r\n        \r\n        # Performance monitoring\r\n        self.processing_stats = {\r\n            \"total_processed\": 0,\r\n            \"wake_words_detected\": 0,\r\n            \"average_processing_time\": 0.0,\r\n            \"error_count\": 0\r\n        }\r\n        \r\n    async def initialize(self):\r\n        \"\"\"Initialize all Edge AI components.\"\"\"\r\n        try:\r\n            # Initialize models\r\n            await self.wake_word_detector.initialize(self.config.wake_word_model.value)\r\n            await self.emotion_analyzer.initialize(self.config.emotion_model_path)\r\n            await self.safety_checker.initialize(self.config.safety_model_path)\r\n            \r\n            self.logger.info(\"Edge AI Manager initialized successfully\")\r\n            \r\n        except Exception as e:\r\n            self.logger.error(f\"Failed to initialize Edge AI Manager: {e}\")\r\n            raise\r\n    \r\n    async def process_on_edge(\r\n        self, \r\n        audio_chunk: np.ndarray,\r\n        transcribed_text: Optional[str] = None\r\n    ) -\u003e EdgeProcessingResult:\r\n        \"\"\"Main edge processing pipeline for instant response.\"\"\"\r\n        start_time = time.time()\r\n        \r\n        try:\r\n            # Update processing stats\r\n            self.processing_stats[\"total_processed\"] += 1\r\n            \r\n            # Step 1: Extract audio features\r\n            features = await self.feature_extractor.extract_features(\r\n                audio_chunk, \r\n                quick_mode=(self.config.processing_mode == EdgeProcessingMode.ULTRA_LOW_LATENCY)\r\n            )\r\n            \r\n            # Step 2: Wake word detection\r\n            wake_word_detected, wake_confidence = await self.wake_word_detector.detect_wake_word(audio_chunk)\r\n            \r\n            if wake_word_detected:\r\n                self.processing_stats[\"wake_words_detected\"] += 1\r\n            \r\n            # Step 3: Emotion analysis (if wake word detected or in continuous mode)\r\n            emotion_result = None\r\n            if wake_word_detected or self.config.processing_mode == EdgeProcessingMode.HIGH_ACCURACY:\r\n                emotion_result = await self.emotion_analyzer.analyze_emotion(features)\r\n            \r\n            # Step 4: Safety check\r\n            safety_result = await self.safety_checker.check_safety(features, transcribed_text)\r\n            \r\n            # Step 5: Calculate priority and decide on cloud processing\r\n            priority = self._calculate_priority(emotion_result, safety_result, wake_confidence)\r\n            should_process_cloud = self._should_process_cloud(\r\n                wake_word_detected, emotion_result, safety_result\r\n            )\r\n            \r\n            # Step 6: Generate recommendations\r\n            recommendations = self._generate_recommendations(\r\n                emotion_result, safety_result, wake_word_detected\r\n            )\r\n            \r\n            # Calculate overall processing time\r\n            total_processing_time = (time.time() - start_time) * 1000\r\n            \r\n            # Update average processing time\r\n            self._update_processing_stats(total_processing_time)\r\n            \r\n            # Calculate device load (mock implementation)\r\n            device_load = min(total_processing_time / 100.0, 1.0)\r\n            \r\n            return EdgeProcessingResult(\r\n                should_process_cloud=should_process_cloud,\r\n                initial_emotion=emotion_result,\r\n                safety_check=safety_result,\r\n                wake_word_detected=wake_word_detected,\r\n                priority=priority,\r\n                confidence=wake_confidence if wake_word_detected else 0.5,\r\n                processing_time_ms=total_processing_time,\r\n                edge_features=features,\r\n                recommendations=recommendations,\r\n                device_load=device_load\r\n            )\r\n            \r\n        except Exception as e:\r\n            self.logger.error(f\"Edge processing failed: {e}\")\r\n            self.processing_stats[\"error_count\"] += 1\r\n            return self._create_fallback_result(start_time)\r\n    \r\n    def _calculate_priority(\r\n        self, \r\n        emotion_result: Optional[EdgeEmotionResult],\r\n        safety_result: EdgeSafetyResult,\r\n        wake_confidence: float\r\n    ) -\u003e int:\r\n        \"\"\"Calculate processing priority (1-10, higher = more urgent).\"\"\"\r\n        priority = 5  # Base priority\r\n        \r\n        # Safety considerations (highest priority)\r\n        if not safety_result.passed:\r\n            priority += 3\r\n        elif safety_result.risk_level == \"medium\":\r\n            priority += 1\r\n        \r\n        # Emotion considerations\r\n        if emotion_result:\r\n            urgent_emotions = [\"angry\", \"fear\", \"sad\"]\r\n            if emotion_result.primary_emotion in urgent_emotions:\r\n                priority += 2\r\n            elif emotion_result.primary_emotion == \"excited\":\r\n                priority += 1\r\n        \r\n        # Wake word confidence\r\n        if wake_confidence \u003e 0.8:\r\n            priority += 1\r\n        \r\n        return min(10, max(1, priority))\r\n    \r\n    def _should_process_cloud(\r\n        self,\r\n        wake_word_detected: bool,\r\n        emotion_result: Optional[EdgeEmotionResult],\r\n        safety_result: EdgeSafetyResult\r\n    ) -\u003e bool:\r\n        \"\"\"Decide if cloud processing is needed.\"\"\"\r\n        # Always process if safety check failed\r\n        if not safety_result.passed:\r\n            return True\r\n        \r\n        # Process if wake word detected\r\n        if wake_word_detected:\r\n            return True\r\n        \r\n        # Process if complex emotion detected\r\n        if emotion_result:\r\n            complex_emotions = [\"angry\", \"fear\", \"sad\", \"surprise\"]\r\n            if emotion_result.primary_emotion in complex_emotions:\r\n                return True\r\n        \r\n        # Don't process for simple/calm interactions\r\n        return False\r\n    \r\n    def _generate_recommendations(\r\n        self,\r\n        emotion_result: Optional[EdgeEmotionResult],\r\n        safety_result: EdgeSafetyResult,\r\n        wake_word_detected: bool\r\n    ) -\u003e List[str]:\r\n        \"\"\"Generate edge-based recommendations.\"\"\"\r\n        recommendations = []\r\n        \r\n        # Safety-based recommendations\r\n        if not safety_result.passed:\r\n            recommendations.append(\"Immediate safety review required\")\r\n            recommendations.append(\"Consider parental notification\")\r\n        \r\n        # Emotion-based recommendations\r\n        if emotion_result:\r\n            if emotion_result.primary_emotion == \"sad\":\r\n                recommendations.append(\"Provide comforting response\")\r\n            elif emotion_result.primary_emotion == \"angry\":\r\n                recommendations.append(\"Use calming techniques\")\r\n            elif emotion_result.primary_emotion == \"excited\":\r\n                recommendations.append(\"Engage with enthusiasm\")\r\n            elif emotion_result.primary_emotion == \"fear\":\r\n                recommendations.append(\"Provide reassurance\")\r\n        \r\n        # Wake word recommendations\r\n        if wake_word_detected:\r\n            recommendations.append(\"Child is actively engaging\")\r\n            recommendations.append(\"Prioritize response quality\")\r\n        \r\n        return recommendations\r\n    \r\n    def _update_processing_stats(float) -\u003e None:\r\n        \"\"\"Update processing statistics.\"\"\"\r\n        current_avg = self.processing_stats[\"average_processing_time\"]\r\n        total_processed = self.processing_stats[\"total_processed\"]\r\n        \r\n        # Calculate running average\r\n        new_avg = ((current_avg * (total_processed - 1)) + processing_time_ms) / total_processed\r\n        self.processing_stats[\"average_processing_time\"] = new_avg\r\n    \r\n    def _create_fallback_result(self, start_time: float) -\u003e EdgeProcessingResult:\r\n        \"\"\"Create fallback result when processing fails.\"\"\"\r\n        processing_time = (time.time() - start_time) * 1000\r\n        \r\n        return EdgeProcessingResult(\r\n            should_process_cloud=True,  # Send to cloud when edge fails\r\n            initial_emotion=None,\r\n            safety_check=EdgeSafetyResult(\r\n                passed=True, risk_level=\"unknown\", detected_issues=[],\r\n                safety_score=0.5, processing_time_ms=0, requires_cloud_review=True\r\n            ),\r\n            wake_word_detected=False,\r\n            priority=5,\r\n            confidence=0.0,\r\n            processing_time_ms=processing_time,\r\n            edge_features=None,\r\n            recommendations=[\"Edge processing failed, using cloud fallback\"],\r\n            device_load=1.0\r\n        )\r\n    \r\n    def get_performance_stats(self) -\u003e Dict[str, Any]:\r\n        \"\"\"Get Edge AI performance statistics.\"\"\"\r\n        return {\r\n            \"processing_stats\": self.processing_stats.copy(),\r\n            \"model_info\": {\r\n                \"wake_word\": self.model_manager.get_model_info(\"wake_word\"),\r\n                \"emotion\": self.model_manager.get_model_info(\"emotion\"),\r\n                \"safety\": self.model_manager.get_model_info(\"safety\")\r\n            },\r\n            \"configuration\": {\r\n                \"processing_mode\": self.config.processing_mode.value,\r\n                \"safety_level\": self.config.safety_level.value,\r\n                \"wake_word_model\": self.config.wake_word_model.value\r\n            },\r\n            \"device_capabilities\": {\r\n                \"tensorflow_available\": TF_AVAILABLE,\r\n                \"audio_processing_available\": AUDIO_PROCESSING_AVAILABLE,\r\n                \"max_concurrent_threads\": 2\r\n            }\r\n        }\r\n    \r\n    def optimize_for_device(Dict[str, Any]) -\u003e None:\r\n        \"\"\"Optimize processing based on device specifications.\"\"\"\r\n        # Adjust processing mode based on device capabilities\r\n        memory_mb = device_specs.get(\"memory_mb\", 512)\r\n        cpu_cores = device_specs.get(\"cpu_cores\", 2)\r\n        \r\n        if memory_mb \u003c 256:\r\n            self.config.processing_mode = EdgeProcessingMode.POWER_SAVE\r\n        elif memory_mb \u003c 512:\r\n            self.config.processing_mode = EdgeProcessingMode.ULTRA_LOW_LATENCY\r\n        else:\r\n            self.config.processing_mode = EdgeProcessingMode.BALANCED\r\n        \r\n        self.logger.info(f\"Optimized for device: {device_specs}, mode: {self.config.processing_mode.value}\")\r\n    \r\n    async def cleanup(self):\r\n        \"\"\"Cleanup Edge AI resources.\"\"\"\r\n        try:\r\n            self.executor.shutdown(wait=True)\r\n            self.logger.info(\"Edge AI Manager cleanup completed\")\r\n        except Exception as e:\r\n            self.logger.error(f\"Cleanup failed: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/presentation/api/rest/smart_restructure.py:1:\n `from typing import Any, Dict, List, Optional\r\n\r\n#!/usr/bin/env python3\r\n\"\"\"\r\n🧠 Smart DDD Restructuring Tool\r\nLead Architect: جعفر أديب\r\nIntelligent Domain-Driven Design migration with advanced analysis\r\n\"\"\"\r\n\r\nimport ast\r\nimport json\r\nimport logging\r\nimport os\r\nimport shutil\r\nfrom dataclasses import dataclass\r\nfrom pathlib import Path\r\nfrom typing import Any, Dict, List, Optional, Set, Tuple\r\n\r\n# Configure logging\r\nlogging.basicConfig(level=logging.INFO)\r\nlogger = logging.getLogger(__name__)\r\n\r\n@dataclass\r\nclass MigrationPlan:\r\n    \"\"\"Migration plan with ordered steps and import updates\"\"\"\r\n    steps: List[Dict[str, str]]\r\n    import_updates: Dict[str, List[str]]\r\n    risk_level: str\r\n    estimated_hours: int\r\n\r\nclass SmartRestructurer:\r\n    \"\"\"Intelligent DDD restructuring with dependency analysis\"\"\"\r\n    \r\n    def __init__(self, project_root: str = \".\"):\r\n        self.project_root = Path(project_root)\r\n        self.import_map: Dict[str, Set[str]] = {}\r\n        self.dependency_graph: Dict[str, Set[str]] = {}\r\n        self.circular_deps: List[Tuple[str, str]] = []\r\n        \r\n        # New DDD structure\r\n        self.new_structure = {\r\n            'src/domain/entities': [],\r\n            'src/domain/value_objects': [],\r\n            'src/domain/services': [],\r\n            'src/application/commands': [],\r\n            'src/application/queries': [],\r\n            'src/application/handlers': [],\r\n            'src/infrastructure/persistence/repositories': [],\r\n            'src/infrastructure/ai': [],\r\n            'src/infrastructure/messaging': [],\r\n            'src/presentation/api/rest': [],\r\n            'src/presentation/api/graphql': [],\r\n            'src/presentation/websocket': []\r\n        }\r\n    \r\n    def analyze_dependencies(self) -\u003e Dict[str, Any]:\r\n        \"\"\"تحليل جميع التبعيات وبناء خريطة\"\"\"\r\n        logger.info(\"🔍 Analyzing project dependencies...\")\r\n        \r\n        python_files = list(self.project_root.rglob('*.py'))\r\n        \r\n        for file_path in python_files:\r\n            if self._should_skip_file(file_path):\r\n                continue\r\n                \r\n            try:\r\n                with open(file_path, 'r', encoding='utf-8') as f:\r\n                    tree = ast.parse(f.read())\r\n                    self._extract_imports(tree, file_path)\r\n            except Exception as e:\r\n                logger.warning(f\"Failed to parse {file_path}: {e}\")\r\n        \r\n        return {\r\n            'total_files': len(python_files),\r\n            'analyzed_files': len(self.import_map),\r\n            'total_imports': sum(len(imports) for imports in self.import_map.values())\r\n        }\r\n    \r\n    def detect_circular_dependencies(self) -\u003e List[Tuple[str, str]]:\r\n        \"\"\"كشف التبعيات الدائرية باستخدام Tarjan's algorithm\"\"\"\r\n        logger.info(\"🔄 Detecting circular dependencies...\")\r\n        \r\n        # Build adjacency list\r\n        self._build_dependency_graph()\r\n        \r\n        # Simple cycle detection\r\n        visited = set()\r\n        rec_stack = set()\r\n        cycles = []\r\n        \r\n        def dfs(node) -\u003e Any:\r\n            if node in rec_stack:\r\n                return True  # Cycle detected\r\n            if node in visited:\r\n                return False\r\n                \r\n            visited.add(node)\r\n            rec_stack.add(node)\r\n            \r\n            for neighbor in self.dependency_graph.get(node, set()):\r\n                if dfs(neighbor):\r\n                    cycles.append((node, neighbor))\r\n                    \r\n            rec_stack.remove(node)\r\n            return False\r\n        \r\n        for node in self.dependency_graph:\r\n            if node not in visited:\r\n                dfs(node)\r\n        \r\n        self.circular_deps = cycles\r\n        logger.info(f\"Found {len(cycles)} circular dependencies\")\r\n        return cycles\r\n    \r\n    def generate_migration_plan(self) -\u003e MigrationPlan:\r\n        \"\"\"توليد خطة هجرة ذكية\"\"\"\r\n        logger.info(\"📋 Generating intelligent migration plan...\")\r\n        \r\n        steps = [\r\n            {\r\n                'phase': '1',\r\n                'title': 'Create New DDD Structure',\r\n                'action': 'create_directories',\r\n                'description': 'Create the new domain-driven design directory structure'\r\n            },\r\n            {\r\n                'phase': '2', \r\n                'title': 'Analyze Current Code',\r\n                'action': 'classify_existing_files',\r\n                'description': 'Classify existing files into DDD layers'\r\n            },\r\n            {\r\n                'phase': '3',\r\n                'title': 'Migrate Domain Layer',\r\n                'action': 'migrate_domain_files',\r\n                'description': 'Move and refactor domain entities and value objects'\r\n            },\r\n            {\r\n                'phase': '4',\r\n                'title': 'Migrate Application Layer',\r\n                'action': 'migrate_application_files', \r\n                'description': 'Move use cases, commands, and queries'\r\n            },\r\n            {\r\n                'phase': '5',\r\n                'title': 'Migrate Infrastructure Layer',\r\n                'action': 'migrate_infrastructure_files',\r\n                'description': 'Move repositories, adapters, and external services'\r\n            },\r\n            {\r\n                'phase': '6',\r\n                'title': 'Update Imports',\r\n                'action': 'update_all_imports',\r\n                'description': 'Update all import statements to new structure'\r\n            },\r\n            {\r\n                'phase': '7',\r\n                'title': 'Validate Migration',\r\n                'action': 'validate_migration',\r\n                'description': 'Run tests and validate the new structure'\r\n            }\r\n        ]\r\n        \r\n        import_updates = self._generate_import_updates()\r\n        risk_level = self._assess_risk_level()\r\n        estimated_hours = len(steps) * 2 + len(self.circular_deps) * 1.5\r\n        \r\n        return MigrationPlan(\r\n            steps=steps,\r\n            import_updates=import_updates,\r\n            risk_level=risk_level,\r\n            estimated_hours=int(estimated_hours)\r\n        )\r\n    \r\n    def execute_migration(self, plan: MigrationPlan) -\u003e bool:\r\n        \"\"\"Execute the migration plan\"\"\"\r\n        logger.info(\"🚀 Starting DDD migration execution...\")\r\n        \r\n        try:\r\n            for step in plan.steps:\r\n                logger.info(f\"Executing {step['title']}...\")\r\n                \r\n                action = step['action']\r\n                if action == 'create_directories':\r\n                    self._create_ddd_directories()\r\n                elif action == 'classify_existing_files':\r\n                    self._classify_existing_files()\r\n                elif action == 'migrate_domain_files':\r\n                    self._migrate_domain_files()\r\n                elif action == 'migrate_application_files':\r\n                    self._migrate_application_files()\r\n                elif action == 'migrate_infrastructure_files':\r\n                    self._migrate_infrastructure_files()\r\n                elif action == 'update_all_imports':\r\n                    self._update_all_imports(plan.import_updates)\r\n                elif action == 'validate_migration':\r\n                    self._validate_migration()\r\n                \r\n                logger.info(f\"✅ Completed {step['title']}\")\r\n            \r\n            logger.info(\"🎉 Migration completed successfully!\")\r\n            return True\r\n            \r\n        except Exception as e:\r\n            logger.error(f\"❌ Migration failed: {e}\")\r\n            return False\r\n    \r\n    def _should_skip_file(self, file_path: Path) -\u003e bool:\r\n        \"\"\"Check if file should be skipped\"\"\"\r\n        skip_patterns = ['__pycache__', '.git', 'venv', 'env', 'test', '__init__.py']\r\n        return any(pattern in str(file_path) for pattern in skip_patterns)\r\n    \r\n    def _extract_imports(Path) -\u003e None:\r\n        \"\"\"Extract imports from AST\"\"\"\r\n        file_str = str(file_path)\r\n        imports = set()\r\n        \r\n        for node in ast.walk(tree):\r\n            if isinstance(node, ast.Import):\r\n                for alias in node.names:\r\n                    imports.add(alias.name)\r\n            elif isinstance(node, ast.ImportFrom):\r\n                if node.module:\r\n                    imports.add(node.module)\r\n        \r\n        self.import_map[file_str] = imports\r\n    \r\n    def _build_dependency_graph(self) -\u003e Any:\r\n        \"\"\"Build dependency graph from imports\"\"\"\r\n        for file_path, imports in self.import_map.items():\r\n            self.dependency_graph[file_path] = set()\r\n            \r\n            for import_name in imports:\r\n                # Convert import to potential file paths\r\n                potential_files = self._resolve_import_to_files(import_name)\r\n                for potential_file in potential_files:\r\n                    if potential_file in self.import_map:\r\n                        self.dependency_graph[file_path].add(potential_file)\r\n    \r\n    def _resolve_import_to_files(self, import_name: str) -\u003e List[str]:\r\n        \"\"\"Resolve import name to possible file paths\"\"\"\r\n        parts = import_name.split('.')\r\n        potential_files = []\r\n        \r\n        # Try different path combinations\r\n        for i in range(len(parts)):\r\n            # Direct file\r\n            path = self.project_root / '/'.join(parts[:i+1])\r\n            py_file = path.with_suffix('.py')\r\n            if py_file.exists():\r\n                potential_files.append(str(py_file))\r\n            \r\n            # Package __init__.py\r\n            init_file = path / '__init__.py'\r\n            if init_file.exists():\r\n                potential_files.append(str(init_file))\r\n        \r\n        return potential_files\r\n    \r\n    def _generate_import_updates(self) -\u003e Dict[str, List[str]]:\r\n        \"\"\"Generate import update mappings\"\"\"\r\n        updates = {}\r\n        \r\n        # Domain layer updates\r\n        updates['src.domain.entities'] = [\r\n            'core.domain.entities',\r\n            'domain.entities', \r\n            'entities'\r\n        ]\r\n        \r\n        # Application layer updates  \r\n        updates['src.application.commands'] = [\r\n            'core.application.commands',\r\n            'application.commands',\r\n            'commands'\r\n        ]\r\n        \r\n        # Infrastructure updates\r\n        updates['src.infrastructure.persistence'] = [\r\n            'core.infrastructure.persistence',\r\n            'infrastructure.persistence',\r\n            'persistence'\r\n        ]\r\n        \r\n        return updates\r\n    \r\n    def _assess_risk_level(self) -\u003e str:\r\n        \"\"\"Assess migration risk level\"\"\"\r\n        risk_score = 0\r\n        \r\n        # Circular dependencies increase risk\r\n        risk_score += len(self.circular_deps) * 10\r\n        \r\n        # Large number of files increase risk\r\n        total_files = len(self.import_map)\r\n        risk_score += min(total_files / 10, 20)\r\n        \r\n        # Complex imports increase risk\r\n        total_imports = sum(len(imports) for imports in self.import_map.values())\r\n        risk_score += min(total_imports / 50, 30)\r\n        \r\n        if risk_score \u003c 30:\r\n            return \"LOW\"\r\n        elif risk_score \u003c 60:\r\n            return \"MEDIUM\"\r\n        else:\r\n            return \"HIGH\"\r\n    \r\n    def _create_ddd_directories(self) -\u003e Any:\r\n        \"\"\"Create new DDD directory structure\"\"\"\r\n        logger.info(\"📁 Creating DDD directory structure...\")\r\n        \r\n        for directory in self.new_structure.keys():\r\n            dir_path = self.project_root / directory\r\n            dir_path.mkdir(parents=True, exist_ok=True)\r\n            \r\n            # Create __init__.py files\r\n            init_file = dir_path / '__init__.py'\r\n            if not init_file.exists():\r\n                init_file.write_text('\"\"\"DDD Layer Module\"\"\"')\r\n    \r\n    def _classify_existing_files(self) -\u003e Any:\r\n        \"\"\"Classify existing files into DDD layers\"\"\"\r\n        logger.info(\"🏷️ Classifying existing files...\")\r\n        \r\n        for file_path in self.import_map.keys():\r\n            path_obj = Path(file_path)\r\n            \r\n            # Simple classification based on file name and content\r\n            file_content = path_obj.name.lower()\r\n            \r\n            if any(keyword in file_content for keyword in ['entity', 'aggregate', 'child', 'user']):\r\n                self.new_structure['src/domain/entities'].append(file_path)\r\n            elif any(keyword in file_content for keyword in ['value', 'id', 'enum', 'type']):\r\n                self.new_structure['src/domain/value_objects'].append(file_path)\r\n            elif 'service' in file_content and 'domain' in str(path_obj):\r\n                self.new_structure['src/domain/services'].append(file_path)\r\n            elif any(keyword in file_content for keyword in ['use_case', 'command', 'query']):\r\n                if 'command' in file_content:\r\n                    self.new_structure['src/application/commands'].append(file_path)\r\n                elif 'query' in file_content:\r\n                    self.new_structure['src/application/queries'].append(file_path)\r\n                else:\r\n                    self.new_structure['src/application/handlers'].append(file_path)\r\n            elif any(keyword in file_content for keyword in ['repository', 'persistence']):\r\n                self.new_structure['src/infrastructure/persistence/repositories'].append(file_path)\r\n            elif any(keyword in file_content for keyword in ['api', 'rest', 'endpoint']):\r\n                self.new_structure['src/presentation/api/rest'].append(file_path)\r\n            elif 'graphql' in file_content:\r\n                self.new_structure['src/presentation/api/graphql'].append(file_path)\r\n    \r\n    def _migrate_domain_files(self) -\u003e Any:\r\n        \"\"\"Migrate domain layer files\"\"\"\r\n        logger.info(\"🎯 Migrating domain layer...\")\r\n        \r\n        for target_dir, files in self.new_structure.items():\r\n            if 'domain' not in target_dir:\r\n                continue\r\n                \r\n            target_path = self.project_root / target_dir\r\n            for file_path in files:\r\n                self._move_file_safely(file_path, target_path)\r\n    \r\n    def _migrate_application_files(self) -\u003e Any:\r\n        \"\"\"Migrate application layer files\"\"\"\r\n        logger.info(\"⚙️ Migrating application layer...\")\r\n        \r\n        for target_dir, files in self.new_structure.items():\r\n            if 'application' not in target_dir:\r\n                continue\r\n                \r\n            target_path = self.project_root / target_dir\r\n            for file_path in files:\r\n                self._move_file_safely(file_path, target_path)\r\n    \r\n    def _migrate_infrastructure_files(self) -\u003e Any:\r\n        \"\"\"Migrate infrastructure layer files\"\"\"\r\n        logger.info(\"🏗️ Migrating infrastructure layer...\")\r\n        \r\n        for target_dir, files in self.new_structure.items():\r\n            if 'infrastructure' not in target_dir and 'presentation' not in target_dir:\r\n                continue\r\n                \r\n            target_path = self.project_root / target_dir\r\n            for file_path in files:\r\n                self._move_file_safely(file_path, target_path)\r\n    \r\n    def _move_file_safely(Path) -\u003e None:\r\n        \"\"\"Safely move file to new location\"\"\"\r\n        source = Path(source_path)\r\n        if not source.exists():\r\n            return\r\n            \r\n        target_file = target_dir / source.name\r\n        \r\n        # Avoid overwriting existing files\r\n        counter = 1\r\n        while target_file.exists():\r\n            name_parts = source.stem, counter, source.suffix\r\n            target_file = target_dir / f\"{name_parts[0]}_{name_parts[1]}{name_parts[2]}\"\r\n            counter += 1\r\n        \r\n        try:\r\n            shutil.move(str(source), str(target_file))\r\n            logger.info(f\"Moved {source} -\u003e {target_file}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to move {source}: {e}\")\r\n    \r\n    def _update_all_imports(Dict[str, List[str]]) -\u003e None:\r\n        \"\"\"Update all import statements\"\"\"\r\n        logger.info(\"🔄 Updating import statements...\")\r\n        \r\n        # This would need more sophisticated implementation\r\n        # For now, just log what would be updated\r\n        for new_import, old_imports in import_updates.items():\r\n            logger.info(f\"Would update {old_imports} -\u003e {new_import}\")\r\n    \r\n    def _validate_migration(self) -\u003e Any:\r\n        \"\"\"Validate the migration\"\"\"\r\n        logger.info(\"✅ Validating migration...\")\r\n        \r\n        # Check if new structure exists\r\n        for directory in self.new_structure.keys():\r\n            dir_path = self.project_root / directory\r\n            if not dir_path.exists():\r\n                raise Exception(f\"Directory not created: {directory}\")\r\n        \r\n        logger.info(\"Migration validation passed!\")\r\n\r\ndef main() -\u003e Any:\r\n    \"\"\"Main execution function\"\"\"\r\n    logger.info(\"🧠 Smart DDD Restructuring Tool\")\r\n    logger.info(\"Lead Architect: جعفر أديب\")\r\n    logger.info(\"=\" * 40)\r\n    \r\n    restructurer = SmartRestructurer()\r\n    \r\n    # Step 1: Analyze dependencies\r\n    analysis = restructurer.analyze_dependencies()\r\n    logger.info(f\"📊 Analyzed {analysis['analyzed_files']} files\")\r\n    \r\n    # Step 2: Detect circular dependencies\r\n    circular_deps = restructurer.detect_circular_dependencies()\r\n    if circular_deps:\r\n        logger.warning(f\"⚠️ Found {len(circular_deps)} circular dependencies\")\r\n    \r\n    # Step 3: Generate migration plan\r\n    plan = restructurer.generate_migration_plan()\r\n    logger.info(f\"📋 Generated migration plan with {len(plan.steps)} steps\")\r\n    logger.info(f\"🎯 Risk Level: {plan.risk_level}\")\r\n    logger.info(f\"⏱️ Estimated Time: {plan.estimated_hours} hours\")\r\n    \r\n    # Step 4: Execute migration (with user confirmation)\r\n    confirm = input(\"\\n🚀 Execute migration? (y/N): \")\r\n    if confirm.lower() == 'y':\r\n        success = restructurer.execute_migration(plan)\r\n        if success:\r\n            logger.info(\"✅ Migration completed successfully!\")\r\n        else:\r\n            logger.error(\"❌ Migration failed!\")\r\n    else:\r\n        logger.info(\"Migration cancelled.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/testing/coverage_tracker.py:1:\n `\"\"\"\r\nCoverage Tracker for AI-Powered Testing\r\n=======================================\r\n\r\nAdvanced coverage tracking system that monitors\r\ncode execution paths and provides intelligent\r\ncoverage analysis for comprehensive testing.\r\n\"\"\"\r\n\r\nimport ast\r\nimport asyncio\r\nimport json\r\nimport logging\r\nimport time\r\nfrom dataclasses import asdict, dataclass\r\nfrom pathlib import Path\r\nfrom typing import Any, Dict, List, Optional, Set\r\n\r\nimport coverage\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\n@dataclass\r\nclass CoverageMetrics:\r\n    \"\"\"Coverage metrics for analysis\"\"\"\r\n    line_coverage: float\r\n    branch_coverage: float\r\n    function_coverage: float\r\n    uncovered_lines: List[int]\r\n    uncovered_branches: List[str]\r\n    uncovered_functions: List[str]\r\n    total_lines: int\r\n    covered_lines: int\r\n    execution_paths: List[str]\r\n\r\n\r\n@dataclass\r\nclass HotSpot:\r\n    \"\"\"Code hotspot that needs more testing\"\"\"\r\n    file_path: str\r\n    line_number: int\r\n    function_name: str\r\n    complexity: int\r\n    coverage_score: float\r\n    safety_critical: bool\r\n    priority: int\r\n\r\n\r\nclass CoverageTracker:\r\n    \"\"\"\r\n    Advanced coverage tracking system with AI-powered\r\n    analysis for identifying testing gaps and priorities.\r\n    \"\"\"\r\n    \r\n    def __init__(self, target_directories: Optional[List[str]] = None):\r\n        self.target_directories = target_directories or ['core/', 'src/']\r\n        self.coverage = coverage.Coverage(\r\n            source=self.target_directories,\r\n            branch=True,\r\n            include=['*.py'],\r\n            omit=['*/tests/*', '*/test_*', '*/__pycache__/*']\r\n        )\r\n        \r\n        # Coverage tracking state\r\n        self.is_tracking = False\r\n        self.baseline_coverage = 0.0\r\n        self.current_coverage = 0.0\r\n        self.coverage_history = []\r\n        \r\n        # Execution path tracking\r\n        self.execution_paths = set()\r\n        self.function_calls = {}\r\n        self.branch_history = []\r\n        \r\n        # AI-powered analysis\r\n        self.hotspots = []\r\n        self.coverage_recommendations = []\r\n        \r\n    async def start_tracking(self):\r\n        \"\"\"Start coverage tracking\"\"\"\r\n        try:\r\n            self.coverage.start()\r\n            self.is_tracking = True\r\n            self.baseline_coverage = await self.get_coverage_percentage()\r\n            logger.info(\"Coverage tracking started\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to start coverage tracking: {e}\")\r\n            raise\r\n    \r\n    async def stop_tracking(self):\r\n        \"\"\"Stop coverage tracking and save data\"\"\"\r\n        try:\r\n            if self.is_tracking:\r\n                self.coverage.stop()\r\n                self.coverage.save()\r\n                self.is_tracking = False\r\n                \r\n                # Update current coverage\r\n                self.current_coverage = await self.get_coverage_percentage()\r\n                \r\n                # Add to history\r\n                self.coverage_history.append({\r\n                    'timestamp': time.time(),\r\n                    'coverage': self.current_coverage\r\n                })\r\n                \r\n                logger.info(f\"Coverage tracking stopped. Coverage: {self.current_coverage:.2f}%\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to stop coverage tracking: {e}\")\r\n    \r\n    async def get_coverage_percentage(self) -\u003e float:\r\n        \"\"\"Get current coverage percentage\"\"\"\r\n        try:\r\n            # Generate coverage report\r\n            total = self.coverage.report(show_missing=False, skip_covered=False)\r\n            return total if total is not None else 0.0\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get coverage percentage: {e}\")\r\n            return 0.0\r\n    \r\n    async def get_current_coverage(self) -\u003e float:\r\n        \"\"\"Get current coverage for comparison\"\"\"\r\n        return self.current_coverage\r\n    \r\n    async def get_detailed_metrics(self) -\u003e CoverageMetrics:\r\n        \"\"\"Get detailed coverage metrics\"\"\"\r\n        try:\r\n            # Get line coverage\r\n            line_coverage = await self.get_coverage_percentage()\r\n            \r\n            # Get branch coverage\r\n            branch_coverage = await self._calculate_branch_coverage()\r\n            \r\n            # Get function coverage\r\n            function_coverage = await self._calculate_function_coverage()\r\n            \r\n            # Get uncovered items\r\n            uncovered_lines = await self._get_uncovered_lines()\r\n            uncovered_branches = await self._get_uncovered_branches()\r\n            uncovered_functions = await self._get_uncovered_functions()\r\n            \r\n            # Get totals\r\n            total_lines, covered_lines = await self._get_line_counts()\r\n            \r\n            return CoverageMetrics(\r\n                line_coverage=line_coverage,\r\n                branch_coverage=branch_coverage,\r\n                function_coverage=function_coverage,\r\n                uncovered_lines=uncovered_lines,\r\n                uncovered_branches=uncovered_branches,\r\n                uncovered_functions=uncovered_functions,\r\n                total_lines=total_lines,\r\n                covered_lines=covered_lines,\r\n                execution_paths=list(self.execution_paths)\r\n            )\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get detailed metrics: {e}\")\r\n            return CoverageMetrics(0, 0, 0, [], [], [], 0, 0, [])\r\n    \r\n    async def _calculate_branch_coverage(self) -\u003e float:\r\n        \"\"\"Calculate branch coverage percentage\"\"\"\r\n        try:\r\n            # Get branch data from coverage.py\r\n            branch_data = self.coverage.get_data().measured_contexts()\r\n            if not branch_data:\r\n                return 0.0\r\n            \r\n            # This is a simplified calculation\r\n            # In practice, you'd analyze the actual branch data\r\n            return min(100.0, self.current_coverage + 10.0)  # Placeholder\r\n        except Exception as e:\r\n            logger.error(f\"Failed to calculate branch coverage: {e}\")\r\n            return 0.0\r\n    \r\n    async def _calculate_function_coverage(self) -\u003e float:\r\n        \"\"\"Calculate function coverage percentage\"\"\"\r\n        try:\r\n            covered_functions = len(self.function_calls)\r\n            total_functions = await self._count_total_functions()\r\n            \r\n            if total_functions == 0:\r\n                return 100.0\r\n            \r\n            return (covered_functions / total_functions) * 100.0\r\n        except Exception as e:\r\n            logger.error(f\"Failed to calculate function coverage: {e}\")\r\n            return 0.0\r\n    \r\n    async def _get_uncovered_lines(self) -\u003e List[int]:\r\n        \"\"\"Get list of uncovered line numbers\"\"\"\r\n        try:\r\n            uncovered = []\r\n            analysis = self.coverage.analysis2()\r\n            \r\n            for filename, data in analysis:\r\n                if any(target in filename for target in self.target_directories):\r\n                    uncovered.extend(data.missing)\r\n            \r\n            return sorted(set(uncovered))\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get uncovered lines: {e}\")\r\n            return []\r\n    \r\n    async def _get_uncovered_branches(self) -\u003e List[str]:\r\n        \"\"\"Get list of uncovered branches\"\"\"\r\n        try:\r\n            # This would require more sophisticated analysis\r\n            # For now, return placeholder data\r\n            return [\"branch_1\", \"branch_2\"]  # Placeholder\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get uncovered branches: {e}\")\r\n            return []\r\n    \r\n    async def _get_uncovered_functions(self) -\u003e List[str]:\r\n        \"\"\"Get list of uncovered functions\"\"\"\r\n        try:\r\n            all_functions = await self._get_all_functions()\r\n            covered_functions = set(self.function_calls.keys())\r\n            uncovered = [func for func in all_functions if func not in covered_functions]\r\n            return uncovered\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get uncovered functions: {e}\")\r\n            return []\r\n    \r\n    async def _get_line_counts(self) -\u003e tuple:\r\n        \"\"\"Get total and covered line counts\"\"\"\r\n        try:\r\n            total_lines = 0\r\n            covered_lines = 0\r\n            \r\n            for target_dir in self.target_directories:\r\n                if Path(target_dir).exists():\r\n                    for py_file in Path(target_dir).rglob(\"*.py\"):\r\n                        with open(py_file, 'r', encoding='utf-8') as f:\r\n                            file_lines = len(f.readlines())\r\n                            total_lines += file_lines\r\n            \r\n            # Estimate covered lines based on coverage percentage\r\n            covered_lines = int(total_lines * (self.current_coverage / 100.0))\r\n            \r\n            return total_lines, covered_lines\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get line counts: {e}\")\r\n            return 0, 0\r\n    \r\n    async def _count_total_functions(self) -\u003e int:\r\n        \"\"\"Count total functions in target directories\"\"\"\r\n        try:\r\n            total_functions = 0\r\n            \r\n            for target_dir in self.target_directories:\r\n                if Path(target_dir).exists():\r\n                    for py_file in Path(target_dir).rglob(\"*.py\"):\r\n                        with open(py_file, 'r', encoding='utf-8') as f:\r\n                            tree = ast.parse(f.read())\r\n                            for node in ast.walk(tree):\r\n                                if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):\r\n                                    total_functions += 1\r\n            \r\n            return total_functions\r\n        except Exception as e:\r\n            logger.error(f\"Failed to count total functions: {e}\")\r\n            return 1  # Avoid division by zero\r\n    \r\n    async def _get_all_functions(self) -\u003e List[str]:\r\n        \"\"\"Get all function names in target directories\"\"\"\r\n        try:\r\n            functions = []\r\n            \r\n            for target_dir in self.target_directories:\r\n                if Path(target_dir).exists():\r\n                    for py_file in Path(target_dir).rglob(\"*.py\"):\r\n                        with open(py_file, 'r', encoding='utf-8') as f:\r\n                            tree = ast.parse(f.read())\r\n                            for node in ast.walk(tree):\r\n                                if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):\r\n                                    functions.append(f\"{py_file.stem}.{node.name}\")\r\n            \r\n            return functions\r\n        except Exception as e:\r\n            logger.error(f\"Failed to get all functions: {e}\")\r\n            return []\r\n    \r\n    async def track_execution_path(self, path: str):\r\n        \"\"\"Track execution path for analysis\"\"\"\r\n        self.execution_paths.add(path)\r\n    \r\n    async def track_function_call(self, function_name: str):\r\n        \"\"\"Track function call for coverage analysis\"\"\"\r\n        if function_name not in self.function_calls:\r\n            self.function_calls[function_name] = 0\r\n        self.function_calls[function_name] += 1\r\n    \r\n    async def identify_coverage_hotspots(self) -\u003e List[HotSpot]:\r\n        \"\"\"\r\n        Identify code hotspots that need more testing\r\n        using AI-powered analysis\r\n        \"\"\"\r\n        try:\r\n            hotspots = []\r\n            \r\n            # Analyze uncovered code\r\n            metrics = await self.get_detailed_metrics()\r\n            \r\n            # Find high-complexity uncovered functions\r\n            for func_name in metrics.uncovered_functions:\r\n                # Parse function details\r\n                file_path, function_name = self._parse_function_name(func_name)\r\n                \r\n                if file_path and function_name:\r\n                    complexity = await self._calculate_function_complexity(file_path, function_name)\r\n                    safety_critical = await self._is_safety_critical_function(file_path, function_name)\r\n                    \r\n                    # Calculate priority based on multiple factors\r\n                    priority = self._calculate_hotspot_priority(\r\n                        complexity, safety_critical, 0.0  # 0% coverage\r\n                    )\r\n                    \r\n                    hotspot = HotSpot(\r\n                        file_path=file_path,\r\n                        line_number=1,  # Would need AST analysis to get exact line\r\n                        function_name=function_name,\r\n                        complexity=complexity,\r\n                        coverage_score=0.0,\r\n                        safety_critical=safety_critical,\r\n                        priority=priority\r\n                    )\r\n                    hotspots.append(hotspot)\r\n            \r\n            # Sort by priority (highest first)\r\n            hotspots.sort(key=lambda h: h.priority, reverse=True)\r\n            \r\n            self.hotspots = hotspots[:20]  # Keep top 20\r\n            return self.hotspots\r\n        except Exception as e:\r\n            logger.error(f\"Failed to identify hotspots: {e}\")\r\n            return []\r\n    \r\n    def _parse_function_name(self, func_name: str) -\u003e tuple:\r\n        \"\"\"Parse function name to get file path and function name\"\"\"\r\n        try:\r\n            if '.' in func_name:\r\n                parts = func_name.split('.')\r\n                return '.'.join(parts[:-1]) + '.py', parts[-1]\r\n            return None, None\r\n        except IndexError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)IndexError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)            return None, None\r\n    \r\n    async def _calculate_function_complexity(self, file_path: str, function_name: str) -\u003e int:\r\n        \"\"\"Calculate cyclomatic complexity of a function\"\"\"\r\n        try:\r\n            # This would require AST analysis\r\n            # For now, return a random complexity between 1-10\r\nexcept ImportError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)     import random\r\n            return random.randint(1, 10)\r\n        except ImportError as e:\r\n    logger.error(f\"Error in operation: {e}\", exc_info=True)            return 1\r\n    \r\n    async def _is_safety_critical_function(self, file_path: str, function_name: str) -\u003e bool:\r\n        \"\"\"Determine if function is safety critical\"\"\"\r\n        safety_keywords = [\r\n            'child', 'safety', 'content', 'filter', 'moderate',\r\n            'validate', 'emergency', 'auth', 'permission'\r\n        ]\r\n        \r\n        func_name_lower = function_name.lower()\r\n        file_path_lower = file_path.lower()\r\n        \r\n        return any(keyword in func_name_lower or keyword in file_path_lower \r\n                  for keyword in safety_keywords)\r\n    \r\n    def _calculate_hotspot_priority(self, complexity: int, safety_critical: bool, coverage: float) -\u003e int:\r\n        \"\"\"Calculate hotspot priority (1-10)\"\"\"\r\n        priority = 0\r\n        \r\n        # Complexity factor (higher complexity = higher priority)\r\n        priority += min(complexity, 5)\r\n        \r\n        # Safety critical factor\r\n        if safety_critical:\r\n            priority += 3\r\n        \r\n        # Coverage factor (lower coverage = higher priority)\r\n        priority += int((100 - coverage) / 20)\r\n        \r\n        return min(priority, 10)\r\n    \r\n    async def generate_coverage_recommendations(self) -\u003e List[str]:\r\n        \"\"\"Generate AI-powered coverage recommendations\"\"\"\r\n        try:\r\n            recommendations = []\r\n            metrics = await self.get_detailed_metrics()\r\n            \r\n            # Low overall coverage\r\n            if metrics.line_coverage \u003c 80:\r\n                recommendations.append(\r\n                    f\"Overall coverage is {metrics.line_coverage:.1f}%. \"\r\n                    \"Recommend increasing to at least 80% for production readiness.\"\r\n                )\r\n            \r\n            # Low branch coverage\r\n            if metrics.branch_coverage \u003c 70:\r\n                recommendations.append(\r\n                    f\"Branch coverage is {metrics.branch_coverage:.1f}%. \"\r\n                    \"Focus on testing conditional logic and error handling paths.\"\r\n                )\r\n            \r\n            # Low function coverage\r\n            if metrics.function_coverage \u003c 90:\r\n                recommendations.append(\r\n                    f\"Function coverage is {metrics.function_coverage:.1f}%. \"\r\n                    f\"Add tests for {len(metrics.uncovered_functions)} uncovered functions.\"\r\n                )\r\n            \r\n            # Identify critical uncovered areas\r\n            hotspots = await self.identify_coverage_hotspots()\r\n            safety_critical_hotspots = [h for h in hotspots if h.safety_critical]\r\n            \r\n            if safety_critical_hotspots:\r\n                recommendations.append(\r\n                    f\"Found {len(safety_critical_hotspots)} safety-critical functions \"\r\n                    \"without adequate test coverage. These should be prioritized.\"\r\n                )\r\n            \r\n            # High complexity uncovered code\r\n            complex_hotspots = [h for h in hotspots if h.complexity \u003e 5]\r\n            if complex_hotspots:\r\n                recommendations.append(\r\n                    f\"Found {len(complex_hotspots)} high-complexity functions \"\r\n                    \"with insufficient coverage. These are prone to bugs.\"\r\n                )\r\n            \r\n            self.coverage_recommendations = recommendations\r\n            return recommendations\r\n        except Exception as e:\r\n            logger.error(f\"Failed to generate recommendations: {e}\")\r\n            return []\r\n    \r\n    async def export_coverage_report(self, output_file: str) -\u003e bool:\r\n        \"\"\"Export detailed coverage report\"\"\"\r\n        try:\r\n            metrics = await self.get_detailed_metrics()\r\n            hotspots = await self.identify_coverage_hotspots()\r\n            recommendations = await self.generate_coverage_recommendations()\r\n            \r\n            report = {\r\n                'timestamp': time.time(),\r\n                'metrics': asdict(metrics),\r\n                'hotspots': [asdict(h) for h in hotspots],\r\n                'recommendations': recommendations,\r\n                'coverage_history': self.coverage_history,\r\n                'execution_paths': list(self.execution_paths),\r\n                'function_calls': self.function_calls\r\n            }\r\n            \r\n            with open(output_file, 'w', encoding='utf-8') as f:\r\n                json.dump(report, f, indent=2)\r\n            \r\n            logger.info(f\"Coverage report exported to {output_file}\")\r\n            return True\r\n        except Exception as e:\r\n            logger.error(f\"Failed to export coverage report: {e}\")\r\n            return False\r\n    \r\n    async def reset_tracking(self):\r\n        \"\"\"Reset all tracking data\"\"\"\r\n        self.execution_paths.clear()\r\n        self.function_calls.clear()\r\n        self.branch_history.clear()\r\n        self.coverage_history.clear()\r\n        self.hotspots.clear()\r\n        self.coverage_recommendations.clear()\r\n        self.current_coverage = 0.0\r\n        self.baseline_coverage = 0.0\r\n        \r\n        logger.info(\"Coverage tracking data reset\")\r\n    \r\n    async def get_coverage_delta(self) -\u003e float:\r\n        \"\"\"Get coverage improvement since baseline\"\"\"\r\n        return self.current_coverage - self.baseline_coverage\r\n    \r\n    async def is_coverage_improving(self, threshold: float = 1.0) -\u003e bool:\r\n        \"\"\"Check if coverage is improving above threshold\"\"\"\r\n        delta = await self.get_coverage_delta()\r\n        return delta \u003e= threshold` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/domain/services/emotion_analyzer.py:762:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/Alert.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/dashboards/components/SystemHealthStatus.tsx:1:\n `��/` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/external_services/tts_playback.py:1:\n `import logging\r\nfrom typing import Any, Dict, List, Optional\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nimport structlog\r\n\r\nlogger = structlog.get_logger(__name__)\r\n\r\nfrom pathlib import Path\r\n\r\nimport sounddevice as sd\r\nfrom pydub import AudioSegment\r\nfrom pydub.playback import play\r\nfrom scipy.io.wavfile import write\r\n\r\n# ====== كود تسجيل الصوت وحفظه كملف WAV ======\r\n\r\ndef record_and_save_wav(filename=\"output.wav\", duration=3, fs=16000) -\u003e Any:\r\n    logger.info(\"🎤 تسجيل... تحدث الآن\")\r\n    recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16')\r\n    sd.wait()  # انتظر انتهاء التسجيل\r\n    write(filename, fs, recording)\r\n    logger.info(f\"✅ تم حفظ التسجيل في {filename}\")\r\n\r\n# ====== كود تشغيل ملف WAV بشكل آمن ======\r\n\r\ndef is_valid_wav(file_path) -\u003e Any:\r\n    \"\"\"يتحقق إذا كان الملف فعلاً WAV صالح\"\"\"\r\n    try:\r\n        with open(file_path, \"rb\") as f:\r\n            header = f.read(4)\r\n            return header == b'RIFF'\r\n    except Exception as e:\r\n    logger.error(f\"Error: {e}\")\"⚠️ حدث خطأ أثناء قراءة رأس الملف:\", e)\r\n        return False\r\n\r\ndef safe_play(file_path) -\u003e Any:\r\n    \"\"\"يشغل ملف صوتي بعد التحقق من صيغته\"\"\"\r\n    import os\r\n    if not os.path.exists(file_path) or os.path.getsize(file_path) \u003c 1000:\r\n        logger.error(f\"❌ الملف {file_path} غير موجود أو فارغ.\")\r\n        return\r\n\r\n    ext = file_path.lower().split('.')[-1]\r\n    if ext == \"wav\":\r\n        if not is_valid_wav(file_path):\r\n            logger.error(f\"❌ الملف {file_path} ليس ملف WAV صالح (لا يبدأ بـ RIFF)\")\r\n            return\r\n        try:\r\n            audio = AudioSegment.from_file(file_path, format=\"wav\")\r\n            play(audio)\r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")\"❌ خطأ أثناء تشغيل WAV:\", e)\r\n    else:\r\n        logger.error(f\"❌ صيغة الملف غير مدعومة: {file_path}\")\r\n\r\nclass TTSPlayback:\r\n    def __init__(self, on_playback_complete):\r\n        self.on_playback_complete = on_playback_complete\r\n        self.stream = None\r\n\r\n    def play_audio(self, data, samplerate) -\u003e Any:\r\n        self.stream = sd.OutputStream(samplerate=samplerate, channels=1, callback=self.callback, finished_callback=self.on_playback_complete)\r\n        self.stream.start()\r\n\r\n    def callback(self, outdata, frames, time, status) -\u003e Any:\r\n        if status:\r\n            logger.info(status)\r\n        # This is a placeholder. In a real implementation, you would feed audio data here.\r\n        # For now, we'll just output silence.\r\n        outdata.fill(0)\r\n\r\n    def stop(self) -\u003e Any:\r\n        if self.stream:\r\n            self.stream.stop()\r\n            self.stream.close()\r\n            self.stream = None\r\n\r\n# ====== مثال كامل على التسجيل والتشغيل ======\r\n\r\nif __name__ == \"__main__\":\r\n    filename = \"test_mic.wav\"\r\n    record_and_save_wav(filename, duration=4)    # غيّر مدة التسجيل لو تريد\r\n    safe_play(filename)\r\n\r\ndef cleanup_tts_cache(max_age_hours: int = 24) -\u003e int:\r\n    \"\"\"Clean up TTS cache files older than max_age_hours\"\"\"\r\n    try:\r\n        cache_dir = Path(\"cache/tts\")\r\n        if not cache_dir.exists():\r\n            return 0\r\n        current_time = time.time()\r\n        cleaned_count = 0\r\n        for cache_file in cache_dir.glob(\"*.wav\"):\r\n            file_age = current_time - cache_file.stat().st_mtime\r\n            if file_age \u003e (max_age_hours * 3600):\r\n                cache_file.unlink()\r\n                cleaned_count += 1\r\n        logger.info(f\"Cleaned {cleaned_count} TTS cache files\")\r\n        return cleaned_count\r\n    except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"Error cleaning TTS cache: {e}\")\r\n        return 0` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Other syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Other syntax error at line observability/architecture/infrastructure/data-pipeline/opentelemetry-collector.yaml:141:\n (approximate error location; error nearby after) error calling parser: mapping values are not allowed in this context character 0 position 0 returned: 0"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/infrastructure/persistence/repositories/comprehensive_fix_and_report.py:127:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/ai/emotion_service.py:28:\n `\r\n    \"\"\"خدمة إدارة المشاعر - حفظ وتحليل وتتبع المشاعر عبر الوقت\"\"\"\r\n    \r\n    def __init__(self, container):\r\n        super().__init__(container)\r\n        self.db_path = Path(\"data/emotions.db\")\r\n        self.db_path.parent.mkdir(exist_ok=True)\r\n        \r\n        # إنشاء قاعدة البيانات\r\n        asyncio.create_task(self._initialize_database())\r\n        \r\n        logger.info(\"🎭 Emotion Service initialized\")\r\n    \r\n    async def _initialize_database(self):\r\n        \"\"\"إنشاء جداول قاعدة البيانات\"\"\"\r\n        \r\n        with sqlite3.connect(self.db_path) as conn:\r\n            cursor = conn.cursor()\r\n            \r\n            # جدول المشاعر الأساسي\r\n            cursor.execute(\"\"\"\r\n                CREATE TABLE IF NOT EXISTS emotion_analyses (\r\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                    udid TEXT NOT NULL,\r\n                    child_name TEXT NOT NULL,\r\n                    timestamp TEXT NOT NULL,\r\n                    dominant_emotion TEXT NOT NULL,\r\n                    joy REAL DEFAULT 0.0,\r\n                    sadness REAL DEFAULT 0.0,\r\n                    anger REAL DEFAULT 0.0,\r\n                    fear REAL DEFAULT 0.0,\r\n                    excitement REAL DEFAULT 0.0,\r\n                    calmness REAL DEFAULT 0.0,\r\n                    surprise REAL DEFAULT 0.0,\r\n                    curiosity REAL DEFAULT 0.0,\r\n                    frustration REAL DEFAULT 0.0,\r\n                    shyness REAL DEFAULT 0.0,\r\n                    playfulness REAL DEFAULT 0.0,\r\n                    tiredness REAL DEFAULT 0.0,\r\n                    energy_level REAL DEFAULT 0.0,\r\n                    speech_rate REAL DEFAULT 0.0,\r\n                    pitch_variation REAL DEFAULT 0.0,\r\n                    voice_quality TEXT DEFAULT 'clear',\r\n                    confidence REAL DEFAULT 0.0,\r\n                    emotional_intensity REAL DEFAULT 0.0,\r\n                    attention_level REAL DEFAULT 0.0,\r\n                    communication_clarity REAL DEFAULT 0.0,\r\n                    developmental_indicators TEXT DEFAULT '[]',\r\n                    transcription TEXT DEFAULT '',\r\n                    response_text TEXT DEFAULT '',\r\n                    session_context TEXT DEFAULT '{}'\r\n                )\r\n            \"\"\")\r\n            \r\n            # جدول التغذية الراجعة من الوالدين\r\n            cursor.execute(\"\"\"\r\n                CREATE TABLE IF NOT EXISTS parent_feedback (\r\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                    udid TEXT NOT NULL,\r\n                    interaction_id TEXT NOT NULL,\r\n                    feedback TEXT NOT NULL,\r\n                    accuracy_rating INTEGER NOT NULL,\r\n                    timestamp TEXT NOT NULL,\r\n                    FOREIGN KEY (interaction_id) REFERENCES emotion_analyses (id)\r\n                )\r\n            \"\"\")\r\n            \r\n            # جدول إحصائيات الطفل\r\n            cursor.execute(\"\"\"\r\n                CREATE TABLE IF NOT EXISTS child_emotion_stats (\r\n                    udid TEXT PRIMARY KEY,\r\n                    child_name TEXT NOT NULL,\r\n                    total_interactions INTEGER DEFAULT 0,\r\n                    avg_joy REAL DEFAULT 0.0,\r\n                    avg_sadness REAL DEFAULT 0.0,\r\n                    avg_curiosity REAL DEFAULT 0.0,\r\n                    most_common_emotion TEXT DEFAULT 'curious',\r\n                    emotional_stability REAL DEFAULT 1.0,\r\n                    last_analysis TEXT,\r\n                    created_at TEXT NOT NULL,\r\n                    updated_at TEXT NOT NULL\r\n                )\r\n            \"\"\")\r\n            \r\n            # إنشاء indexes للبحث السريع\r\n            cursor.execute(\"CREATE INDEX IF NOT EXISTS idx_udid_timestamp ON emotion_analyses (udid, timestamp)\")\r\n            cursor.execute(\"CREATE INDEX IF NOT EXISTS idx_dominant_emotion ON emotion_analyses (dominant_emotion)\")\r\n            \r\n            conn.commit()\r\n            logger.info(\"✅ Emotion database initialized\")\r\n    \r\n    async def save_emotion_analysis(\r\n        self, \r\n        udid: str, \r\n        child_name: str, \r\n        emotion_data: ChildVoiceEmotion,\r\n        transcription: str = \"\",\r\n        response_text: str = \"\",\r\n        session_context: Dict[str, Any] = None\r\n    ) -\u003e str:\r\n        \"\"\"حفظ نتيجة تحليل المشاعر\"\"\"\r\n        \r\n        try:\r\n            session_context = session_context or {}\r\n            \r\n            with sqlite3.connect(self.db_path) as conn:\r\n                cursor = conn.cursor()\r\n                \r\n                # حفظ التحليل\r\n                cursor.execute(\"\"\"\r\n                    INSERT INTO emotion_analyses (\r\n                        udid, child_name, timestamp, dominant_emotion,\r\n                        joy, sadness, anger, fear, excitement, calmness, surprise,\r\n                        curiosity, frustration, shyness, playfulness, tiredness,\r\n                        energy_level, speech_rate, pitch_variation, voice_quality,\r\n                        confidence, emotional_intensity, attention_level, \r\n                        communication_clarity, developmental_indicators,\r\n                        transcription, response_text, session_context\r\n                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, \r\n                             ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n                \"\"\", (\r\n                    udid, child_name, emotion_data.timestamp, emotion_data.dominant_emotion,\r\n                    emotion_data.joy, emotion_data.sadness, emotion_data.anger,\r\n                    emotion_data.fear, emotion_data.excitement, emotion_data.calmness,\r\n                    emotion_data.surprise, emotion_data.curiosity, emotion_data.frustration,\r\n                    emotion_data.shyness, emotion_data.playfulness, emotion_data.tiredness,\r\n                    emotion_data.energy_level, emotion_data.speech_rate,\r\n                    emotion_data.pitch_variation, emotion_data.voice_quality,\r\n                    emotion_data.confidence, emotion_data.emotional_intensity,\r\n                    emotion_data.attention_level, emotion_data.communication_clarity,\r\n                    json.dumps(emotion_data.developmental_indicators),\r\n                    transcription, response_text, json.dumps(session_context)\r\n                ))\r\n                \r\n                interaction_id = str(cursor.lastrowid)\r\n                conn.commit()\r\n                \r\n                # تحديث إحصائيات الطفل\r\n                await self._update_child_stats(udid, child_name, emotion_data)\r\n                \r\n                logger.info(f\"✅ Emotion analysis saved for {child_name} (ID: {interaction_id})\")\r\n                return interaction_id\r\n                \r\n        except Exception as e:\r\n    logger.error(f\"Error: {e}\")f\"❌ Error saving emotion analysis: {e}\")` was unexpected"
              }
            },
            {
              "descriptor": {
                "id": "Lexical error"
              },
              "level": "warning",
              "message": {
                "text": "Lexical error at line src/dashboards/package.json:1:\n unrecognised symbol, in token rule:�"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/testing/mutation_engine.py:283:\n missing element"
              }
            },
            {
              "descriptor": {
                "id": "Syntax error"
              },
              "level": "warning",
              "message": {
                "text": "Syntax error at line src/application/services/core/notification_service.py:348:\n missing element"
              }
            }
          ]
        }
      ],
      "results": [
        {
          "fingerprints": {
            "matchBasedId/v1": "54d9a9da5bdc443b49e5fc480ff60dc7e476886a5f402838f8f3d6769b4858ba6db4526f0433733b343b658943cab348536c7230675501f85ca5f979d9511f69_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 214,
                  "snippet": {
                    "text": "      uses: aquasecurity/trivy-action@master"
                  },
                  "startColumn": 7,
                  "startLine": 214
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3ae38209e6dbfb6e5020b78b6ce64633c8ad2e0631622a5baeec63c97744e4c0d46264c228007278c5b84c9b3e585039a29c670582a02619b3be10ce65fd1219_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 262,
                  "snippet": {
                    "text": "      uses: docker/setup-buildx-action@v3"
                  },
                  "startColumn": 7,
                  "startLine": 262
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "c89fd68b75f3df1109f20a6a98d14d90af89b2fa69aed6eb950879ed0871dd11376dc88a0837706fa5ebb1be0cb1b15a137618feb35cb8d3dd1394c8158b21bd_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 265,
                  "snippet": {
                    "text": "      uses: docker/login-action@v3"
                  },
                  "startColumn": 7,
                  "startLine": 265
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d6b2ff32c4b01ab39255708f9d75f8f5095fc47c015a0ac4e6897257a0256ce29dea3ce0a183a9d3c882f9950e4a4d7678187e69cb62422ccb2e0546d1f24c25_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 38,
                  "endLine": 273,
                  "snippet": {
                    "text": "      uses: docker/metadata-action@v5"
                  },
                  "startColumn": 7,
                  "startLine": 273
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "e24d6808eb17678aae2f15feb7279d8fa36172446b067da91d4b0653db616ad135a6bb1c3e1c98dd9d00e19038e2592fdb8eff717b0aa6d9ea22e8127fc6efeb_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 285,
                  "snippet": {
                    "text": "      uses: docker/build-push-action@v5"
                  },
                  "startColumn": 7,
                  "startLine": 285
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9295ab6b669c2af791d96abecb22467d0edc8dce39a80593b4f270ece25454235f1cbaed975f6d3b20891fbf5689ea616930edff39540543d8eabbd6473fd2fb_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 53,
                  "endLine": 325,
                  "snippet": {
                    "text": "      uses: aws-actions/configure-aws-credentials@v4"
                  },
                  "startColumn": 7,
                  "startLine": 325
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "42de44f60d49df6286556e42e152067a2e6fae97812efe289c0aa4c787c54375bf8f9b24effe0adc94efe7e6beee932012cd9c60a1ce680551fc9d537b09f05f_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 332,
                  "snippet": {
                    "text": "      uses: azure/k8s-set-context@v3"
                  },
                  "startColumn": 7,
                  "startLine": 332
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9295ab6b669c2af791d96abecb22467d0edc8dce39a80593b4f270ece25454235f1cbaed975f6d3b20891fbf5689ea616930edff39540543d8eabbd6473fd2fb_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 53,
                  "endLine": 372,
                  "snippet": {
                    "text": "      uses: aws-actions/configure-aws-credentials@v4"
                  },
                  "startColumn": 7,
                  "startLine": 372
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "42de44f60d49df6286556e42e152067a2e6fae97812efe289c0aa4c787c54375bf8f9b24effe0adc94efe7e6beee932012cd9c60a1ce680551fc9d537b09f05f_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/advanced-ci-cd.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 379,
                  "snippet": {
                    "text": "      uses: azure/k8s-set-context@v3"
                  },
                  "startColumn": 7,
                  "startLine": 379
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a68176610957d621948ec1416e928d5c96bf0a76a4e705da556218fd7f424dfda75cd9210fdf5eb8c02c86ab317b09d4d5ab03870f09544ba2ecb36c330b4da1_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/code-quality.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 213,
                  "snippet": {
                    "text": "        uses: codecov/codecov-action@v3"
                  },
                  "startColumn": 9,
                  "startLine": 213
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "84a070658dc6475b78a6313cf365a99f9fd8dd3f347146f21ea08b9b707aa52c613f0587c110c605d03844d7ccf543eb27baddb8b8322607f18518132d4cc7b8_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 35,
                  "snippet": {
                    "text": "      uses: snok/install-poetry@v1"
                  },
                  "startColumn": 7,
                  "startLine": 35
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "261dbbb729842cf01d829165518a0b773ad03f7dd3e7a0c18111ae227365c126f9727c698e88abeb60cfc415c8d3cc2197ca8671167024609ba17ff55cd7c36b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 113,
                  "snippet": {
                    "text": "      uses: aquasecurity/trivy-action@master"
                  },
                  "startColumn": 7,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7c61ea792634d95d708b3dc215c0e86d1f1680f1e6afe0687dcab940b543ee15c22c91edcfa9ac9b22bd987b5829bf76644b15464a4b6a2b7c22b6113827377e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 39,
                  "endLine": 128,
                  "snippet": {
                    "text": "      uses: snyk/actions/python@master"
                  },
                  "startColumn": 7,
                  "startLine": 128
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b14d6aa91dad4506c8875a5118b12bd5b65b1de05b6726194c1295c2ffc5c363c56d6ec65cee326fe97af73e10c699101430df713c3f4c53c8aa027592f8c10d_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 58,
                  "endLine": 135,
                  "snippet": {
                    "text": "      uses: dependency-check/Dependency-Check_Action@main"
                  },
                  "startColumn": 7,
                  "startLine": 135
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9a903bc11aa9b0c280f35f5dc09aad94f124422ad66ec6f2434591f0c41275a2c45b62dc6a328c47a5813ee184d6e815db83faec1f5e59056761d263954a5218_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 44,
                  "endLine": 151,
                  "snippet": {
                    "text": "      uses: trufflesecurity/trufflehog@main"
                  },
                  "startColumn": 7,
                  "startLine": 151
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b4acda837a59bc32af46e101ec56b6315beefc19fdfdf3112298d52d93c5eff1184d24569766cf3119d27cc8ef8224d7382a5b73961c012ca13b149a25ca8ecd_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 38,
                  "endLine": 266,
                  "snippet": {
                    "text": "      uses: codecov/codecov-action@v3"
                  },
                  "startColumn": 7,
                  "startLine": 266
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "1f131c9b316939eec5035eb10097002f306b25f78dd091676fcac78d92afb43fcdbd205db32c20250d3e990d81a839b0b0991e4b8ed7732ff39100ba887f6b8b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 295,
                  "snippet": {
                    "text": "      uses: dorny/test-reporter@v1"
                  },
                  "startColumn": 7,
                  "startLine": 295
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9fbe265bd3be20046a181c507264072b949289ba4ed9dd643dc3f71f257cfb5046d45ed2e7a60af6183c8b37e2c2314a9298d35c525b704d1da39b3020dfcc05_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 321,
                  "snippet": {
                    "text": "      uses: docker/setup-buildx-action@v2"
                  },
                  "startColumn": 7,
                  "startLine": 321
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "5c7a71d19fb782b4c52fa249c658b7ab8492a5cb7bca28def5fe0313cbf9ef93473c2b612f1d53727df6c1a12b1e426f520b14007cd4d4c501d5cddf2d45b216_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 324,
                  "snippet": {
                    "text": "      uses: docker/login-action@v2"
                  },
                  "startColumn": 7,
                  "startLine": 324
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d6276be90921e0ade2e505a37b1f5de0bd4e7053fa8cd9a8f76c25fbb9c8085148886a7e429940198ef41e387aef5e04cc44acfb6d8393e5ccb95a0d6af5259b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 38,
                  "endLine": 332,
                  "snippet": {
                    "text": "      uses: docker/metadata-action@v4"
                  },
                  "startColumn": 7,
                  "startLine": 332
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3b12a55de00e775130af8513c248bc00fdb34308d5a75892099e8be2c50e5aac04456bf5c1678bff8ebd8ca7cdd1a595fdee4956fad8167618bcf4d4ad07a0c2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 343,
                  "snippet": {
                    "text": "      uses: docker/build-push-action@v4"
                  },
                  "startColumn": 7,
                  "startLine": 343
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3b12a55de00e775130af8513c248bc00fdb34308d5a75892099e8be2c50e5aac04456bf5c1678bff8ebd8ca7cdd1a595fdee4956fad8167618bcf4d4ad07a0c2_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 357,
                  "snippet": {
                    "text": "      uses: docker/build-push-action@v4"
                  },
                  "startColumn": 7,
                  "startLine": 357
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3b12a55de00e775130af8513c248bc00fdb34308d5a75892099e8be2c50e5aac04456bf5c1678bff8ebd8ca7cdd1a595fdee4956fad8167618bcf4d4ad07a0c2_2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 368,
                  "snippet": {
                    "text": "      uses: docker/build-push-action@v4"
                  },
                  "startColumn": 7,
                  "startLine": 368
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "261dbbb729842cf01d829165518a0b773ad03f7dd3e7a0c18111ae227365c126f9727c698e88abeb60cfc415c8d3cc2197ca8671167024609ba17ff55cd7c36b_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 379,
                  "snippet": {
                    "text": "      uses: aquasecurity/trivy-action@master"
                  },
                  "startColumn": 7,
                  "startLine": 379
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9e96a281c0a96ebfdc6151c4c03be78f2df948744f7c97825151c7bd0206a466d0fadfea5c8cebaa6256dc2e6ed961311044aa03c12da3c75c19746c17fabe74_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 404,
                  "snippet": {
                    "text": "      uses: azure/setup-kubectl@v3"
                  },
                  "startColumn": 7,
                  "startLine": 404
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a68c8c335ef8603f39ead87bbfb233a5ac29192ecb19b6c6179c74783e6146eae864a3bf5443aa8f15a19f9766c5fd35a769dc560623d4ab577ed328f0ce9088_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 53,
                  "endLine": 409,
                  "snippet": {
                    "text": "      uses: aws-actions/configure-aws-credentials@v2"
                  },
                  "startColumn": 7,
                  "startLine": 409
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a68c8c335ef8603f39ead87bbfb233a5ac29192ecb19b6c6179c74783e6146eae864a3bf5443aa8f15a19f9766c5fd35a769dc560623d4ab577ed328f0ce9088_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 53,
                  "endLine": 466,
                  "snippet": {
                    "text": "      uses: aws-actions/configure-aws-credentials@v2"
                  },
                  "startColumn": 7,
                  "startLine": 466
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "831d883a7cab8fda338e19383b7b4ba6dd4e26c2e8d5e9f4941b9fe647cdbe6d9fd1c69923d4e3c1272aefc5e563e8cec78fa450dda31eb48913eef6215cd21b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/comprehensive-pipeline.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 506,
                  "snippet": {
                    "text": "      uses: 8398a7/action-slack@v3"
                  },
                  "startColumn": 7,
                  "startLine": 506
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "1c3d23e237031844562797cad849aef319f89ec8ce0348ebb39113d042d0c3228e75c713cfe1181a8990a63f1531c2d1acf0c2602a3459a297d827d3bb94bcf8_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/quality-assurance.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 38,
                  "endLine": 141,
                  "snippet": {
                    "text": "      uses: codecov/codecov-action@v3"
                  },
                  "startColumn": 7,
                  "startLine": 141
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "0aad7f0bfb77e35b869022e00b848a2e4466138aad2f9ab88fd8ac40d8ad4945fa5112ce0840335737deb19a5a9d2fac9bf2e6f66ec687376412088d990bf24b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/secrets-detection.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 23,
                  "snippet": {
                    "text": "        uses: trufflesecurity/trufflehog@main"
                  },
                  "startColumn": 9,
                  "startLine": 23
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "dc3e13ed73fa294b08b1fab62f2869ca3cc3f4382011ad398725d9bfba0d0115f64bd7059e13b83cb8653829849d40e29744cecb7d68d1d43a14d1f600053fd0_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": ".github/workflows/secrets-detection.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 47,
                  "snippet": {
                    "text": "        uses: gitleaks/gitleaks-action@v2"
                  },
                  "startColumn": 9,
                  "startLine": 47
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "85a28ff26160952643f355d70d49f066cd699eb9bd9801d427b5a43691f81695fa4b1734f3e2c72f719385b9b1e931e9e426f357425f5ee3d46efd2d95d79a19_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/environment-configs/production.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 20,
                  "endLine": 210,
                  "snippet": {
                    "text": "    resources: [\"*\"]"
                  },
                  "startColumn": 17,
                  "startLine": 210
                }
              }
            }
          ],
          "message": {
            "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "85a28ff26160952643f355d70d49f066cd699eb9bd9801d427b5a43691f81695fa4b1734f3e2c72f719385b9b1e931e9e426f357425f5ee3d46efd2d95d79a19_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/environment-configs/production.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 16,
                  "endLine": 211,
                  "snippet": {
                    "text": "    verbs: [\"*\"]"
                  },
                  "startColumn": 13,
                  "startLine": 211
                }
              }
            }
          ],
          "message": {
            "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d60859941fefecabba9d2ebd5ccecff4d90709cb4eb39b1701f8f2c05d1b0571116dbff9f0f08db0d998c58ac5b7fe60728f8084e347310b11372f31ab8bf49c_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/workflows/ci-cd-integration.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 3,
                  "endLine": 137,
                  "snippet": {
                    "text": "          - |\n            echo \"🏗️ Building and Testing Application...\"\n            \n            # Start Docker daemon\n            dockerd-entrypoint.sh \u0026\n            sleep 10\n            \n            # Build Docker images\n            echo \"Building Docker images...\"\n            docker build -t ai-teddy-bear/child-service:{{workflow.parameters.version}} -f child-service/Dockerfile .\n            docker build -t ai-teddy-bear/ai-service:{{workflow.parameters.version}} -f ai-service/Dockerfile .\n            docker build -t ai-teddy-bear/graphql-federation:{{workflow.parameters.version}} -f graphql-federation/Dockerfile .\n            \n            # Run unit tests\n            echo \"Running unit tests...\"\n            docker run --rm ai-teddy-bear/child-service:{{workflow.parameters.version}} pytest tests/unit/\n            \n            # Push to registry\n            echo \"Pushing images to registry...\"\n            docker push ai-teddy-bear/child-service:{{workflow.parameters.version}}\n            docker push ai-teddy-bear/ai-service:{{workflow.parameters.version}}\n            docker push ai-teddy-bear/graphql-federation:{{workflow.parameters.version}}\n            \n            echo \"✅ Build and test completed!\""
                  },
                  "startColumn": 11,
                  "startLine": 113
                }
              }
            }
          ],
          "message": {
            "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "4433ab2006819ce4a1bcf3c72dbd4cfffed11367c314bee2c1186c2bb7bf01bfa21be7b18b8ad0828fb42266456a24b2b10d727e45243fa241f725330c7fdaa0_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/workflows/ci-cd-integration.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 3,
                  "endLine": 171,
                  "snippet": {
                    "text": "          - |\n            echo \"🚀 Deploying to {{inputs.parameters.environment}}...\"\n            \n            # Login to ArgoCD\n            argocd login argocd-server:443 --username admin --password $ARGOCD_PASSWORD --insecure\n            \n            # Update application with new image tags\n            argocd app set ai-teddy-bear-{{inputs.parameters.environment}} \\\n              --parameter image.tag={{workflow.parameters.version}} \\\n              --parameter global.environment={{inputs.parameters.environment}}\n            \n            # Set sync policy\n            if [ \"{{inputs.parameters.sync-policy}}\" = \"automated\" ]; then\n              argocd app set ai-teddy-bear-{{inputs.parameters.environment}} --sync-policy automated\n              argocd app sync ai-teddy-bear-{{inputs.parameters.environment}}\n            else\n              argocd app set ai-teddy-bear-{{inputs.parameters.environment}} --sync-policy manual\n              echo \"Manual sync required for {{inputs.parameters.environment}}\"\n            fi\n            \n            # Wait for sync completion\n            argocd app wait ai-teddy-bear-{{inputs.parameters.environment}} --timeout 600\n            \n            echo \"✅ Deployment to {{inputs.parameters.environment}} completed!\""
                  },
                  "startColumn": 11,
                  "startLine": 147
                }
              }
            }
          ],
          "message": {
            "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "37ebb8e34e2351811347f8ddd0cb827fc948549c239a6b56d4ead9fe8600e0f2cfceeb186b7eaf5a1d1821f04b8c041e1ecae09c216fbba3b77b3978c643f070_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/workflows/ci-cd-integration.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 3,
                  "endLine": 283,
                  "snippet": {
                    "text": "          - |\n            echo \"🔍 Validating rollback target...\"\n            \n            # Check if target revision exists\n            argocd app history {{inputs.parameters.application}} | grep {{inputs.parameters.target-revision}} || exit 1\n            \n            echo \"✅ Target revision is valid\""
                  },
                  "startColumn": 11,
                  "startLine": 276
                }
              }
            }
          ],
          "message": {
            "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "ccdf0f1d0a89078f8df93873f66937f931cc3a6144c15e8a0d5d20a43145b49d19d1829a7d6d4e9b84dff48699385badc1b19622cad2e32d1798c6f301737ea1_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/workflows/ci-cd-integration.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 3,
                  "endLine": 303,
                  "snippet": {
                    "text": "          - |\n            echo \"⏪ Performing rollback...\"\n            \n            # Perform rollback\n            argocd app rollback {{inputs.parameters.application}} {{inputs.parameters.target-revision}}\n            \n            # Wait for rollback completion\n            argocd app wait {{inputs.parameters.application}} --timeout 300\n            \n            echo \"✅ Rollback completed\""
                  },
                  "startColumn": 11,
                  "startLine": 293
                }
              }
            }
          ],
          "message": {
            "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7fcaed3acccf2fa9b75ef2ea60defaa56d2c630bc287c2eb6f1e313d8400be1167160ab17c41484876259acb3cf91bd0808d3ff9ecaf7ad4159825d8aa740f52_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "argocd/workflows/ci-cd-integration.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 329,
                  "snippet": {
                    "text": "          - |\n            echo \"✅ Verifying rollback...\"\n            \n            # Wait for services to stabilize\n            sleep 30\n            \n            # Verify health endpoints\n            if [ \"{{inputs.parameters.environment}}\" = \"production\" ]; then\n              BASE_URL=\"https://api.teddy-bear.ai\"\n            else\n              BASE_URL=\"https://{{inputs.parameters.environment}}-api.teddy-bear.ai\"\n            fi\n            \n            curl -f $BASE_URL/health || exit 1\n            curl -f $BASE_URL/graphql || exit 1\n            \n            echo \"✅ Rollback verification successful\""
                  },
                  "startColumn": 11,
                  "startLine": 313
                }
              }
            }
          ],
          "message": {
            "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "74844742b374b60e4a179af8758f6b5ce2e13d09a184a86bcff2462e998f460a0ab8f5c98a9450741733e2311ac16fac2789431c3aebab8b57e254925ac4fcb3_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/ai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 354,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/chat\","
                  },
                  "startColumn": 13,
                  "startLine": 354
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3315a2a76a7285c33947410f61e03e468e91d9b0f6bd6563c17c6c582d08bcd162e39ce9bf06612c05f3126cf42c711d9e00ce61e7b0bf970ecf757fa9b4c725_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/ai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 368,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/models/reset\","
                  },
                  "startColumn": 13,
                  "startLine": 368
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "74844742b374b60e4a179af8758f6b5ce2e13d09a184a86bcff2462e998f460a0ab8f5c98a9450741733e2311ac16fac2789431c3aebab8b57e254925ac4fcb3_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/ai.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 382,
                  "snippet": {
                    "text": "                \"http://ai-service:8000/chat\","
                  },
                  "startColumn": 17,
                  "startLine": 382
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7bffd65f9a84604ead2bd01b5c18ff68e9c2ea1932eb805c1fdd18056534bdab26c73a74b7e7a6f2a86d7e5f4c10f8ff317083e3d36122ea9925a9c165ff2b59_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/safety.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 48,
                  "endLine": 277,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/health\", timeout=5)"
                  },
                  "startColumn": 13,
                  "startLine": 277
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7b954e7ee1a7e7a08acd6a70eecab3cc628967578f4500baa3d5829af9ea09bbb48ec2d2e499c81180c58b62ce47b9a3c1a9d75f195368461c44fbd7394f35e4_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/safety.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 61,
                  "endLine": 281,
                  "snippet": {
                    "text": "                \"http://safety-service:8000/fallback/status\", timeout=5"
                  },
                  "startColumn": 17,
                  "startLine": 281
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "cffe3a68e54e54c4525657186e9edd4de77ed5bf8bf4d6f3b780d20b23cf66b22ff3433c355c11aef865dd2db91072bb2aa0d626b70eb5de2e89eedcac2426f9_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/actions/safety.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 54,
                  "endLine": 285,
                  "snippet": {
                    "text": "                \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 17,
                  "startLine": 285
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2c153b18b17b135190b1dc2271094244caa23e40e4163e746fcac18ede8f2abb6255125be31c82118aafa4a878e1fa6d9eceaa08380a05e94d5435a9f900d520_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 346,
                  "snippet": {
                    "text": "                        f\"http://{target}:8000/generate\","
                  },
                  "startColumn": 25,
                  "startLine": 346
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "62ae8060fd683f3f028a787e55f190fab8f6d2a651b02fd35c7c4d9be6ae709762e355a92267ea32b1701fad093b54c000127855f85c767402922452ba020814_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 369,
                  "snippet": {
                    "text": "                        f\"http://{target}:8000/moderate\","
                  },
                  "startColumn": 25,
                  "startLine": 369
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "af1d241fbcc50c65b84f812e9527a8f94d9859bad023cab60421dfaa456fd7403eb20a43e6af055139a935592cc20a7a01f028fca1e44a1705f28f761bd94bd0_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 52,
                  "endLine": 429,
                  "snippet": {
                    "text": "                    f\"http://{target}:8000/metrics\", timeout=5)"
                  },
                  "startColumn": 21,
                  "startLine": 429
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "756435a233486a8504605c8553941a325b5cf0ae0fd4d27e5c30ea25a8f4c58cef1f10422d43ba61d27d6602fe29f967334a21d49424056fa4fe7775a67051e6_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 79,
                  "endLine": 458,
                  "snippet": {
                    "text": "                        f\"http://{target}:8000{target_config.health_endpoint}\","
                  },
                  "startColumn": 25,
                  "startLine": 458
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a73fb5cbcd108f7e1069ffbb6f5fe851b2e5194bbc7e5b56a07e2c562b61e7d340e1a7f598a772296d199099a4965c32a56c63abf41e1a795ca59fb7c3d2b51e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 52,
                  "endLine": 486,
                  "snippet": {
                    "text": "                    f\"http://{service}:8000/health\", timeout=5)"
                  },
                  "startColumn": 21,
                  "startLine": 486
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b767d2bbb84a2d749e76483f179bcfe99117b72284e0be28e5a7195fca4913ca54042c821e362d0d964fe8c667f6a66a2a7aba750df51bee03632197bd8da075_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 67,
                  "endLine": 502,
                  "snippet": {
                    "text": "            response = requests.get(f\"http://{target}:8000/health\", timeout=5)"
                  },
                  "startColumn": 37,
                  "startLine": 502
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a73fb5cbcd108f7e1069ffbb6f5fe851b2e5194bbc7e5b56a07e2c562b61e7d340e1a7f598a772296d199099a4965c32a56c63abf41e1a795ca59fb7c3d2b51e_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/infrastructure/chaos_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 52,
                  "endLine": 515,
                  "snippet": {
                    "text": "                    f\"http://{service}:8000/health\", timeout=10)"
                  },
                  "startColumn": 21,
                  "startLine": 515
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f1ff50133fb8bedbeaa0d0f89e71cb02726ad8f598aa47cecea5ecbacf7a73c5f9f4b82a83548d306adaa96e949da6d1f12db1579b018b22e9fdd99ea23cf1ca_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "chaos/monitoring/chaos_metrics.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 54,
                  "endLine": 143,
                  "snippet": {
                    "text": "                \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 17,
                  "startLine": 143
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "aa74c91f6447dc4fae5647b36d5c4ff372c5ab304e2c1e629b93134c61d4f09cfd3d9b8d415e091ac7174f0d56bd4321eb61933c44b562515dc2a5e3ba2cdfb2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "monitoring/emergency/api/emergency_response.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 6,
                  "endLine": 124,
                  "snippet": {
                    "text": "    allow_origins=(\n        [\"*\"] if ENVIRONMENT == \"development\" else [\"https://teddysecurity.ai\"]\n    ),"
                  },
                  "startColumn": 19,
                  "startLine": 122
                }
              }
            }
          ],
          "message": {
            "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "579b1829b1601ea00deefb08fd74e7ab61a284a1b2d250f10c6813e7c3cd1ca19e30cbe92cdecc501d564e83da9ff3e50d5207b65042aa3a129243c61116a33e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/architecture/infrastructure/core-services/grafana.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 40,
                  "snippet": {
                    "text": "      - name: grafana"
                  },
                  "startColumn": 9,
                  "startLine": 40
                }
              }
            }
          ],
          "message": {
            "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2fd84aee4b1bcfac8703d354a6a0c4c882a3301df0ab92d552ba38674d36af26376f9bb60804c81eade1a79186543794d3af8b7f500f938dc5bf0212afba1077_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/architecture/infrastructure/core-services/prometheus.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 42,
                  "snippet": {
                    "text": "      - name: prometheus"
                  },
                  "startColumn": 9,
                  "startLine": 42
                }
              }
            }
          ],
          "message": {
            "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "12ddffaad64a4850a42d8423d65e02272b7c42709d90ce5d371710dec059ca08178727b353b81de263c712452c1b4ca5bfbe019c316bd3a5d092c3c4ee8c83ba_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/architecture/orchestration/monitoring-orchestrator.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 13,
                  "endLine": 167,
                  "snippet": {
                    "text": "      - name: orchestrator"
                  },
                  "startColumn": 9,
                  "startLine": 167
                }
              }
            }
          ],
          "message": {
            "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "89ca38565c70428b5b353a5b849634cc70b203f8eaec2e1771a1ff1cbd3de8cc4dacc3bf2cf861dd88e7affbec99e8829275dacb835aec8dc2d35e2976bc29a2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/architecture/orchestration/monitoring-orchestrator.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 18,
                  "endLine": 244,
                  "snippet": {
                    "text": "  resources: [\"*\"]"
                  },
                  "startColumn": 15,
                  "startLine": 244
                }
              }
            }
          ],
          "message": {
            "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "89ca38565c70428b5b353a5b849634cc70b203f8eaec2e1771a1ff1cbd3de8cc4dacc3bf2cf861dd88e7affbec99e8829275dacb835aec8dc2d35e2976bc29a2_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/architecture/orchestration/monitoring-orchestrator.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 14,
                  "endLine": 245,
                  "snippet": {
                    "text": "  verbs: [\"*\"]"
                  },
                  "startColumn": 11,
                  "startLine": 245
                }
              }
            }
          ],
          "message": {
            "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9c238799281faa10057cac73fd5c07b3817403d37096e9be489547b875b500bbe90a688b53c8486f5c093218d3782145dc42b0daa9a9d40c85f5c622484d4d71_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/grafana-dashboards.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 28,
                  "endLine": 216,
                  "snippet": {
                    "text": "          \"title\": \"👨‍👩‍👧‍👦 Parental Control Events\","
                  },
                  "startColumn": 25,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.codacy.generic.security.detect-invisible-unicode"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9c238799281faa10057cac73fd5c07b3817403d37096e9be489547b875b500bbe90a688b53c8486f5c093218d3782145dc42b0daa9a9d40c85f5c622484d4d71_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/grafana-dashboards.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 35,
                  "endLine": 216,
                  "snippet": {
                    "text": "          \"title\": \"👨‍👩‍👧‍👦 Parental Control Events\","
                  },
                  "startColumn": 32,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.codacy.generic.security.detect-invisible-unicode"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "9c238799281faa10057cac73fd5c07b3817403d37096e9be489547b875b500bbe90a688b53c8486f5c093218d3782145dc42b0daa9a9d40c85f5c622484d4d71_2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "observability/grafana-dashboards.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 216,
                  "snippet": {
                    "text": "          \"title\": \"👨‍👩‍👧‍👦 Parental Control Events\","
                  },
                  "startColumn": 39,
                  "startLine": 216
                }
              }
            }
          ],
          "message": {
            "text": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.codacy.generic.security.detect-invisible-unicode"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2d64b18691ca41cd6139a002e4a1259f22bbefe54734ffba275f02515deba446b58ec222936f59d37c74e9b35cfceca44caa1f8d5279b79fb0ea6cff2b780a97_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 34,
                  "snippet": {
                    "text": "        uses: snok/install-poetry@v1"
                  },
                  "startColumn": 9,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2d64b18691ca41cd6139a002e4a1259f22bbefe54734ffba275f02515deba446b58ec222936f59d37c74e9b35cfceca44caa1f8d5279b79fb0ea6cff2b780a97_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 94,
                  "snippet": {
                    "text": "        uses: snok/install-poetry@v1"
                  },
                  "startColumn": 9,
                  "startLine": 94
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "560353e0ce418fcbb5e2a7930617b8b2d716756471d33ca2a42ebc44ccc40d5e63d461dfe708512e58ed66b8291081d9f6441023982b1c8394b1a5eee58472ab_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 130,
                  "snippet": {
                    "text": "        uses: codecov/codecov-action@v4"
                  },
                  "startColumn": 9,
                  "startLine": 130
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "ab9cf2439c6c33b8a846318c85a473e9426dae4d02319fd83b1133d895e057353c9485ffb0181a61ad921e3de2edf0f748e2625ca85df386073e1a75a26f459c_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 47,
                  "endLine": 144,
                  "snippet": {
                    "text": "        uses: aquasecurity/trivy-action@master"
                  },
                  "startColumn": 9,
                  "startLine": 144
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "77d3a9e1b895763c95f8b7fd7bd1e6e7309d9dfc3636201178d2b47b783e899663e11fba33568f767348b4e4e95cbee6529316b2844d233942faa45a47397ccb_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 157,
                  "snippet": {
                    "text": "        uses: gaurav-nelson/bandit-action@v1"
                  },
                  "startColumn": 9,
                  "startLine": 157
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "86f677118bd657485ab5e0f097ed1d016f120519199d70ca212c2d1b4ceb8897433377bc7713bfde613aa2ed0704501e32cdc4ff072abdcbf47c27069d2dbbfc_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 44,
                  "endLine": 172,
                  "snippet": {
                    "text": "        uses: docker/setup-buildx-action@v3"
                  },
                  "startColumn": 9,
                  "startLine": 172
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d5566d563a5152cb93fe7fce5614fb2a60577479fe3c1b5d9c9b549e6295e9c5e0eed558183f15cf0c8ccbd00602a9d320cee4342103f2a4a211b6b063b9fe42_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 175,
                  "snippet": {
                    "text": "        uses: docker/login-action@v3"
                  },
                  "startColumn": 9,
                  "startLine": 175
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "ff957576ff581f104e45a1b79c97c8e68b290dfc0934fc93367f6b797ce4a733c775209799571c8c1ae93cf50072d20023e0652b315556a1f7177a091c2ce302_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 40,
                  "endLine": 182,
                  "snippet": {
                    "text": "        uses: docker/metadata-action@v5"
                  },
                  "startColumn": 9,
                  "startLine": 182
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "19fb310f3b5d05d3b03fc487dc7d83b103ff84d29ce60c79680b0f301a6fd18fcf0319df96a46603d0ff8b40cc179a7b3681a5157468e7debb5bffa354bdf0bb_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 193,
                  "snippet": {
                    "text": "        uses: docker/build-push-action@v5"
                  },
                  "startColumn": 9,
                  "startLine": 193
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3436cc1206430f19ecfecaa751df7901cc8641faeab1c3c43267acc1c98c1ca41e2f5df89058189522377f362d57e522776fe003a0f223a266144108a9f4ca87_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/.github/workflows/ci.yml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 37,
                  "endLine": 229,
                  "snippet": {
                    "text": "        uses: 8398a7/action-slack@v3"
                  },
                  "startColumn": 9,
                  "startLine": 229
                }
              }
            }
          ],
          "message": {
            "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3f78deeda2f576d8f9153128f81122f07190e0d21299035d28feb5ea36c6023b2b42bca986ddb93350c979cc3cfa2a5de04b3733780b07405bca502186d2e62e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/issue_tracker_service.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 56,
                  "endLine": 492,
                  "snippet": {
                    "text": "            hash_object = hashlib.md5(content.encode())"
                  },
                  "startColumn": 27,
                  "startLine": 492
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "3724d08428cd621bfb1bc5f0adef4cfa158355825d83ec422fd4048503a4cb1f406b65b957fbf1f192f8262b529b5c8c9c7f4058ad6c4977770b49a5d01c74b8_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/moderation/cache_manager.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 48,
                  "endLine": 36,
                  "snippet": {
                    "text": "        return hashlib.md5(key_string.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "96854e59ddf60685dc5bfc6cf9accae8f73dff36fe75ad2c811b06424b35d291c8cc13c175a301a6ca583e82be0c2355004cfc328b5e2a2e1ba314e69a797338_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/moderation_cache_manager.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 56,
                  "snippet": {
                    "text": "        return hashlib.md5(key_data.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 56
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a0c616319476363f484d606c76a7c7d88be92ed63da246cc4446bba3f80ba2080d2a7f639f00a61d59fc166e508a14537ff39752facb1fc9a4b53ae12ba09d71_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/core/simple_cache_service.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 129,
                  "snippet": {
                    "text": "        return hashlib.md5(key_data.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 129
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "48b6d0345e6af82140ab0d5bf7db8c783b0331a4e44de5c465cb9fd95e02b5423ae01eb603b6a82d8821741ac73ac42a40ae1b0402deebc78c5d8630f5583c71_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/application/services/parent/unified_monitoring_service.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 104,
                  "snippet": {
                    "text": "        return hashlib.md5(content.encode()).hexdigest()[:16]"
                  },
                  "startColumn": 16,
                  "startLine": 104
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "15632d4cc535e7a16e1c55e0ef315c5a3c42b728e6eb2d5ead1caa9f615840cd65382bddbd259c18cf396847458cafd74d1fb2b4ed11f235fe57b3cdb1e48b1b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/core/domain/entities/audio_stream.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 48,
                  "endLine": 467,
                  "snippet": {
                    "text": "        return hashlib.md5(key_string.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 467
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "604f146b354bf41184ad796584f3bd94a36a6ecf8f4ed27f7fe2cc5b34831922036191e8a6bb497f5f773ba44f0187315db350ab793dbc529d926a1ddc943cab_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/audio_stream.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 48,
                  "endLine": 467,
                  "snippet": {
                    "text": "        return hashlib.md5(key_string.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 467
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "6e377a600c90a257ed93f43318388e5a8e735d0bd33276e3c30cc46ce077b12b86c2379832f9e310c6eebf1b39ab520e37cab17372e09fafc86e76d76cf57302_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 68,
                  "endLine": 228,
                  "snippet": {
                    "text": "        response = requests.get(\"http://safety-service:8000/health\", timeout=10)"
                  },
                  "startColumn": 33,
                  "startLine": 228
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f1ff9011cb59195716f569598063f4fbe4f7aca6535a259135298365904d086118620865e1cbbcf00ffc7a8b72c5c844676e279546b4d32c2dc68a1850541f00_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 54,
                  "endLine": 235,
                  "snippet": {
                    "text": "                \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 17,
                  "startLine": 235
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "13ef809ba6f41c73f2462751f19a69d6fde71dd5801e600068e4488c7ee92378a17875c75f4f254561aab2dcd137196ae80923c67cb223cc3983fd1349a9aadb_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 52,
                  "endLine": 269,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/emotion/health\", timeout=10"
                  },
                  "startColumn": 13,
                  "startLine": 269
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "348b5ad342e8dca85f291db42e94ba86ebd2fb1f8c9ca9823b7be733e1138871e5d7ce6ba58251db84c8263b4c06f74fbd95afc3abbae9f4e0190b9eaad1faae_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 74,
                  "endLine": 278,
                  "snippet": {
                    "text": "        bias_response = requests.get(\"http://ai-service:8000/bias/health\", timeout=10)"
                  },
                  "startColumn": 38,
                  "startLine": 278
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "92a994a6f018752c56e5aa72bd0c63fde38650c0fb03571acf26feb35b8d8840352806c41bebaa3ae8fcb4af74553e2e62a838f46e398d240a11d037a052e2e0_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 287,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/generate\","
                  },
                  "startColumn": 13,
                  "startLine": 287
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "40d1a08aa646d45ce1d033b80a46b87b55a6c63a09ae518fff4f923bfde2c211e77542380fb2e632e453f7bb1518e25e12740e4473be0d34ca1787b4ddcfe9e6_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 76,
                  "endLine": 339,
                  "snippet": {
                    "text": "        response = requests.get(\"http://child-service:8000/parental/health\", timeout=10)"
                  },
                  "startColumn": 33,
                  "startLine": 339
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "8eac2887d52e35b415353bdecd4116552a4739ad46048c50415821450be2425c2ad5fc377bbca6024d024af1168b81d38ed767b075e18ebec1cd940838c63dd2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 63,
                  "endLine": 344,
                  "snippet": {
                    "text": "                \"http://child-service:8000/conversation/start\","
                  },
                  "startColumn": 17,
                  "startLine": 344
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "be792fd075095dfc478ccc14077264442e515f2978de57280530e07a6a24b6fe71c938052b366c62284dbbab69ef2dbc2242c83792a0856fc5af25ea478b821e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 387,
                  "snippet": {
                    "text": "                \"http://ai-service:8000/chat\", json=test, timeout=15"
                  },
                  "startColumn": 17,
                  "startLine": 387
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "be792fd075095dfc478ccc14077264442e515f2978de57280530e07a6a24b6fe71c938052b366c62284dbbab69ef2dbc2242c83792a0856fc5af25ea478b821e_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 434,
                  "snippet": {
                    "text": "                \"http://ai-service:8000/chat\","
                  },
                  "startColumn": 17,
                  "startLine": 434
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "92a994a6f018752c56e5aa72bd0c63fde38650c0fb03571acf26feb35b8d8840352806c41bebaa3ae8fcb4af74553e2e62a838f46e398d240a11d037a052e2e0_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 485,
                  "snippet": {
                    "text": "                \"http://ai-service:8000/generate\","
                  },
                  "startColumn": 17,
                  "startLine": 485
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "537019ab0fd613c2c62b166787a9baf18fcb339680d5d057c7530dc17458216a3b7f18172a6e47c3a779376da46aec53c6d684c03406768933d9cacc0ddaf49e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 62,
                  "endLine": 597,
                  "snippet": {
                    "text": "            \"http://child-service:8000/test/database-failure\","
                  },
                  "startColumn": 13,
                  "startLine": 597
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f1ff9011cb59195716f569598063f4fbe4f7aca6535a259135298365904d086118620865e1cbbcf00ffc7a8b72c5c844676e279546b4d32c2dc68a1850541f00_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 54,
                  "endLine": 605,
                  "snippet": {
                    "text": "                \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 17,
                  "startLine": 605
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f1ff9011cb59195716f569598063f4fbe4f7aca6535a259135298365904d086118620865e1cbbcf00ffc7a8b72c5c844676e279546b4d32c2dc68a1850541f00_2"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 635,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 13,
                  "startLine": 635
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b13e81f0a5cbff3c3a19881f39d3a0f559699ba8e9a0b10254a21b61e24bcff4974a00d5bd81aa49b9ea1e550913f00725b0a6022091ce815cf369b6a85ccd67_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 655,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/validate\","
                  },
                  "startColumn": 13,
                  "startLine": 655
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f1ff9011cb59195716f569598063f4fbe4f7aca6535a259135298365904d086118620865e1cbbcf00ffc7a8b72c5c844676e279546b4d32c2dc68a1850541f00_3"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 679,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/moderate\","
                  },
                  "startColumn": 13,
                  "startLine": 679
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "483ec208e10aa1f7b5cfc38f3a144a369eaa72a60a8ee42d338d5b973f89681857ac5c8ef1818b681af46c9015f269ecd0e047155743ff9a508f216f60e7c230_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 695,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/fallback/status\", timeout=10"
                  },
                  "startColumn": 13,
                  "startLine": 695
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7ae879df4959644db61e02b353bc16111f02bcfd464619a22d60a65a86c41dd4d398c42bb99cce6b534a1d19ace3ad24d69dc9805150b126f58cf35e39cc80c3_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 49,
                  "endLine": 719,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/restore\","
                  },
                  "startColumn": 13,
                  "startLine": 719
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "528732f157b20e601b90f05fe4a4623b43cf7c8b16a453e5df560184b1ff809f6c33183a01213f4f9be80a7c8a98d6db806b8e6aa86cc12f98d78d9db8360b6e_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 45,
                  "endLine": 727,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/restore\","
                  },
                  "startColumn": 13,
                  "startLine": 727
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "f6af8b5a5a296dd81b15f7fe4c6aed8f7693e381c8d93f375e953718bcb878e27abcce2026b3746a58786fb25b8c01596a56a9c2ad1759f0836c542dfee8ca49_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 48,
                  "endLine": 735,
                  "snippet": {
                    "text": "            \"http://child-service:8000/restore\","
                  },
                  "startColumn": 13,
                  "startLine": 735
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "8a949ab598d0eea1c6993c049fab10a7c53794a0c4556da7fb76eaee9dccc42cf149f4336247ae1b258101b232e58a2a40d3db15d1fa33d4a8afde8f08d7b432_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 53,
                  "endLine": 767,
                  "snippet": {
                    "text": "            \"http://safety-service:8000/cache/clear\","
                  },
                  "startColumn": 13,
                  "startLine": 767
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "8f82f60d9c41c8bda494a46052b1528b16489a5e4da6987cd35ab3c469399f779332b12c0c8f4cb9de553644eb80bb02a1bbefd2507193279977eaa51ddea26b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/domain/entities/child_safety_chaos.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 793,
                  "snippet": {
                    "text": "            \"http://ai-service:8000/models/reset\","
                  },
                  "startColumn": 13,
                  "startLine": 793
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2f6b42878b2ebef4b361d7c8317fc38a17f312e485ac3c5b75e4940ff92df1982b2d6cb7a9461b540d64803959dff1584ee82bfb6706edf2491111c320ed29d2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/api/high_performance_api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 65,
                  "endLine": 134,
                  "snippet": {
                    "text": "            allow_origins=self.config.get(\"cors_origins\", [\"*\"]),"
                  },
                  "startColumn": 27,
                  "startLine": 134
                }
              }
            }
          ],
          "message": {
            "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "329ef185d9c4b32d374d64079df1a0eed950eb3981d9b27f5eb4cc28a412625d243bbfca9ea58ba1748128c1522ee18fc1b709bb329b54bd02e55d484f2e9107_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/advanced_ai_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 62,
                  "endLine": 387,
                  "snippet": {
                    "text": "        return hashlib.md5(\"_\".join(key_components).encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 387
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "7b8ef6e0cfb80a3331076046346c771d7966d101b57614ecde0bca34ac863c052899dddc282f8dd704f335418887be2c38de427595d29bab7d76691b22eb800a_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/external_services/audio_io.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 43,
                  "endLine": 147,
                  "snippet": {
                    "text": "            os.chmod(self.temp_dir, 0o755)"
                  },
                  "startColumn": 13,
                  "startLine": 147
                }
              }
            }
          ],
          "message": {
            "text": "These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.audit.insecure-file-permissions.insecure-file-permissions"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b2415e81f68c89e8e3f781226e45aca7abe28064dc9c61e1ca319f360bb0307224090e9b2aba7d0b281f73f0c07cf5938fe914b10922226091fe0ef7a70bee6a_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/graphql/dataloaders.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 49,
                  "endLine": 247,
                  "snippet": {
                    "text": "        key_hash = hashlib.md5(key_str.encode()).hexdigest()[:8]"
                  },
                  "startColumn": 20,
                  "startLine": 247
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "894babc54257fbc79560fde2f6601f0ba1abed58386754312c285ef2cd1b486e82168f843cfcb9ae8dd16517e83a911f770415ea6f7a84eccace5341234205ba_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/microservices/service_orchestrator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 391,
                  "snippet": {
                    "text": "        hash_value = int(hashlib.md5(client_ip.encode()).hexdigest(), 16)"
                  },
                  "startColumn": 26,
                  "startLine": 391
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "61a53e4d2f973a7f0d46f4f613d439c64868f8d799d21930d78be45845f31ee3d8e940e14ccb5d8e27d7126dfe6c276dcfbaeb489f7115eeb2facefbbac348d9_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/advanced_content_filter.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 50,
                  "endLine": 643,
                  "snippet": {
                    "text": "        return hashlib.md5(cache_string.encode()).hexdigest()"
                  },
                  "startColumn": 16,
                  "startLine": 643
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "b5ee4da343f6b2dab78e4140fd87901a7301840723b8286c941fda3ed411b20b65701d371838b0884f86bd1955646b8a543495a57e1f0f7557f5c722a6e393cd_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/emergency_response.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 55,
                  "endLine": 282,
                  "snippet": {
                    "text": "        hash_output = hashlib.md5(hash_input.encode()).hexdigest()[:8]"
                  },
                  "startColumn": 23,
                  "startLine": 282
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "29c8df38b69a648743a8b27d8a0ac8e0efa4d5a78cd50715683a5deab769549a07c446e7216b59cbf39f5ba258688ee06f1079d2eb89a2da245a736b7d369b28_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 10,
                  "endLine": 157,
                  "snippet": {
                    "text": "        cipher = Cipher(\n            algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend()\n        )"
                  },
                  "startColumn": 18,
                  "startLine": 155
                }
              }
            }
          ],
          "message": {
            "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "29c8df38b69a648743a8b27d8a0ac8e0efa4d5a78cd50715683a5deab769549a07c446e7216b59cbf39f5ba258688ee06f1079d2eb89a2da245a736b7d369b28_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/enhanced_security.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 10,
                  "endLine": 199,
                  "snippet": {
                    "text": "        cipher = Cipher(\n            algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend()\n        )"
                  },
                  "startColumn": 18,
                  "startLine": 197
                }
              }
            }
          ],
          "message": {
            "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "38b4a12b1c0e178deb4ca331c4e4aef326ac42575437a4d1d8aa0362cafbc0acf4057bb86b240ebf7c02a201dcbe647cef310159853d5d58dea33e1d3211a58b_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infrastructure/security/rate_limiter.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 26,
                  "endLine": 72,
                  "snippet": {
                    "text": "        return f\"ip:{ip}\""
                  },
                  "startColumn": 9,
                  "startLine": 72
                }
              }
            }
          ],
          "message": {
            "text": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.flask.security.audit.directly-returned-format-string.directly-returned-format-string"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "d2fb1c6f1d9c651569e75a6afc7a73cf44bcec73ceef475e1ebe699f02e0ebee79809e9f6cd32fcb3af0dd9d7604ac8c7a42ac8954d1b5fbddc9d486f1731ef6_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/graphql/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 28,
                  "endLine": 29,
                  "snippet": {
                    "text": "        allow_origins=[\"*\"],"
                  },
                  "startColumn": 23,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "db210f2203d17b5c7d29b03456440452db02cf99de283d1aaf77a85c9fa030eef565d4635e827c1ab6c3e885c60749fd956355c2bacd8d2f8523a6e24f79f3f4_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/presentation/api/rest/production_api.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 24,
                  "endLine": 153,
                  "snippet": {
                    "text": "    allow_origins=[\"*\"],  # Configure properly for production"
                  },
                  "startColumn": 19,
                  "startLine": 153
                }
              }
            }
          ],
          "message": {
            "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
          },
          "properties": {},
          "ruleId": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors"
        }
      ],
      "tool": {
        "driver": {
          "name": "Semgrep OSS",
          "rules": null,
          "semanticVersion": "1.78.0"
        }
      }
    },
    {
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/"
        }
      },
      "results": [
        {
          "level": "error",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: aiohttp@3.9.2"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Package: aiohttp\nInstalled Version: 3.9.2\nVulnerability CVE-2024-30251\nSeverity: HIGH\nFixed Version: 3.9.4\nLink: [CVE-2024-30251](https://avd.aquasec.com/nvd/cve-2024-30251)"
          },
          "ruleId": "CVE-2024-30251",
          "ruleIndex": 0
        },
        {
          "level": "warning",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: aiohttp@3.9.2"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Package: aiohttp\nInstalled Version: 3.9.2\nVulnerability CVE-2024-27306\nSeverity: MEDIUM\nFixed Version: 3.9.4\nLink: [CVE-2024-27306](https://avd.aquasec.com/nvd/cve-2024-27306)"
          },
          "ruleId": "CVE-2024-27306",
          "ruleIndex": 1
        },
        {
          "level": "warning",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: aiohttp@3.9.2"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            }
          ],
          "message": {
            "text": "Package: aiohttp\nInstalled Version: 3.9.2\nVulnerability CVE-2024-52304\nSeverity: MEDIUM\nFixed Version: 3.10.11\nLink: [CVE-2024-52304](https://avd.aquasec.com/nvd/cve-2024-52304)"
          },
          "ruleId": "CVE-2024-52304",
          "ruleIndex": 2
        },
        {
          "level": "warning",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: black@23.11.0"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 97,
                  "startColumn": 1,
                  "startLine": 97
                }
              }
            }
          ],
          "message": {
            "text": "Package: black\nInstalled Version: 23.11.0\nVulnerability CVE-2024-21503\nSeverity: MEDIUM\nFixed Version: 24.3.0\nLink: [CVE-2024-21503](https://avd.aquasec.com/nvd/cve-2024-21503)"
          },
          "ruleId": "CVE-2024-21503",
          "ruleIndex": 3
        },
        {
          "level": "note",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: cryptography@43.0.3"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 51,
                  "startColumn": 1,
                  "startLine": 51
                }
              }
            }
          ],
          "message": {
            "text": "Package: cryptography\nInstalled Version: 43.0.3\nVulnerability CVE-2024-12797\nSeverity: LOW\nFixed Version: 44.0.1\nLink: [CVE-2024-12797](https://avd.aquasec.com/nvd/cve-2024-12797)"
          },
          "ruleId": "CVE-2024-12797",
          "ruleIndex": 4
        },
        {
          "level": "error",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: python-multipart@0.0.7"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 70,
                  "startColumn": 1,
                  "startLine": 70
                }
              }
            }
          ],
          "message": {
            "text": "Package: python-multipart\nInstalled Version: 0.0.7\nVulnerability CVE-2024-53981\nSeverity: HIGH\nFixed Version: 0.0.18\nLink: [CVE-2024-53981](https://avd.aquasec.com/nvd/cve-2024-53981)"
          },
          "ruleId": "CVE-2024-53981",
          "ruleIndex": 5
        },
        {
          "level": "warning",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: requests@2.31.0"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 118,
                  "startColumn": 1,
                  "startLine": 118
                }
              }
            }
          ],
          "message": {
            "text": "Package: requests\nInstalled Version: 2.31.0\nVulnerability CVE-2024-35195\nSeverity: MEDIUM\nFixed Version: 2.32.0\nLink: [CVE-2024-35195](https://avd.aquasec.com/nvd/cve-2024-35195)"
          },
          "ruleId": "CVE-2024-35195",
          "ruleIndex": 6
        },
        {
          "level": "warning",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: requests@2.31.0"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 118,
                  "startColumn": 1,
                  "startLine": 118
                }
              }
            }
          ],
          "message": {
            "text": "Package: requests\nInstalled Version: 2.31.0\nVulnerability CVE-2024-47081\nSeverity: MEDIUM\nFixed Version: 2.32.4\nLink: [CVE-2024-47081](https://avd.aquasec.com/nvd/cve-2024-47081)"
          },
          "ruleId": "CVE-2024-47081",
          "ruleIndex": 7
        },
        {
          "level": "note",
          "locations": [
            {
              "message": {
                "text": "requirements.txt: sentry-sdk@1.38.0"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 78,
                  "startColumn": 1,
                  "startLine": 78
                }
              }
            }
          ],
          "message": {
            "text": "Package: sentry-sdk\nInstalled Version: 1.38.0\nVulnerability CVE-2024-40647\nSeverity: LOW\nFixed Version: 2.8.0, 1.45.1\nLink: [CVE-2024-40647](https://avd.aquasec.com/nvd/cve-2024-40647)"
          },
          "ruleId": "CVE-2024-40647",
          "ruleIndex": 8
        }
      ],
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": null,
          "version": "0.59.1"
        }
      }
    },
    {
      "results": [],
      "tool": {
        "driver": {
          "name": "dartanalyzer",
          "rules": null
        }
      }
    },
    {
      "artifacts": [
        {
          "location": {
            "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/.codacy/tools-configs/eslint.config.mjs"
          }
        },
        {
          "location": {
            "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
          }
        }
      ],
      "results": [
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 42,
                  "endLine": 2,
                  "startColumn": 35,
                  "startLine": 2
                }
              }
            }
          ],
          "message": {
            "text": "'require' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 7,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 4
                }
              }
            }
          ],
          "message": {
            "text": "'module' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 24,
                  "endLine": 7,
                  "startColumn": 17,
                  "startLine": 7
                }
              }
            }
          ],
          "message": {
            "text": "'process' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 19,
                  "endLine": 8,
                  "startColumn": 12,
                  "startLine": 8
                }
              }
            }
          ],
          "message": {
            "text": "'process' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 19,
                  "endLine": 9,
                  "startColumn": 12,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "'process' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1,
                  "uri": "file:///mnt/c/Users/jaafa/Desktop/5555/ai-teddy/tests/e2e/playwright.config.js"
                },
                "region": {
                  "endColumn": 34,
                  "endLine": 45,
                  "startColumn": 27,
                  "startLine": 45
                }
              }
            }
          ],
          "message": {
            "text": "'process' is not defined."
          },
          "ruleId": "no-undef",
          "ruleIndex": 0
        }
      ],
      "tool": {
        "driver": {
          "informationUri": "https://eslint.org",
          "name": "ESLint",
          "rules": null,
          "version": "8.57.0"
        }
      }
    }
  ],
  "version": "2.1.0"
}