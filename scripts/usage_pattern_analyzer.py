#!/usr/bin/env python3
"""
Usage Pattern Analyzer
ุฃุฏุงุฉ ูุญุต ุฃููุงุท ุงูุงุณุชุฎุฏุงู ุงููุนูู ูููููุงุช ูุชุญุฏูุฏ ูุง ูุญุชุงุฌู ุงููุดุฑูุน
"""

import ast
import os
import re
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Set, Tuple


class UsagePatternAnalyzer:
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.usage_data = {
            "timestamp": datetime.now().isoformat(),
            "file_references": defaultdict(list),  # ูู ูุณุชูุฑุฏ ูู
            "import_patterns": defaultdict(set),  # ุฃููุงุท ุงูุงุณุชูุฑุงุฏ
            "actual_usage": {},  # ุงูุงุณุชุฎุฏุงู ุงููุนูู
            "unused_files": [],  # ุงููููุงุช ุบูุฑ ุงููุณุชุฎุฏูุฉ
            "critical_files": [],  # ุงููููุงุช ุงูุญุฑุฌุฉ
            "merge_recommendations": {},  # ุชูุตูุงุช ุงูุฏูุฌ
        }

    def scan_all_python_files(self) -> List[Path]:
        """ูุญุต ุฌููุน ูููุงุช Python ูู ุงููุดุฑูุน"""
        python_files = []

        # ูุญุต src/ ู api/ ู frontend/ ู tests/
        scan_dirs = ["src", "api", "frontend", "tests", "scripts"]

        for scan_dir in scan_dirs:
            dir_path = self.base_path / scan_dir
            if dir_path.exists():
                python_files.extend(dir_path.rglob("*.py"))

        return python_files

    def extract_imports_from_file(self, file_path: Path) -> Dict:
        """ุงุณุชุฎุฑุงุฌ ุงูุงุณุชูุฑุงุฏุงุช ูู ููู Python"""
        imports_data = {
            "file_path": str(file_path),
            "imports": [],
            "from_imports": [],
            "relative_imports": [],
            "service_imports": [],
        }

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            # ุงุณุชุฎุฏุงู regex ูุงุณุชุฎุฑุงุฌ ุงูุงุณุชูุฑุงุฏุงุช
            import_patterns = [
                r"^import\s+([^\s#]+)",  # import module
                r"^from\s+([^\s]+)\s+import\s+([^#]+)",  # from module import something
            ]

            lines = content.split("\n")
            for line_num, line in enumerate(lines, 1):
                line = line.strip()

                # import statements
                if line.startswith("import "):
                    match = re.match(r"^import\s+([^\s#]+)", line)
                    if match:
                        module = match.group(1)
                        imports_data["imports"].append(
                            {"module": module, "line": line_num, "full_line": line}
                        )

                # from ... import statements
                elif line.startswith("from "):
                    match = re.match(r"^from\s+([^\s]+)\s+import\s+([^#]+)", line)
                    if match:
                        module = match.group(1)
                        imports = match.group(2).strip()
                        imports_data["from_imports"].append(
                            {
                                "module": module,
                                "imports": imports,
                                "line": line_num,
                                "full_line": line,
                            }
                        )

                        # ูุญุต ุงุณุชูุฑุงุฏ ุงูุฎุฏูุงุช
                        if "service" in module.lower() or "service" in imports.lower():
                            imports_data["service_imports"].append(
                                {"module": module, "imports": imports, "line": line_num}
                            )

        except Exception as e:
            print(f"ุฎุทุฃ ูู ุชุญููู {file_path}: {e}")

        return imports_data

    def analyze_service_usage_patterns(self) -> Dict:
        """ุชุญููู ุฃููุงุท ุงุณุชุฎุฏุงู ุงูุฎุฏูุงุช"""
        print("๐ ุชุญููู ุฃููุงุท ุงุณุชุฎุฏุงู ุงูุฎุฏูุงุช...")

        # ูุญุต ุงููููุงุช ุงููููููุฉ
        deprecated_services = self.base_path / "deprecated" / "services"
        if not deprecated_services.exists():
            print("โ ูุฌูุฏ deprecated/services ุบูุฑ ููุฌูุฏ!")
            return {}

        # ุฌูุน ุฃุณูุงุก ุฌููุน ูููุงุช ุงูุฎุฏูุงุช
        service_files = {}
        for group_dir in deprecated_services.iterdir():
            if group_dir.is_dir():
                for service_file in group_dir.glob("*.py"):
                    service_name = service_file.stem
                    service_files[service_name] = {
                        "path": str(service_file),
                        "group": group_dir.name,
                        "references": [],
                        "usage_count": 0,
                    }

        print(f"  ๐ ูููุงุช ุงูุฎุฏูุงุช ุงูููุชุดูุฉ: {len(service_files)}")

        # ูุญุต ุฌููุน ูููุงุช Python ููุจุญุซ ุนู ุงููุฑุงุฌุน
        python_files = self.scan_all_python_files()
        print(f"  ๐ ูููุงุช Python ูููุญุต: {len(python_files)}")

        for py_file in python_files:
            imports_data = self.extract_imports_from_file(py_file)

            # ูุญุต ุงููุฑุงุฌุน ููู ุฎุฏูุฉ
            for service_name, service_info in service_files.items():
                file_content = ""
                try:
                    with open(py_file, "r", encoding="utf-8") as f:
                        file_content = f.read()
                except:
                    continue

                # ุงูุจุญุซ ุนู ูุฑุงุฌุน ุงูุฎุฏูุฉ
                references_found = []

                # ุงูุจุญุซ ูู ุงูุงุณุชูุฑุงุฏุงุช
                for imp in imports_data["imports"] + imports_data["from_imports"]:
                    if service_name.lower() in str(imp).lower():
                        references_found.append(
                            {
                                "type": "import",
                                "line": imp.get("line", 0),
                                "content": imp.get("full_line", str(imp)),
                            }
                        )

                # ุงูุจุญุซ ูู ุงููุญุชูู ุงูุนุงู
                if service_name in file_content:
                    lines = file_content.split("\n")
                    for line_num, line in enumerate(lines, 1):
                        if service_name in line and not line.strip().startswith("#"):
                            references_found.append(
                                {
                                    "type": "usage",
                                    "line": line_num,
                                    "content": line.strip()[:100],  # ุฃูู 100 ุญุฑู
                                }
                            )

                if references_found:
                    service_files[service_name]["references"].append(
                        {"file": str(py_file), "references": references_found}
                    )
                    service_files[service_name]["usage_count"] += len(references_found)

        return service_files

    def classify_services_by_usage(self, service_usage: Dict) -> Dict:
        """ุชุตููู ุงูุฎุฏูุงุช ุญุณุจ ุงูุงุณุชุฎุฏุงู"""
        print("๐ ุชุตููู ุงูุฎุฏูุงุช ุญุณุจ ุงูุงุณุชุฎุฏุงู...")

        classification = {
            "heavily_used": [],  # ูุณุชุฎุฏูุฉ ุจูุซุฑุฉ (5+ ูุฑุงุฌุน)
            "moderately_used": [],  # ูุณุชุฎุฏูุฉ ูุชูุณุท (2-4 ูุฑุงุฌุน)
            "lightly_used": [],  # ูุณุชุฎุฏูุฉ ููููุงู (1 ูุฑุฌุน)
            "unused": [],  # ุบูุฑ ูุณุชุฎุฏูุฉ (0 ูุฑุงุฌุน)
            "test_only": [],  # ูุณุชุฎุฏูุฉ ูู ุงูุงุฎุชุจุงุฑุงุช ููุท
        }

        for service_name, service_data in service_usage.items():
            usage_count = service_data["usage_count"]
            references = service_data["references"]

            # ูุญุต ูุง ุฅุฐุง ูุงูุช ูุณุชุฎุฏูุฉ ูู ุงูุงุฎุชุจุงุฑุงุช ููุท
            test_only = True
            for ref in references:
                if "test" not in ref["file"].lower():
                    test_only = False
                    break

            if usage_count == 0:
                classification["unused"].append(service_name)
            elif test_only and usage_count > 0:
                classification["test_only"].append(service_name)
            elif usage_count >= 5:
                classification["heavily_used"].append(service_name)
            elif usage_count >= 2:
                classification["moderately_used"].append(service_name)
            else:
                classification["lightly_used"].append(service_name)

        # ุทุจุงุนุฉ ุงููุชุงุฆุฌ
        for category, services in classification.items():
            if services:
                print(f"  {category}: {len(services)} ุฎุฏูุงุช")
                for service in services[:3]:  # ุฃูู 3 ููุท
                    usage_count = service_usage[service]["usage_count"]
                    print(f"    - {service} ({usage_count} ูุฑุงุฌุน)")
                if len(services) > 3:
                    print(f"    ... ู{len(services) - 3} ุฃุฎุฑู")

        return classification

    def generate_smart_merge_recommendations(
        self, service_usage: Dict, classification: Dict
    ) -> Dict:
        """ุฅูุดุงุก ุชูุตูุงุช ุฏูุฌ ุฐููุฉ"""
        print("๐ฏ ุฅูุดุงุก ุชูุตูุงุช ุงูุฏูุฌ ุงูุฐูู...")

        recommendations = {
            "primary_services": {},  # ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ ููู ูุฌููุนุฉ
            "merge_into_primary": {},  # ูุง ููุฏูุฌ ูู ุงูุฃุณุงุณู
            "move_to_correct_location": {},  # ูุง ููููู ููููุงู ุงูุตุญูุญ
            "safe_to_delete": [],  # ุขูู ููุญุฐู
            "needs_review": [],  # ูุญุชุงุฌ ูุฑุงุฌุนุฉ
        }

        # ุชุฌููุน ุงูุฎุฏูุงุช ุญุณุจ ุงููุฌููุนุฉ
        groups = defaultdict(list)
        for service_name, service_data in service_usage.items():
            group = service_data["group"]
            groups[group].append((service_name, service_data))

        for group_name, group_services in groups.items():
            print(f"\n๐ ุชุญููู ูุฌููุนุฉ: {group_name}")

            # ุชุฑุชูุจ ุงูุฎุฏูุงุช ุญุณุจ ุงูุงุณุชุฎุฏุงู
            sorted_services = sorted(
                group_services, key=lambda x: x[1]["usage_count"], reverse=True
            )

            if not sorted_services:
                continue

            # ุงุฎุชูุงุฑ ุงูุฎุฏูุฉ ุงูุฃุณุงุณูุฉ (ุงูุฃูุซุฑ ุงุณุชุฎุฏุงูุงู)
            primary_service_name, primary_service_data = sorted_services[0]

            # ุฅุฐุง ูุงูุช ุงูุฎุฏูุฉ ุงูุฃุณุงุณูุฉ ุบูุฑ ูุณุชุฎุฏูุฉุ ุงุจุญุซ ุนู ุจุฏูู
            if primary_service_data["usage_count"] == 0:
                # ุงุจุญุซ ุนู ุฃู ุฎุฏูุฉ ูุณุชุฎุฏูุฉ ูู ุงููุฌููุนุฉ
                used_services = [s for s in sorted_services if s[1]["usage_count"] > 0]
                if used_services:
                    primary_service_name, primary_service_data = used_services[0]
                else:
                    # ูู ุงูุฎุฏูุงุช ุบูุฑ ูุณุชุฎุฏูุฉ - ุงุฎุชุฑ ุฃูู ูุงุญุฏุฉ
                    pass

            recommendations["primary_services"][group_name] = {
                "service": primary_service_name,
                "usage_count": primary_service_data["usage_count"],
                "path": primary_service_data["path"],
            }

            print(
                f"  ๐ฏ ุงูุฎุฏูุฉ ุงูุฃุณุงุณูุฉ: {primary_service_name} ({primary_service_data['usage_count']} ูุฑุงุฌุน)"
            )

            # ุชุตููู ุจุงูู ุงูุฎุฏูุงุช
            for service_name, service_data in sorted_services[1:]:
                if service_data["usage_count"] == 0:
                    recommendations["safe_to_delete"].append(
                        {
                            "service": service_name,
                            "group": group_name,
                            "reason": "ุบูุฑ ูุณุชุฎุฏูุฉ ููุงุฆูุงู",
                        }
                    )
                    print(f"    ๐๏ธ  ููุญุฐู: {service_name} (ุบูุฑ ูุณุชุฎุฏู)")

                elif service_data["usage_count"] <= 2:
                    recommendations["merge_into_primary"].setdefault(
                        group_name, []
                    ).append(
                        {
                            "service": service_name,
                            "usage_count": service_data["usage_count"],
                            "reason": "ุงุณุชุฎุฏุงู ููููุ ูููู ุฏูุฌู",
                        }
                    )
                    print(
                        f"    ๐ ููุฏูุฌ: {service_name} ({service_data['usage_count']} ูุฑุงุฌุน)"
                    )

                else:
                    recommendations["needs_review"].append(
                        {
                            "service": service_name,
                            "group": group_name,
                            "usage_count": service_data["usage_count"],
                            "reason": "ุงุณุชุฎุฏุงู ูุซูุฑุ ูุญุชุงุฌ ูุฑุงุฌุนุฉ ูุฏููุฉ",
                        }
                    )
                    print(
                        f"    ๐ ูุฑุงุฌุนุฉ: {service_name} ({service_data['usage_count']} ูุฑุงุฌุน)"
                    )

        return recommendations

    def execute_usage_based_organization(self, recommendations: Dict) -> Dict:
        """ุชูููุฐ ุงูุชูุธูู ุงููุจูู ุนูู ุงูุงุณุชุฎุฏุงู"""
        print("\n๐ ุชูููุฐ ุงูุชูุธูู ุงููุจูู ุนูู ุงูุงุณุชุฎุฏุงู...")

        results = {
            "files_deleted": 0,
            "files_merged": 0,
            "files_moved": 0,
            "primary_services_kept": 0,
            "errors": [],
        }

        # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ
        unused_dir = self.base_path / "deleted" / "unused_services"
        unused_dir.mkdir(parents=True, exist_ok=True)

        try:
            # 1. ููู ุงูุฎุฏูุงุช ุบูุฑ ุงููุณุชุฎุฏูุฉ ููุญุฐู
            for item in recommendations["safe_to_delete"]:
                service_name = item["service"]
                group_name = item["group"]

                source_path = (
                    self.base_path
                    / "deprecated"
                    / "services"
                    / group_name
                    / f"{service_name}.py"
                )
                if source_path.exists():
                    target_path = unused_dir / f"{service_name}.py"
                    source_path.rename(target_path)
                    results["files_deleted"] += 1
                    print(f"  ๐๏ธ  ููู ููุญุฐู: {service_name}")

            # 2. ุงูุงุญุชูุงุธ ุจุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ ูู ููุงููุง ุงูุตุญูุญ
            for group_name, primary_info in recommendations["primary_services"].items():
                service_name = primary_info["service"]

                # ุชุญุฏูุฏ ุงูููุงู ุงูุตุญูุญ ุญุณุจ Clean Architecture
                target_location = self._get_clean_architecture_location(group_name)
                source_path = (
                    self.base_path
                    / "deprecated"
                    / "services"
                    / group_name
                    / f"{service_name}.py"
                )
                target_path = self.base_path / target_location / f"{service_name}.py"

                if source_path.exists():
                    target_path.parent.mkdir(parents=True, exist_ok=True)
                    source_path.rename(target_path)
                    results["primary_services_kept"] += 1
                    print(f"  โ ุงุญุชูุธ ุจู: {service_name} โ {target_location}")

            # 3. ุฏูุฌ ุงูุฎุฏูุงุช ุงูููููุฉ ุงูุงุณุชุฎุฏุงู (ูุนุงูุฌุฉ ูุงุญูุฉ)
            for group_name, merge_list in recommendations["merge_into_primary"].items():
                for item in merge_list:
                    service_name = item["service"]
                    # TODO: ุฏูุฌ ูุนูู ูููุญุชูู
                    print(f"  ๐ ุณูุชู ุฏูุฌ: {service_name} (TODO)")
                    results["files_merged"] += 1

        except Exception as e:
            error_msg = f"ุฎุทุฃ ูู ุงูุชูุธูู: {str(e)}"
            results["errors"].append(error_msg)
            print(f"โ {error_msg}")

        return results

    def _get_clean_architecture_location(self, group_name: str) -> str:
        """ุชุญุฏูุฏ ุงูููุงู ุงูุตุญูุญ ูู Clean Architecture"""
        locations = {
            "ai_services": "src/application/services/ai",
            "audio_services": "src/application/services/core",
            "cache_services": "src/infrastructure/services/data",
            "monitoring_services": "src/infrastructure/services/monitoring",
        }
        return locations.get(group_name, "src/application/services/core")

    def generate_usage_analysis_report(
        self,
        service_usage: Dict,
        classification: Dict,
        recommendations: Dict,
        results: Dict,
    ) -> str:
        """ุฅูุดุงุก ุชูุฑูุฑ ุชุญููู ุงูุงุณุชุฎุฏุงู"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        report = f"""
# ๐ ุชูุฑูุฑ ุชุญููู ุฃููุงุท ุงูุงุณุชุฎุฏุงู ููุฎุฏูุงุช
**ุงูุชุงุฑูุฎ**: {timestamp}
**ุงููุญูู**: UsagePatternAnalyzer v1.0

## ๐ฏ ุงููุฏู
ุชุญุฏูุฏ ุงููููุงุช ุงูุชู ูุญุชุงุฌูุง ุงููุดุฑูุน ูุนูุงู ูุงูุฏูุฌ ุงูุฐูู ุจูุงุกู ุนูู ุงูุงุณุชุฎุฏุงู ุงููุนูู.

## ๐ ุฅุญุตุงุฆูุงุช ุงูุงุณุชุฎุฏุงู

### ุชุตููู ุงูุฎุฏูุงุช:
- **ูุณุชุฎุฏูุฉ ุจูุซุฑุฉ** (5+ ูุฑุงุฌุน): {len(classification['heavily_used'])} ุฎุฏูุงุช
- **ูุณุชุฎุฏูุฉ ูุชูุณุท** (2-4 ูุฑุงุฌุน): {len(classification['moderately_used'])} ุฎุฏูุงุช  
- **ูุณุชุฎุฏูุฉ ููููุงู** (1 ูุฑุฌุน): {len(classification['lightly_used'])} ุฎุฏูุงุช
- **ุบูุฑ ูุณุชุฎุฏูุฉ**: {len(classification['unused'])} ุฎุฏูุงุช
- **ุงุฎุชุจุงุฑุงุช ููุท**: {len(classification['test_only'])} ุฎุฏูุงุช

## ๐ฏ ุชูุตูุงุช ุงูุฏูุฌ ุงูุฐูู

"""

        # ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ ุงููุญุชูุธ ุจูุง
        report += f"""
### โ ุงูุฎุฏูุงุช ุงูุฃุณุงุณูุฉ ุงููุญุชูุธ ุจูุง
"""
        for group, primary in recommendations["primary_services"].items():
            report += f"""
#### {group.replace('_', ' ').title()}
- **ุงูุฎุฏูุฉ ุงูุฃุณุงุณูุฉ**: `{primary['service']}`
- **ุนุฏุฏ ุงููุฑุงุฌุน**: {primary['usage_count']}
- **ุงููุณุงุฑ ุงูุฌุฏูุฏ**: `{self._get_clean_architecture_location(group)}/{primary['service']}.py`
"""

        # ุงูุฎุฏูุงุช ุงููุญุฐููุฉ
        if recommendations["safe_to_delete"]:
            report += f"""
### ๐๏ธ ุงูุฎุฏูุงุช ุงููุญุฐููุฉ (ุบูุฑ ูุณุชุฎุฏูุฉ)
"""
            for item in recommendations["safe_to_delete"]:
                report += f"- `{item['service']}` ({item['reason']})\n"

        # ุงูุฎุฏูุงุช ุงููุฏููุฌุฉ
        if recommendations["merge_into_primary"]:
            report += f"""
### ๐ ุงูุฎุฏูุงุช ููุฏูุฌ
"""
            for group, merge_list in recommendations["merge_into_primary"].items():
                report += f"""
#### {group.replace('_', ' ').title()}
"""
                for item in merge_list:
                    report += f"- `{item['service']}` ({item['usage_count']} ูุฑุงุฌุน) - {item['reason']}\n"

        # ุงูุฎุฏูุงุช ุงูุชู ุชุญุชุงุฌ ูุฑุงุฌุนุฉ
        if recommendations["needs_review"]:
            report += f"""
### ๐ ุฎุฏูุงุช ุชุญุชุงุฌ ูุฑุงุฌุนุฉ ูุฏููุฉ
"""
            for item in recommendations["needs_review"]:
                report += f"- `{item['service']}` ูู {item['group']} ({item['usage_count']} ูุฑุงุฌุน)\n"

        report += f"""
## ๐ ูุชุงุฆุฌ ุงูุชูููุฐ
- **ูููุงุช ูุญุฐููุฉ**: {results['files_deleted']}
- **ุฎุฏูุงุช ุฃุณุงุณูุฉ ูุญุชูุธ ุจูุง**: {results['primary_services_kept']}
- **ูููุงุช ูุฏููุฌุฉ**: {results['files_merged']}
- **ุฃุฎุทุงุก**: {len(results['errors'])}

## ๐ฏ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ

### โ ูุง ุชู ุชุญูููู:
1. **ุงูุงุญุชูุงุธ ุจุงููููุงุช ุงููููุฉ ููุท** - ุชู ุญูุธ ุงูุฎุฏูุงุช ุงููุณุชุฎุฏูุฉ ูุนูุงู
2. **ุญุฐู ุงููููุงุช ุบูุฑ ุงููุณุชุฎุฏูุฉ** - ุชูููุฑ ูุณุงุญุฉ ูุชูููู ุงูุชุนููุฏ
3. **ุงูุชูุธูู ุญุณุจ Clean Architecture** - ูู ุฎุฏูุฉ ูู ููุงููุง ุงูุตุญูุญ
4. **ูุฑุงุฑุงุช ูุจููุฉ ุนูู ุงูุจูุงูุงุช** - ุชุญููู ุงูุงุณุชุฎุฏุงู ุงููุนูู

### ๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:
1. **ูุฑุงุฌุนุฉ ุงูุฎุฏูุงุช ุงููุฏููุฌุฉ** - ุชูููุฐ ุงูุฏูุฌ ุงููุนูู ูููุญุชูู
2. **ุชุญุฏูุซ ุงููุฑุงุฌุน** - ุฅุตูุงุญ ุงูุงุณุชูุฑุงุฏุงุช ูููุณุงุฑุงุช ุงูุฌุฏูุฏุฉ
3. **ุงุฎุชุจุงุฑ ุดุงูู** - ุงูุชุฃูุฏ ูู ุนูู ูู ุดูุก ุจุนุฏ ุงูุชุบููุฑุงุช
4. **ุชูุซูู ุงูุฎุฏูุงุช ุงูุฌุฏูุฏุฉ** - ูุชุงุจุฉ ูุซุงุฆู ููุฎุฏูุงุช ุงูููุญุฏุฉ

---
**ุชู ุฅูุดุงุคู ุจูุงุณุทุฉ**: UsagePatternAnalyzer v1.0
**ุงูุชูููุช**: {timestamp}
"""

        return report

    def run_complete_usage_analysis(self) -> Dict:
        """ุชุดุบูู ุงูุชุญููู ุงููุงูู ููุงุณุชุฎุฏุงู"""
        print("=" * 60)
        print("๐  USAGE PATTERN ANALYZER")
        print("๐ฏ  ANALYZING ACTUAL PROJECT NEEDS")
        print("=" * 60)

        # ุชุญููู ุฃููุงุท ุงูุงุณุชุฎุฏุงู
        service_usage = self.analyze_service_usage_patterns()

        # ุชุตููู ุญุณุจ ุงูุงุณุชุฎุฏุงู
        classification = self.classify_services_by_usage(service_usage)

        # ุฅูุดุงุก ุชูุตูุงุช ุงูุฏูุฌ
        recommendations = self.generate_smart_merge_recommendations(
            service_usage, classification
        )

        # ุชูููุฐ ุงูุชูุธูู
        results = self.execute_usage_based_organization(recommendations)

        # ุฅูุดุงุก ุงูุชูุฑูุฑ
        report_content = self.generate_usage_analysis_report(
            service_usage, classification, recommendations, results
        )
        report_path = (
            self.base_path / "deleted" / "reports" / "USAGE_PATTERN_ANALYSIS.md"
        )
        report_path.parent.mkdir(parents=True, exist_ok=True)

        with open(report_path, "w", encoding="utf-8") as f:
            f.write(report_content)

        print(f"\n๐ ุชู ุฅููุงู ุชุญููู ุฃููุงุท ุงูุงุณุชุฎุฏุงู!")
        print(f"๐ ุงูุชูุฑูุฑ: {report_path}")
        print(f"๐ ุฎุฏูุงุช ูุญุฐููุฉ: {results['files_deleted']}")
        print(f"โ ุฎุฏูุงุช ูุญุชูุธ ุจูุง: {results['primary_services_kept']}")

        return {
            "service_usage": service_usage,
            "classification": classification,
            "recommendations": recommendations,
            "results": results,
        }


def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    analyzer = UsagePatternAnalyzer()

    try:
        analysis = analyzer.run_complete_usage_analysis()
        print(f"\nโ ุชู ุงูุชุญููู ุจูุฌุงุญ!")

    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุญููู: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
