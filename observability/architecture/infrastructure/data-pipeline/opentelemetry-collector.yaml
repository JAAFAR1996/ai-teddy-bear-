# Infrastructure Layer - OpenTelemetry Collector
# Data ingestion and processing pipeline

apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: ai-teddy-observability
  labels:
    app: otel-collector
    component: data-pipeline
    layer: infrastructure
    service-type: telemetry-ingestion
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
        component: data-pipeline
        layer: infrastructure
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
        config.checksum: "{{ checksum of otel config }}"
    spec:
      serviceAccountName: otel-collector
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.89.0
        command:
          - "/otelcol-contrib"
          - "--config=/conf/otel-collector-config.yaml"
        ports:
        - name: pprof
          containerPort: 1777
          protocol: TCP
        - name: prometheus-metrics
          containerPort: 8888
          protocol: TCP
        - name: prometheus-exporter
          containerPort: 8889
          protocol: TCP
        - name: health-check
          containerPort: 13133
          protocol: TCP
        - name: otlp-grpc
          containerPort: 4317
          protocol: TCP
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
        - name: jaeger-grpc
          containerPort: 14250
          protocol: TCP
        - name: jaeger-http
          containerPort: 14268
          protocol: TCP
        - name: fluent-forward
          containerPort: 8006
          protocol: TCP
        - name: zpages
          containerPort: 55679
          protocol: TCP
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: GOMEMLIMIT
          value: "1500MiB"
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
          readOnly: true
        - name: otel-collector-secrets
          mountPath: /etc/ssl/certs
          readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 20
      terminationGracePeriodSeconds: 60
      volumes:
      - name: otel-collector-config-vol
        configMap:
          name: otel-collector-config
          items:
          - key: otel-collector-config.yaml
            path: otel-collector-config.yaml
      - name: otel-collector-secrets
        secret:
          secretName: otel-collector-certs
          optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: ai-teddy-observability
  labels:
    app: otel-collector
    component: data-pipeline
    layer: infrastructure
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8888"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: 4318
    protocol: TCP
  - name: jaeger-grpc
    port: 14250
    targetPort: 14250
    protocol: TCP
  - name: jaeger-http
    port: 14268
    targetPort: 14268
    protocol: TCP
  - name: prometheus-exporter
    port: 8889
    targetPort: 8889
    protocol: TCP
  - name: metrics
    port: 8888
    targetPort: 8888
    protocol: TCP
  - name: fluent-forward
    port: 8006
    targetPort: 8006
    protocol: TCP
  selector:
    app: otel-collector
  sessionAffinity: None

---
# HorizontalPodAutoscaler for OpenTelemetry Collector
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: otel-collector-hpa
  namespace: ai-teddy-observability
  labels:
    app: otel-collector
    component: data-pipeline
    layer: infrastructure
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: otel-collector
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metric for telemetry ingestion rate
  - type: Pods
    pods:
      metric:
        name: otel_receiver_accepted_spans_total
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 3
        periodSeconds: 60

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: otel-collector-pdb
  namespace: ai-teddy-observability
  labels:
    app: otel-collector
    component: data-pipeline
    layer: infrastructure
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: otel-collector 