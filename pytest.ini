[tool:pytest]
# Pytest configuration for AI Teddy Bear project

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 6.0

# Add current directory to Python path
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Strict markers
    --strict-markers
    # Show slowest tests
    --durations=10
    # Fail on warnings
    --strict
    # Enable all warnings
    -W default
    # Coverage options
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    # Parallel execution
    -n auto
    # Fail fast on first failure
    --maxfail=1
    # Show percentage progress
    --tb=short
    # Capture output
    --capture=no
    # Asyncio mode
    --asyncio-mode=auto

# Test markers
markers =
    # Priority markers
    critical: Critical tests that must pass
    high: High priority tests
    medium: Medium priority tests  
    low: Low priority tests
    
    # Test type markers
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    smoke: Smoke tests
    
    # Feature markers
    child_safety: Child safety related tests
    authentication: Authentication tests
    authorization: Authorization tests
    ai: AI/ML related tests
    audio: Audio processing tests
    websocket: WebSocket tests
    
    # Environment markers
    slow: Slow running tests
    flaky: Tests that may fail intermittently
    requires_db: Tests requiring database
    requires_redis: Tests requiring Redis
    requires_network: Tests requiring network access
    
    # Special markers
    timeout: Tests with custom timeout
    skip_ci: Skip in CI environment
    wip: Work in progress tests

# Timeout settings
timeout = 300
timeout_method = thread

# Asyncio settings
asyncio_mode = auto

# Coverage settings
[coverage:run]
source = src
branch = True
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */.venv/*
    
[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    # Standard excludes
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract
    @overload
    
[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Hypothesis settings
[hypothesis]
max_examples = 100
deadline = 5000
suppress_health_check = too_slow, filter_too_much
verbosity = normal

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warning filters
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    default::pytest.PytestUnhandledCoroutineWarning

# Test environment variables
env =
    ENVIRONMENT=test
    DATABASE_URL=postgresql://test_user:test_password@localhost:5432/teddy_bear_test
    REDIS_URL=redis://localhost:6379/0
    LOG_LEVEL=DEBUG
    DISABLE_TELEMETRY=true
    CHILD_SAFETY_MODE=strict 